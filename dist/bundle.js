!function(){var e={7564:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismDefaultParameterId=void 0,t.CubismDefaultParameterId=Object.freeze({HitAreaPrefix:"HitArea",HitAreaHead:"Head",HitAreaBody:"Body",PartsIdCore:"Parts01Core",PartsArmPrefix:"Parts01Arm_",PartsArmLPrefix:"Parts01ArmL_",PartsArmRPrefix:"Parts01ArmR_",ParamAngleX:"ParamAngleX",ParamAngleY:"ParamAngleY",ParamAngleZ:"ParamAngleZ",ParamEyeLOpen:"ParamEyeLOpen",ParamEyeLSmile:"ParamEyeLSmile",ParamEyeROpen:"ParamEyeROpen",ParamEyeRSmile:"ParamEyeRSmile",ParamEyeBallX:"ParamEyeBallX",ParamEyeBallY:"ParamEyeBallY",ParamEyeBallForm:"ParamEyeBallForm",ParamBrowLY:"ParamBrowLY",ParamBrowRY:"ParamBrowRY",ParamBrowLX:"ParamBrowLX",ParamBrowRX:"ParamBrowRX",ParamBrowLAngle:"ParamBrowLAngle",ParamBrowRAngle:"ParamBrowRAngle",ParamBrowLForm:"ParamBrowLForm",ParamBrowRForm:"ParamBrowRForm",ParamMouthForm:"ParamMouthForm",ParamMouthOpenY:"ParamMouthOpenY",ParamCheek:"ParamCheek",ParamBodyAngleX:"ParamBodyAngleX",ParamBodyAngleY:"ParamBodyAngleY",ParamBodyAngleZ:"ParamBodyAngleZ",ParamBreath:"ParamBreath",ParamArmLA:"ParamArmLA",ParamArmRA:"ParamArmRA",ParamArmLB:"ParamArmLB",ParamArmRB:"ParamArmRB",ParamHandL:"ParamHandL",ParamHandR:"ParamHandR",ParamHairFront:"ParamHairFront",ParamHairSide:"ParamHairSide",ParamHairBack:"ParamHairBack",ParamHairFluffy:"ParamHairFluffy",ParamShoulderY:"ParamShoulderY",ParamBustX:"ParamBustX",ParamBustY:"ParamBustY",ParamBaseX:"ParamBaseX",ParamBaseY:"ParamBaseY",ParamNONE:"NONE:"});var n,s=o(i(7564));(n=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).HitAreaBody=s.CubismDefaultParameterId.HitAreaBody,n.HitAreaHead=s.CubismDefaultParameterId.HitAreaHead,n.HitAreaPrefix=s.CubismDefaultParameterId.HitAreaPrefix,n.ParamAngleX=s.CubismDefaultParameterId.ParamAngleX,n.ParamAngleY=s.CubismDefaultParameterId.ParamAngleY,n.ParamAngleZ=s.CubismDefaultParameterId.ParamAngleZ,n.ParamArmLA=s.CubismDefaultParameterId.ParamArmLA,n.ParamArmLB=s.CubismDefaultParameterId.ParamArmLB,n.ParamArmRA=s.CubismDefaultParameterId.ParamArmRA,n.ParamArmRB=s.CubismDefaultParameterId.ParamArmRB,n.ParamBaseX=s.CubismDefaultParameterId.ParamBaseX,n.ParamBaseY=s.CubismDefaultParameterId.ParamBaseY,n.ParamBodyAngleX=s.CubismDefaultParameterId.ParamBodyAngleX,n.ParamBodyAngleY=s.CubismDefaultParameterId.ParamBodyAngleY,n.ParamBodyAngleZ=s.CubismDefaultParameterId.ParamBodyAngleZ,n.ParamBreath=s.CubismDefaultParameterId.ParamBreath,n.ParamBrowLAngle=s.CubismDefaultParameterId.ParamBrowLAngle,n.ParamBrowLForm=s.CubismDefaultParameterId.ParamBrowLForm,n.ParamBrowLX=s.CubismDefaultParameterId.ParamBrowLX,n.ParamBrowLY=s.CubismDefaultParameterId.ParamBrowLY,n.ParamBrowRAngle=s.CubismDefaultParameterId.ParamBrowRAngle,n.ParamBrowRForm=s.CubismDefaultParameterId.ParamBrowRForm,n.ParamBrowRX=s.CubismDefaultParameterId.ParamBrowRX,n.ParamBrowRY=s.CubismDefaultParameterId.ParamBrowRY,n.ParamBustX=s.CubismDefaultParameterId.ParamBustX,n.ParamBustY=s.CubismDefaultParameterId.ParamBustY,n.ParamCheek=s.CubismDefaultParameterId.ParamCheek,n.ParamEyeBallForm=s.CubismDefaultParameterId.ParamEyeBallForm,n.ParamEyeBallX=s.CubismDefaultParameterId.ParamEyeBallX,n.ParamEyeBallY=s.CubismDefaultParameterId.ParamEyeBallY,n.ParamEyeLOpen=s.CubismDefaultParameterId.ParamEyeLOpen,n.ParamEyeLSmile=s.CubismDefaultParameterId.ParamEyeLSmile,n.ParamEyeROpen=s.CubismDefaultParameterId.ParamEyeROpen,n.ParamEyeRSmile=s.CubismDefaultParameterId.ParamEyeRSmile,n.ParamHairBack=s.CubismDefaultParameterId.ParamHairBack,n.ParamHairFluffy=s.CubismDefaultParameterId.ParamHairFluffy,n.ParamHairFront=s.CubismDefaultParameterId.ParamHairFront,n.ParamHairSide=s.CubismDefaultParameterId.ParamHairSide,n.ParamHandL=s.CubismDefaultParameterId.ParamHandL,n.ParamHandR=s.CubismDefaultParameterId.ParamHandR,n.ParamMouthForm=s.CubismDefaultParameterId.ParamMouthForm,n.ParamMouthOpenY=s.CubismDefaultParameterId.ParamMouthOpenY,n.ParamNONE=s.CubismDefaultParameterId.ParamNONE,n.ParamShoulderY=s.CubismDefaultParameterId.ParamShoulderY,n.PartsArmLPrefix=s.CubismDefaultParameterId.PartsArmLPrefix,n.PartsArmPrefix=s.CubismDefaultParameterId.PartsArmPrefix,n.PartsArmRPrefix=s.CubismDefaultParameterId.PartsArmRPrefix,n.PartsIdCore=s.CubismDefaultParameterId.PartsIdCore},1816:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CSM_LOG_LEVEL=t.CSM_LOG_LEVEL_OFF=t.CSM_LOG_LEVEL_ERROR=t.CSM_LOG_LEVEL_WARNING=t.CSM_LOG_LEVEL_INFO=t.CSM_LOG_LEVEL_DEBUG=t.CSM_LOG_LEVEL_VERBOSE=void 0,t.CSM_LOG_LEVEL_VERBOSE=0,t.CSM_LOG_LEVEL_DEBUG=1,t.CSM_LOG_LEVEL_INFO=2,t.CSM_LOG_LEVEL_WARNING=3,t.CSM_LOG_LEVEL_ERROR=4,t.CSM_LOG_LEVEL_OFF=5,t.CSM_LOG_LEVEL=t.CSM_LOG_LEVEL_VERBOSE},9462:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModelSettingJson=void 0;var u,l=i(9531),c=i(1671),h=i(5760),p=i(3706),d="FileReferences",g="UserData",m="Name",_="File",f="Ids",y="Sound",v="FadeInTime",b="FadeOutTime",M="LipSync",C="EyeBlink";!function(e){e[e.FrequestNode_Groups=0]="FrequestNode_Groups",e[e.FrequestNode_Moc=1]="FrequestNode_Moc",e[e.FrequestNode_Motions=2]="FrequestNode_Motions",e[e.FrequestNode_Expressions=3]="FrequestNode_Expressions",e[e.FrequestNode_Textures=4]="FrequestNode_Textures",e[e.FrequestNode_Physics=5]="FrequestNode_Physics",e[e.FrequestNode_Pose=6]="FrequestNode_Pose",e[e.FrequestNode_HitAreas=7]="FrequestNode_HitAreas"}(u||(u={}));var S=function(e){function t(t,i){var r=e.call(this)||this;return r._json=p.CubismJson.create(t,i),r._json&&(r._jsonValue=new h.csmVector,r._jsonValue.pushBack(r._json.getRoot().getValueByString("Groups")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Moc")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Motions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Expressions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Textures")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Physics")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Pose")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("HitAreas"))),r}return a(t,e),t.prototype.release=function(){p.CubismJson.delete(this._json),this._jsonValue=null},t.prototype.GetJson=function(){return this._json},t.prototype.getModelFileName=function(){return this.isExistModelFile()?this._jsonValue.at(u.FrequestNode_Moc).getRawString():""},t.prototype.getTextureCount=function(){return this.isExistTextureFiles()?this._jsonValue.at(u.FrequestNode_Textures).getSize():0},t.prototype.getTextureDirectory=function(){for(var e=this._jsonValue.at(u.FrequestNode_Textures).getValueByIndex(0).getRawString().split("/"),t=e.length-1,i="",r=0;r<t;r++)i+=e[r],r<t-1&&(i+="/");return i},t.prototype.getTextureFileName=function(e){return this._jsonValue.at(u.FrequestNode_Textures).getValueByIndex(e).getRawString()},t.prototype.getHitAreasCount=function(){return this.isExistHitAreas()?this._jsonValue.at(u.FrequestNode_HitAreas).getSize():0},t.prototype.getHitAreaId=function(e){return c.CubismFramework.getIdManager().getId(this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(e).getValueByString("Id").getRawString())},t.prototype.getHitAreaName=function(e){return this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(e).getValueByString(m).getRawString()},t.prototype.getPhysicsFileName=function(){return this.isExistPhysicsFile()?this._jsonValue.at(u.FrequestNode_Physics).getRawString():""},t.prototype.getPoseFileName=function(){return this.isExistPoseFile()?this._jsonValue.at(u.FrequestNode_Pose).getRawString():""},t.prototype.getExpressionCount=function(){return this.isExistExpressionFile()?this._jsonValue.at(u.FrequestNode_Expressions).getSize():0},t.prototype.getExpressionName=function(e){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(e).getValueByString(m).getRawString()},t.prototype.getExpressionFileName=function(e){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(e).getValueByString(_).getRawString()},t.prototype.getMotionGroupCount=function(){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().getSize():0},t.prototype.getMotionGroupName=function(e){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().at(e):null},t.prototype.getMotionCount=function(e){return this.isExistMotionGroupName(e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getSize():0},t.prototype.getMotionFileName=function(e,t){return this.isExistMotionGroupName(e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(_).getRawString():""},t.prototype.getMotionSoundFileName=function(e,t){return this.isExistMotionSoundFile(e,t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(y).getRawString():""},t.prototype.getMotionFadeInTimeValue=function(e,t){return this.isExistMotionFadeIn(e,t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(v).toFloat():-1},t.prototype.getMotionFadeOutTimeValue=function(e,t){return this.isExistMotionFadeOut(e,t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(b).toFloat():-1},t.prototype.getUserDataFile=function(){return this.isExistUserDataFile()?this._json.getRoot().getValueByString(d).getValueByString(g).getRawString():""},t.prototype.getLayoutMap=function(e){var t=this._json.getRoot().getValueByString("Layout").getMap();if(null==t)return!1;for(var i=!1,r=t.begin();r.notEqual(t.end());r.preIncrement())e.setValue(r.ptr().first,r.ptr().second.toFloat()),i=!0;return i},t.prototype.getEyeBlinkParameterCount=function(){if(!this.isExistEyeBlinkParameters())return 0;for(var e=0,t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();t++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t);if(!i.isNull()&&!i.isError()&&i.getValueByString(m).getRawString()==C){e=i.getValueByString(f).getVector().getSize();break}}return e},t.prototype.getEyeBlinkParameterId=function(e){if(!this.isExistEyeBlinkParameters())return null;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();t++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t);if(!i.isNull()&&!i.isError()&&i.getValueByString(m).getRawString()==C)return c.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(e).getRawString())}return null},t.prototype.getLipSyncParameterCount=function(){if(!this.isExistLipSyncParameters())return 0;for(var e=0,t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();t++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t);if(!i.isNull()&&!i.isError()&&i.getValueByString(m).getRawString()==M){e=i.getValueByString(f).getVector().getSize();break}}return e},t.prototype.getLipSyncParameterId=function(e){if(!this.isExistLipSyncParameters())return null;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();t++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t);if(!i.isNull()&&!i.isError()&&i.getValueByString(m).getRawString()==M)return c.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(e).getRawString())}return null},t.prototype.isExistModelFile=function(){var e=this._jsonValue.at(u.FrequestNode_Moc);return!e.isNull()&&!e.isError()},t.prototype.isExistTextureFiles=function(){var e=this._jsonValue.at(u.FrequestNode_Textures);return!e.isNull()&&!e.isError()},t.prototype.isExistHitAreas=function(){var e=this._jsonValue.at(u.FrequestNode_HitAreas);return!e.isNull()&&!e.isError()},t.prototype.isExistPhysicsFile=function(){var e=this._jsonValue.at(u.FrequestNode_Physics);return!e.isNull()&&!e.isError()},t.prototype.isExistPoseFile=function(){var e=this._jsonValue.at(u.FrequestNode_Pose);return!e.isNull()&&!e.isError()},t.prototype.isExistExpressionFile=function(){var e=this._jsonValue.at(u.FrequestNode_Expressions);return!e.isNull()&&!e.isError()},t.prototype.isExistMotionGroups=function(){var e=this._jsonValue.at(u.FrequestNode_Motions);return!e.isNull()&&!e.isError()},t.prototype.isExistMotionGroupName=function(e){var t=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e);return!t.isNull()&&!t.isError()},t.prototype.isExistMotionSoundFile=function(e,t){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(y);return!i.isNull()&&!i.isError()},t.prototype.isExistMotionFadeIn=function(e,t){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(v);return!i.isNull()&&!i.isError()},t.prototype.isExistMotionFadeOut=function(e,t){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(b);return!i.isNull()&&!i.isError()},t.prototype.isExistUserDataFile=function(){var e=this._json.getRoot().getValueByString(d).getValueByString(g);return!e.isNull()&&!e.isError()},t.prototype.isExistEyeBlinkParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();++e)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e).getValueByString(m).getRawString()==C)return!0;return!1},t.prototype.isExistLipSyncParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();++e)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e).getValueByString(m).getRawString()==M)return!0;return!1},t}(l.ICubismModelSetting);t.CubismModelSettingJson=S;var P=s(i(9462));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModelSettingJson=P.CubismModelSettingJson},5644:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.BreathParameterData=t.CubismBreath=void 0;var n=function(){function e(){this._currentTime=0}return e.create=function(){return new e},e.delete=function(e){null!=e&&(e=null)},e.prototype.setParameters=function(e){this._breathParameters=e},e.prototype.getParameters=function(){return this._breathParameters},e.prototype.updateParameters=function(e,t){this._currentTime+=t;for(var i=2*this._currentTime*3.14159,r=0;r<this._breathParameters.getSize();++r){var a=this._breathParameters.at(r);e.addParameterValueById(a.parameterId,a.offset+a.peak*Math.sin(i/a.cycle),a.weight)}},e}();t.CubismBreath=n;t.BreathParameterData=function(e,t,i,r,a){this.parameterId=null==e?null:e,this.offset=null==t?0:t,this.peak=null==i?0:i,this.cycle=null==r?0:r,this.weight=null==a?0:a};var s,u=o(i(5644));(s=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).BreathParameterData=u.BreathParameterData,s.CubismBreath=u.CubismBreath},6325:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.EyeState=t.CubismEyeBlink=void 0;var n,s=i(5760),u=function(){function e(e){if(this._blinkingState=n.EyeState_First,this._nextBlinkingTime=0,this._stateStartTimeSeconds=0,this._blinkingIntervalSeconds=4,this._closingSeconds=.1,this._closedSeconds=.05,this._openingSeconds=.15,this._userTimeSeconds=0,this._parameterIds=new s.csmVector,null!=e)for(var t=0;t<e.getEyeBlinkParameterCount();++t)this._parameterIds.pushBack(e.getEyeBlinkParameterId(t))}return e.create=function(t){return void 0===t&&(t=null),new e(t)},e.delete=function(e){null!=e&&(e=null)},e.prototype.setBlinkingInterval=function(e){this._blinkingIntervalSeconds=e},e.prototype.setBlinkingSetting=function(e,t,i){this._closingSeconds=e,this._closedSeconds=t,this._openingSeconds=i},e.prototype.setParameterIds=function(e){this._parameterIds=e},e.prototype.getParameterIds=function(){return this._parameterIds},e.prototype.updateParameters=function(t,i){var r;this._userTimeSeconds+=i;var a=0;switch(this._blinkingState){case n.EyeState_Closing:(a=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closingSeconds)>=1&&(a=1,this._blinkingState=n.EyeState_Closed,this._stateStartTimeSeconds=this._userTimeSeconds),r=1-a;break;case n.EyeState_Closed:(a=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closedSeconds)>=1&&(this._blinkingState=n.EyeState_Opening,this._stateStartTimeSeconds=this._userTimeSeconds),r=0;break;case n.EyeState_Opening:(a=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._openingSeconds)>=1&&(a=1,this._blinkingState=n.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming()),r=a;break;case n.EyeState_Interval:this._nextBlinkingTime<this._userTimeSeconds&&(this._blinkingState=n.EyeState_Closing,this._stateStartTimeSeconds=this._userTimeSeconds),r=1;break;case n.EyeState_First:default:this._blinkingState=n.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming(),r=1}e.CloseIfZero||(r=-r);for(var o=0;o<this._parameterIds.getSize();++o)t.setParameterValueById(this._parameterIds.at(o),r)},e.prototype.determinNextBlinkingTiming=function(){var e=Math.random();return this._userTimeSeconds+e*(2*this._blinkingIntervalSeconds-1)},e.CloseIfZero=!0,e}();t.CubismEyeBlink=u,function(e){e[e.EyeState_First=0]="EyeState_First",e[e.EyeState_Interval=1]="EyeState_Interval",e[e.EyeState_Closing=2]="EyeState_Closing",e[e.EyeState_Closed=3]="EyeState_Closed",e[e.EyeState_Opening=4]="EyeState_Opening"}(n=t.EyeState||(t.EyeState={}));var l,c=o(i(6325));(l=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismEyeBlink=c.CubismEyeBlink,l.EyeState=c.EyeState},8111:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.PartData=t.CubismPose=void 0;var n=i(1671),s=i(5760),u=i(3706),l="FadeInTime",c="Link",h=function(){function e(){this._fadeTimeSeconds=.5,this._lastModel=null,this._partGroups=new s.csmVector,this._partGroupCounts=new s.csmVector}return e.create=function(t,i){var r=new e,a=u.CubismJson.create(t,i),o=a.getRoot();o.getValueByString(l).isNull()||(r._fadeTimeSeconds=o.getValueByString(l).toFloat(.5),r._fadeTimeSeconds<=0&&(r._fadeTimeSeconds=.5));for(var s=o.getValueByString("Groups"),h=s.getSize(),d=0;d<h;++d){for(var g=s.getValueByIndex(d),m=g.getSize(),_=0,f=0;f<m;++f){var y=g.getValueByIndex(f),v=new p,b=n.CubismFramework.getIdManager().getId(y.getValueByString("Id").getRawString());if(v.partId=b,!y.getValueByString(c).isNull())for(var M=y.getValueByString(c),C=M.getSize(),S=0;S<C;++S){var P=new p,I=n.CubismFramework.getIdManager().getId(M.getValueByIndex(S).getString());P.partId=I,v.link.pushBack(P)}r._partGroups.pushBack(v.clone()),++_}r._partGroupCounts.pushBack(_)}return u.CubismJson.delete(a),r},e.delete=function(e){null!=e&&(e=null)},e.prototype.updateParameters=function(e,t){e!=this._lastModel&&this.reset(e),this._lastModel=e,t<0&&(t=0);for(var i=0,r=0;r<this._partGroupCounts.getSize();r++){var a=this._partGroupCounts.at(r);this.doFade(e,t,i,a),i+=a}this.copyPartOpacities(e)},e.prototype.reset=function(e){for(var t=0,i=0;i<this._partGroupCounts.getSize();++i){for(var r=this._partGroupCounts.at(i),a=t;a<t+r;++a){this._partGroups.at(a).initialize(e);var o=this._partGroups.at(a).partIndex,n=this._partGroups.at(a).parameterIndex;if(!(o<0)){e.setPartOpacityByIndex(o,a==t?1:0),e.setParameterValueByIndex(n,a==t?1:0);for(var s=0;s<this._partGroups.at(a).link.getSize();++s)this._partGroups.at(a).link.at(s).initialize(e)}}t+=r}},e.prototype.copyPartOpacities=function(e){for(var t=0;t<this._partGroups.getSize();++t){var i=this._partGroups.at(t);if(0!=i.link.getSize())for(var r=this._partGroups.at(t).partIndex,a=e.getPartOpacityByIndex(r),o=0;o<i.link.getSize();++o){var n=i.link.at(o).partIndex;n<0||e.setPartOpacityByIndex(n,a)}}},e.prototype.doFade=function(e,t,i,r){for(var a=-1,o=1,n=i;n<i+r;++n){var s=this._partGroups.at(n).partIndex,u=this._partGroups.at(n).parameterIndex;if(e.getParameterValueByIndex(u)>.001){if(a>=0)break;a=n,o=e.getPartOpacityByIndex(s),(o+=t/this._fadeTimeSeconds)>1&&(o=1)}}for(a<0&&(a=0,o=1),n=i;n<i+r;++n){var l=this._partGroups.at(n).partIndex;if(a==n)e.setPartOpacityByIndex(l,o);else{var c=e.getPartOpacityByIndex(l),h=void 0;(1-(h=o<.5?-.5*o/.5+1:.5*(1-o)/.5))*(1-o)>.15&&(h=1-.15/(1-o)),c>h&&(c=h),e.setPartOpacityByIndex(l,c)}}},e}();t.CubismPose=h;var p=function(){function e(e){if(this.parameterIndex=0,this.partIndex=0,this.link=new s.csmVector,null!=e){this.partId=e.partId;for(var t=e.link.begin();t.notEqual(e.link.end());t.preIncrement())this.link.pushBack(t.ptr().clone())}}return e.prototype.assignment=function(e){this.partId=e.partId;for(var t=e.link.begin();t.notEqual(e.link.end());t.preIncrement())this.link.pushBack(t.ptr().clone());return this},e.prototype.initialize=function(e){this.parameterIndex=e.getParameterIndex(this.partId),this.partIndex=e.getPartIndex(this.partId),e.setParameterValueByIndex(this.parameterIndex,1)},e.prototype.clone=function(){var t=new e;t.partId=this.partId,t.parameterIndex=this.parameterIndex,t.partIndex=this.partIndex,t.link=new s.csmVector;for(var i=this.link.begin();i.notEqual(this.link.end());i.increment())t.link.pushBack(i.ptr().clone());return t},e}();t.PartData=p;var d,g=o(i(8111));(d=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismPose=g.CubismPose,d.PartData=g.PartData},9531:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.ICubismModelSetting=void 0;t.ICubismModelSetting=function(){};var n=o(i(9531));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).ICubismModelSetting=n.ICubismModelSetting},5266:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismId=void 0;var n=i(1695),s=function(){function e(e){this._id="string"!=typeof e?e:new n.csmString(e)}return e.prototype.getString=function(){return this._id},e.prototype.isEqual=function(t){return"string"==typeof t?this._id.isEqual(t):t instanceof n.csmString?this._id.isEqual(t.s):t instanceof e&&this._id.isEqual(t._id.s)},e.prototype.isNotEqual=function(t){return"string"==typeof t?!this._id.isEqual(t):t instanceof n.csmString?!this._id.isEqual(t.s):t instanceof e&&!this._id.isEqual(t._id.s)},e}();t.CubismId=s;var u=o(i(5266));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismId=u.CubismId},9534:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismIdManager=void 0;var n=i(5760),s=i(5266),u=function(){function e(){this._ids=new n.csmVector}return e.prototype.release=function(){for(var e=0;e<this._ids.getSize();++e)this._ids.set(e,void 0);this._ids=null},e.prototype.registerIds=function(e){for(var t=0;t<e.length;t++)this.registerId(e[t])},e.prototype.registerId=function(e){var t=null;return"string"!=typeof e?this.registerId(e.s):(null!=(t=this.findId(e))||(t=new s.CubismId(e),this._ids.pushBack(t)),t)},e.prototype.getId=function(e){return this.registerId(e)},e.prototype.isExist=function(e){return"string"==typeof e?null!=this.findId(e):this.isExist(e.s)},e.prototype.findId=function(e){for(var t=0;t<this._ids.getSize();++t)if(this._ids.at(t).getString().isEqual(e))return this._ids.at(t);return null},e}();t.CubismIdManager=u;var l=o(i(9534));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismIdManager=l.CubismIdManager},1671:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.LogLevel=t.Option=t.CubismFramework=t.csmDelete=t.Constant=t.strtod=void 0;var n=i(9534),s=i(7151),u=i(1073),l=i(3706);t.strtod=function(e,t){for(var i=0,r=1;;r++){var a=e.slice(r-1,r);if("e"!=a&&"-"!=a&&"E"!=a){var o=e.substring(0,r),n=Number(o);if(isNaN(n))break;i=r}}var s=parseFloat(e);return isNaN(s)&&(s=NaN),t[0]=e.slice(i),s};var c=!1,h=!1,p=null,d=null;t.Constant=Object.freeze({vertexOffset:0,vertexStep:2}),t.csmDelete=function(e){e&&(e=void 0)};var g=function(){function e(){}return e.startUp=function(e){if(void 0===e&&(e=null),c)return(0,u.CubismLogInfo)("CubismFramework.startUp() is already done."),c;if(null!=(p=e)&&Live2DCubismCore.Logging.csmSetLogFunction(p.logFunction),c=!0){var t=Live2DCubismCore.Version.csmGetVersion(),i=(4278190080&t)>>24,r=(16711680&t)>>16,a=65535&t,o=t;(0,u.CubismLogInfo)("Live2D Cubism Core version: {0}.{1}.{2} ({3})",("00"+i).slice(-2),("00"+r).slice(-2),("0000"+a).slice(-4),o)}return(0,u.CubismLogInfo)("CubismFramework.startUp() is complete."),c},e.cleanUp=function(){c=!1,h=!1,p=null,d=null},e.initialize=function(){(0,u.CSM_ASSERT)(c),c?h?(0,u.CubismLogWarning)("CubismFramework.initialize() skipped, already initialized."):(l.Value.staticInitializeNotForClientCall(),d=new n.CubismIdManager,h=!0,(0,u.CubismLogInfo)("CubismFramework.initialize() is complete.")):(0,u.CubismLogWarning)("CubismFramework is not started.")},e.dispose=function(){(0,u.CSM_ASSERT)(c),c?h?(l.Value.staticReleaseNotForClientCall(),d.release(),d=null,s.CubismRenderer.staticRelease(),h=!1,(0,u.CubismLogInfo)("CubismFramework.dispose() is complete.")):(0,u.CubismLogWarning)("CubismFramework.dispose() skipped, not initialized."):(0,u.CubismLogWarning)("CubismFramework is not started.")},e.isStarted=function(){return c},e.isInitialized=function(){return h},e.coreLogFunction=function(e){Live2DCubismCore.Logging.csmGetLogFunction()&&Live2DCubismCore.Logging.csmGetLogFunction()(e)},e.getLoggingLevel=function(){return null!=p?p.loggingLevel:m.LogLevel_Off},e.getIdManager=function(){return d},e}();t.CubismFramework=g;var m;t.Option=function(){},function(e){e[e.LogLevel_Verbose=0]="LogLevel_Verbose",e[e.LogLevel_Debug=1]="LogLevel_Debug",e[e.LogLevel_Info=2]="LogLevel_Info",e[e.LogLevel_Warning=3]="LogLevel_Warning",e[e.LogLevel_Error=4]="LogLevel_Error",e[e.LogLevel_Off=5]="LogLevel_Off"}(m=t.LogLevel||(t.LogLevel={}));var _,f=o(i(1671));(_=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).Constant=f.Constant,_.csmDelete=f.csmDelete,_.CubismFramework=f.CubismFramework},6370:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMath=void 0;var n=i(2376),s=function(){function e(){}return e.range=function(e,t,i){return e<t?e=t:e>i&&(e=i),e},e.sin=function(e){return Math.sin(e)},e.cos=function(e){return Math.cos(e)},e.abs=function(e){return Math.abs(e)},e.sqrt=function(e){return Math.sqrt(e)},e.cbrt=function(e){if(0===e)return e;var t,i=e,r=i<0;return r&&(i=-i),t=i===1/0?1/0:(i/((t=Math.exp(Math.log(i)/3))*t)+2*t)/3,r?-t:t},e.getEasingSine=function(e){return e<0?0:e>1?1:.5-.5*this.cos(e*Math.PI)},e.max=function(e,t){return e>t?e:t},e.min=function(e,t){return e>t?t:e},e.degreesToRadian=function(e){return e/180*Math.PI},e.radianToDegrees=function(e){return 180*e/Math.PI},e.directionToRadian=function(e,t){for(var i=Math.atan2(t.y,t.x)-Math.atan2(e.y,e.x);i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i},e.directionToDegrees=function(e,t){var i=this.directionToRadian(e,t),r=this.radianToDegrees(i);return t.x-e.x>0&&(r=-r),r},e.radianToDirection=function(e){var t=new n.CubismVector2;return t.x=this.sin(e),t.y=this.cos(e),t},e.quadraticEquation=function(t,i,r){return this.abs(t)<e.Epsilon?this.abs(i)<e.Epsilon?-r:-r/i:-(i+this.sqrt(i*i-4*t*r))/(2*t)},e.cardanoAlgorithmForBezier=function(t,i,r,a){if(this.sqrt(t)<e.Epsilon)return this.range(this.quadraticEquation(i,r,a),0,1);var o=i/t,n=r/t,s=(3*n-o*o)/3,u=s/3,l=(2*o*o*o-9*o*n+a/t*27)/27,c=l/2,h=c*c+u*u*u,p=.51;if(h<0){var d=-s/3,g=d*d*d,m=this.sqrt(g),_=-l/(2*m),f=this.range(_,-1,1),y=Math.acos(f),v=2*this.cbrt(m),b=v*this.cos(y/3)-o/3;if(this.abs(b-.5)<p)return this.range(b,0,1);var M=v*this.cos((y+2*Math.PI)/3)-o/3;if(this.abs(M-.5)<p)return this.range(M,0,1);var C=v*this.cos((y+4*Math.PI)/3)-o/3;return this.range(C,0,1)}if(0==h){var S,P=2*(S=c<0?this.cbrt(-c):-this.cbrt(c))-o/3;return this.abs(P-.5)<p?this.range(P,0,1):(M=-S-o/3,this.range(M,0,1))}var I=this.sqrt(h),x=this.cbrt(I-c)-this.cbrt(I+c)-o/3;return this.range(x,0,1)},e.Epsilon=1e-5,e}();t.CubismMath=s;var u=o(i(6370));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMath=u.CubismMath},1149:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMatrix44=void 0;var n=function(){function e(){this._tr=new Float32Array(16),this.loadIdentity()}return e.multiply=function(e,t,i){for(var r=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),a=0;a<4;++a)for(var o=0;o<4;++o)for(var n=0;n<4;++n)r[o+4*a]+=e[n+4*a]*t[o+4*n];for(a=0;a<16;++a)i[a]=r[a]},e.prototype.loadIdentity=function(){var e=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(e)},e.prototype.setMatrix=function(e){for(var t=0;t<16;++t)this._tr[t]=e[t]},e.prototype.getArray=function(){return this._tr},e.prototype.getScaleX=function(){return this._tr[0]},e.prototype.getScaleY=function(){return this._tr[5]},e.prototype.getTranslateX=function(){return this._tr[12]},e.prototype.getTranslateY=function(){return this._tr[13]},e.prototype.transformX=function(e){return this._tr[0]*e+this._tr[12]},e.prototype.transformY=function(e){return this._tr[5]*e+this._tr[13]},e.prototype.invertTransformX=function(e){return(e-this._tr[12])/this._tr[0]},e.prototype.invertTransformY=function(e){return(e-this._tr[13])/this._tr[5]},e.prototype.translateRelative=function(t,i){var r=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,i,0,1]);e.multiply(r,this._tr,this._tr)},e.prototype.translate=function(e,t){this._tr[12]=e,this._tr[13]=t},e.prototype.translateX=function(e){this._tr[12]=e},e.prototype.translateY=function(e){this._tr[13]=e},e.prototype.scaleRelative=function(t,i){var r=new Float32Array([t,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]);e.multiply(r,this._tr,this._tr)},e.prototype.scale=function(e,t){this._tr[0]=e,this._tr[5]=t},e.prototype.multiplyByMatrix=function(t){e.multiply(t.getArray(),this._tr,this._tr)},e.prototype.clone=function(){for(var t=new e,i=0;i<this._tr.length;i++)t._tr[i]=this._tr[i];return t},e}();t.CubismMatrix44=n;var s=o(i(1149));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMatrix44=s.CubismMatrix44},6175:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModelMatrix=void 0;var u=function(e){function t(t,i){var r=e.call(this)||this;return r._width=void 0!==t?t:0,r._height=void 0!==i?i:0,r.setHeight(2),r}return a(t,e),t.prototype.setWidth=function(e){var t=e/this._width,i=t;this.scale(t,i)},t.prototype.setHeight=function(e){var t=e/this._height,i=t;this.scale(t,i)},t.prototype.setPosition=function(e,t){this.translate(e,t)},t.prototype.setCenterPosition=function(e,t){this.centerX(e),this.centerY(t)},t.prototype.top=function(e){this.setY(e)},t.prototype.bottom=function(e){var t=this._height*this.getScaleY();this.translateY(e-t)},t.prototype.left=function(e){this.setX(e)},t.prototype.right=function(e){var t=this._width*this.getScaleX();this.translateX(e-t)},t.prototype.centerX=function(e){var t=this._width*this.getScaleX();this.translateX(e-t/2)},t.prototype.setX=function(e){this.translateX(e)},t.prototype.centerY=function(e){var t=this._height*this.getScaleY();this.translateY(e-t/2)},t.prototype.setY=function(e){this.translateY(e)},t.prototype.setupFromLayout=function(e){for(var t=e.begin();t.notEqual(e.end());t.preIncrement()){var i=t.ptr().first,r=t.ptr().second;"width"==i?this.setWidth(r):"height"==i&&this.setHeight(r)}for(t=e.begin();t.notEqual(e.end());t.preIncrement())i=t.ptr().first,r=t.ptr().second,"x"==i?this.setX(r):"y"==i?this.setY(r):"center_x"==i?this.centerX(r):"center_y"==i?this.centerY(r):"top"==i?this.top(r):"bottom"==i?this.bottom(r):"left"==i?this.left(r):"right"==i&&this.right(r)},t}(i(1149).CubismMatrix44);t.CubismModelMatrix=u;var l=s(i(6175));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModelMatrix=l.CubismModelMatrix},1042:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismTargetPoint=void 0;var n=i(6370),s=function(){function e(){this._faceTargetX=0,this._faceTargetY=0,this._faceX=0,this._faceY=0,this._faceVX=0,this._faceVY=0,this._lastTimeSeconds=0,this._userTimeSeconds=0}return e.prototype.update=function(e){this._userTimeSeconds+=e;var t=4/30;if(0!=this._lastTimeSeconds){var i=30*(this._userTimeSeconds-this._lastTimeSeconds);this._lastTimeSeconds=this._userTimeSeconds;var r=i*t/4.5,a=this._faceTargetX-this._faceX,o=this._faceTargetY-this._faceY;if(!(n.CubismMath.abs(a)<=.01&&n.CubismMath.abs(o)<=.01)){var s=n.CubismMath.sqrt(a*a+o*o),u=t*o/s,l=t*a/s-this._faceVX,c=u-this._faceVY,h=n.CubismMath.sqrt(l*l+c*c);(h<-r||h>r)&&(l*=r/h,c*=r/h),this._faceVX+=l,this._faceVY+=c;var p=.5*(n.CubismMath.sqrt(r*r+16*r*s-8*r*s)-r),d=n.CubismMath.sqrt(this._faceVX*this._faceVX+this._faceVY*this._faceVY);d>p&&(this._faceVX*=p/d,this._faceVY*=p/d),this._faceX+=this._faceVX,this._faceY+=this._faceVY}}else this._lastTimeSeconds=this._userTimeSeconds},e.prototype.getX=function(){return this._faceX},e.prototype.getY=function(){return this._faceY},e.prototype.set=function(e,t){this._faceTargetX=e,this._faceTargetY=t},e}();t.CubismTargetPoint=s;var u=o(i(1042));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismTargetPoint=u.CubismTargetPoint},2376:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismVector2=void 0;var n=function(){function e(e,t){this.x=e,this.y=t,this.x=null==e?0:e,this.y=null==t?0:t}return e.prototype.add=function(t){var i=new e(0,0);return i.x=this.x+t.x,i.y=this.y+t.y,i},e.prototype.substract=function(t){var i=new e(0,0);return i.x=this.x-t.x,i.y=this.y-t.y,i},e.prototype.multiply=function(t){var i=new e(0,0);return i.x=this.x*t.x,i.y=this.y*t.y,i},e.prototype.multiplyByScaler=function(t){return this.multiply(new e(t,t))},e.prototype.division=function(t){var i=new e(0,0);return i.x=this.x/t.x,i.y=this.y/t.y,i},e.prototype.divisionByScalar=function(t){return this.division(new e(t,t))},e.prototype.getLength=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},e.prototype.getDistanceWith=function(e){return Math.sqrt((this.x-e.x)*(this.x-e.x)+(this.y-e.y)*(this.y-e.y))},e.prototype.dot=function(e){return this.x*e.x+this.y*e.y},e.prototype.normalize=function(){var e=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/e,this.y=this.y/e},e.prototype.isEqual=function(e){return this.x==e.x&&this.y==e.y},e.prototype.isNotEqual=function(e){return!this.isEqual(e)},e}();t.CubismVector2=n;var s=o(i(2376));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismVector2=s.CubismVector2},9248:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismViewMatrix=void 0;var u=i(1149),l=function(e){function t(){var t=e.call(this)||this;return t._screenLeft=0,t._screenRight=0,t._screenTop=0,t._screenBottom=0,t._maxLeft=0,t._maxRight=0,t._maxTop=0,t._maxBottom=0,t._maxScale=0,t._minScale=0,t}return a(t,e),t.prototype.adjustTranslate=function(e,t){this._tr[0]*this._maxLeft+(this._tr[12]+e)>this._screenLeft&&(e=this._screenLeft-this._tr[0]*this._maxLeft-this._tr[12]),this._tr[0]*this._maxRight+(this._tr[12]+e)<this._screenRight&&(e=this._screenRight-this._tr[0]*this._maxRight-this._tr[12]),this._tr[5]*this._maxTop+(this._tr[13]+t)<this._screenTop&&(t=this._screenTop-this._tr[5]*this._maxTop-this._tr[13]),this._tr[5]*this._maxBottom+(this._tr[13]+t)>this._screenBottom&&(t=this._screenBottom-this._tr[5]*this._maxBottom-this._tr[13]);var i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,e,t,0,1]);u.CubismMatrix44.multiply(i,this._tr,this._tr)},t.prototype.adjustScale=function(e,t,i){var r=this.getMaxScale(),a=this.getMinScale(),o=i*this._tr[0];o<a?this._tr[0]>0&&(i=a/this._tr[0]):o>r&&this._tr[0]>0&&(i=r/this._tr[0]);var n=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,e,t,0,1]),s=new Float32Array([i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]),l=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-e,-t,0,1]);u.CubismMatrix44.multiply(l,this._tr,this._tr),u.CubismMatrix44.multiply(s,this._tr,this._tr),u.CubismMatrix44.multiply(n,this._tr,this._tr)},t.prototype.setScreenRect=function(e,t,i,r){this._screenLeft=e,this._screenRight=t,this._screenBottom=i,this._screenTop=r},t.prototype.setMaxScreenRect=function(e,t,i,r){this._maxLeft=e,this._maxRight=t,this._maxTop=r,this._maxBottom=i},t.prototype.setMaxScale=function(e){this._maxScale=e},t.prototype.setMinScale=function(e){this._minScale=e},t.prototype.getMaxScale=function(){return this._maxScale},t.prototype.getMinScale=function(){return this._minScale},t.prototype.isMaxScale=function(){return this.getScaleX()>=this._maxScale},t.prototype.isMinScale=function(){return this.getScaleX()<=this._minScale},t.prototype.getScreenLeft=function(){return this._screenLeft},t.prototype.getScreenRight=function(){return this._screenRight},t.prototype.getScreenBottom=function(){return this._screenBottom},t.prototype.getScreenTop=function(){return this._screenTop},t.prototype.getMaxLeft=function(){return this._maxLeft},t.prototype.getMaxRight=function(){return this._maxRight},t.prototype.getMaxBottom=function(){return this._maxBottom},t.prototype.getMaxTop=function(){return this._maxTop},t}(u.CubismMatrix44);t.CubismViewMatrix=l;var c=s(i(9248));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismViewMatrix=c.CubismViewMatrix},7577:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMoc=void 0;var n=i(1073),s=i(1403),u=function(){function e(e){this._moc=e,this._modelCount=0,this._mocVersion=0}return e.create=function(t){var i=null,r=Live2DCubismCore.Moc.fromArrayBuffer(t);return r&&((i=new e(r))._mocVersion=Live2DCubismCore.Version.csmGetMocVersion(r,t)),i},e.delete=function(e){e._moc._release(),e._moc=null,e=null},e.prototype.createModel=function(){var e=null,t=Live2DCubismCore.Model.fromMoc(this._moc);return t&&((e=new s.CubismModel(t)).initialize(),++this._modelCount),e},e.prototype.deleteModel=function(e){null!=e&&(e.release(),e=null,--this._modelCount)},e.prototype.release=function(){(0,n.CSM_ASSERT)(0==this._modelCount),this._moc._release(),this._moc=null},e.prototype.getLatestMocVersion=function(){return Live2DCubismCore.Version.csmGetLatestMocVersion()},e.prototype.getMocVersion=function(){return this._mocVersion},e}();t.CubismMoc=u;var l=o(i(7577));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMoc=l.CubismMoc},1403:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModel=t.DrawableColorData=void 0;var n=i(1671),s=i(7151),u=i(502),l=i(5760),c=i(1073),h=function(){this.isOverwritten=!1,this.Color=new s.CubismTextureColor};t.DrawableColorData=h;var p=function(){function e(e){this._model=e,this._parameterValues=null,this._parameterMaximumValues=null,this._parameterMinimumValues=null,this._partOpacities=null,this._savedParameters=new l.csmVector,this._parameterIds=new l.csmVector,this._drawableIds=new l.csmVector,this._partIds=new l.csmVector,this._isOverwrittenModelMultiplyColors=!1,this._isOverwrittenModelScreenColors=!1,this._userMultiplyColors=null,this._userScreenColors=null,this._notExistPartId=new u.csmMap,this._notExistParameterId=new u.csmMap,this._notExistParameterValues=new u.csmMap,this._notExistPartOpacities=new u.csmMap}return e.prototype.update=function(){this._model.update(),this._model.drawables.resetDynamicFlags()},e.prototype.getCanvasWidth=function(){return null==this._model?0:this._model.canvasinfo.CanvasWidth/this._model.canvasinfo.PixelsPerUnit},e.prototype.getCanvasHeight=function(){return null==this._model?0:this._model.canvasinfo.CanvasHeight/this._model.canvasinfo.PixelsPerUnit},e.prototype.saveParameters=function(){for(var e=this._model.parameters.count,t=this._savedParameters.getSize(),i=0;i<e;++i)i<t?this._savedParameters.set(i,this._parameterValues[i]):this._savedParameters.pushBack(this._parameterValues[i])},e.prototype.getMultiplyColor=function(e){return this.getOverwriteFlagForModelMultiplyColors()||this.getOverwriteFlagForDrawableMultiplyColors(e)?this._userMultiplyColors.at(e).Color:this.getDrawableMultiplyColor(e)},e.prototype.getScreenColor=function(e){return this.getOverwriteFlagForModelScreenColors()||this.getOverwriteFlagForDrawableScreenColors(e)?this._userScreenColors.at(e).Color:this.getDrawableScreenColor(e)},e.prototype.setMultiplyColorByTextureColor=function(e,t){this.setMultiplyColorByRGBA(e,t.R,t.G,t.B,t.A)},e.prototype.setMultiplyColorByRGBA=function(e,t,i,r,a){void 0===a&&(a=1),this._userMultiplyColors.at(e).Color.R=t,this._userMultiplyColors.at(e).Color.G=i,this._userMultiplyColors.at(e).Color.B=r,this._userMultiplyColors.at(e).Color.A=a},e.prototype.setScreenColorByTextureColor=function(e,t){this.setScreenColorByRGBA(e,t.R,t.G,t.B,t.A)},e.prototype.setScreenColorByRGBA=function(e,t,i,r,a){void 0===a&&(a=1),this._userScreenColors.at(e).Color.R=t,this._userScreenColors.at(e).Color.G=i,this._userScreenColors.at(e).Color.B=r,this._userScreenColors.at(e).Color.A=a},e.prototype.getOverwriteFlagForModelMultiplyColors=function(){return this._isOverwrittenModelMultiplyColors},e.prototype.getOverwriteFlagForModelScreenColors=function(){return this._isOverwrittenModelScreenColors},e.prototype.setOverwriteFlagForModelMultiplyColors=function(e){this._isOverwrittenModelMultiplyColors=e},e.prototype.setOverwriteFlagForModelScreenColors=function(e){this._isOverwrittenModelScreenColors=e},e.prototype.getOverwriteFlagForDrawableMultiplyColors=function(e){return this._userMultiplyColors.at(e).isOverwritten},e.prototype.getOverwriteFlagForDrawableScreenColors=function(e){return this._userMultiplyColors.at(e).isOverwritten},e.prototype.setOverwriteFlagForDrawableMultiplyColors=function(e,t){this._userMultiplyColors.at(e).isOverwritten=t},e.prototype.setOverwriteFlagForDrawableScreenColors=function(e,t){this._userScreenColors.at(e).isOverwritten=t},e.prototype.getModel=function(){return this._model},e.prototype.getPartIndex=function(e){var t,i=this._model.parts.count;for(t=0;t<i;++t)if(e==this._partIds.at(t))return t;return this._notExistPartId.isExist(e)?this._notExistPartId.getValue(e):(t=i+this._notExistPartId.getSize(),this._notExistPartId.setValue(e,t),this._notExistPartOpacities.appendKey(t),t)},e.prototype.getPartCount=function(){return this._model.parts.count},e.prototype.setPartOpacityByIndex=function(e,t){this._notExistPartOpacities.isExist(e)?this._notExistPartOpacities.setValue(e,t):((0,c.CSM_ASSERT)(0<=e&&e<this.getPartCount()),this._partOpacities[e]=t)},e.prototype.setPartOpacityById=function(e,t){var i=this.getPartIndex(e);i<0||this.setPartOpacityByIndex(i,t)},e.prototype.getPartOpacityByIndex=function(e){return this._notExistPartOpacities.isExist(e)?this._notExistPartOpacities.getValue(e):((0,c.CSM_ASSERT)(0<=e&&e<this.getPartCount()),this._partOpacities[e])},e.prototype.getPartOpacityById=function(e){var t=this.getPartIndex(e);return t<0?0:this.getPartOpacityByIndex(t)},e.prototype.getParameterIndex=function(e){var t,i=this._model.parameters.count;for(t=0;t<i;++t)if(e==this._parameterIds.at(t))return t;return this._notExistParameterId.isExist(e)?this._notExistParameterId.getValue(e):(t=this._model.parameters.count+this._notExistParameterId.getSize(),this._notExistParameterId.setValue(e,t),this._notExistParameterValues.appendKey(t),t)},e.prototype.getParameterCount=function(){return this._model.parameters.count},e.prototype.getParameterType=function(e){return this._model.parameters.types[e]},e.prototype.getParameterMaximumValue=function(e){return this._model.parameters.maximumValues[e]},e.prototype.getParameterMinimumValue=function(e){return this._model.parameters.minimumValues[e]},e.prototype.getParameterDefaultValue=function(e){return this._model.parameters.defaultValues[e]},e.prototype.getParameterValueByIndex=function(e){return this._notExistParameterValues.isExist(e)?this._notExistParameterValues.getValue(e):((0,c.CSM_ASSERT)(0<=e&&e<this.getParameterCount()),this._parameterValues[e])},e.prototype.getParameterValueById=function(e){var t=this.getParameterIndex(e);return this.getParameterValueByIndex(t)},e.prototype.setParameterValueByIndex=function(e,t,i){void 0===i&&(i=1),this._notExistParameterValues.isExist(e)?this._notExistParameterValues.setValue(e,1==i?t:this._notExistParameterValues.getValue(e)*(1-i)+t*i):((0,c.CSM_ASSERT)(0<=e&&e<this.getParameterCount()),this._model.parameters.maximumValues[e]<t&&(t=this._model.parameters.maximumValues[e]),this._model.parameters.minimumValues[e]>t&&(t=this._model.parameters.minimumValues[e]),this._parameterValues[e]=1==i?t:this._parameterValues[e]=this._parameterValues[e]*(1-i)+t*i)},e.prototype.setParameterValueById=function(e,t,i){void 0===i&&(i=1);var r=this.getParameterIndex(e);this.setParameterValueByIndex(r,t,i)},e.prototype.addParameterValueByIndex=function(e,t,i){void 0===i&&(i=1),this.setParameterValueByIndex(e,this.getParameterValueByIndex(e)+t*i)},e.prototype.addParameterValueById=function(e,t,i){void 0===i&&(i=1);var r=this.getParameterIndex(e);this.addParameterValueByIndex(r,t,i)},e.prototype.multiplyParameterValueById=function(e,t,i){void 0===i&&(i=1);var r=this.getParameterIndex(e);this.multiplyParameterValueByIndex(r,t,i)},e.prototype.multiplyParameterValueByIndex=function(e,t,i){void 0===i&&(i=1),this.setParameterValueByIndex(e,this.getParameterValueByIndex(e)*(1+(t-1)*i))},e.prototype.getDrawableIndex=function(e){for(var t=this._model.drawables.count,i=0;i<t;++i)if(this._drawableIds.at(i)==e)return i;return-1},e.prototype.getDrawableCount=function(){return this._model.drawables.count},e.prototype.getDrawableId=function(e){var t=this._model.drawables.ids;return n.CubismFramework.getIdManager().getId(t[e])},e.prototype.getDrawableRenderOrders=function(){return this._model.drawables.renderOrders},e.prototype.getDrawableTextureIndices=function(e){return this.getDrawableTextureIndex(e)},e.prototype.getDrawableTextureIndex=function(e){return this._model.drawables.textureIndices[e]},e.prototype.getDrawableDynamicFlagVertexPositionsDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(t[e])},e.prototype.getDrawableVertexIndexCount=function(e){return this._model.drawables.indexCounts[e]},e.prototype.getDrawableVertexCount=function(e){return this._model.drawables.vertexCounts[e]},e.prototype.getDrawableVertices=function(e){return this.getDrawableVertexPositions(e)},e.prototype.getDrawableVertexIndices=function(e){return this._model.drawables.indices[e]},e.prototype.getDrawableVertexPositions=function(e){return this._model.drawables.vertexPositions[e]},e.prototype.getDrawableVertexUvs=function(e){return this._model.drawables.vertexUvs[e]},e.prototype.getDrawableOpacity=function(e){return this._model.drawables.opacities[e]},e.prototype.getDrawableMultiplyColor=function(e){var t=this._model.drawables.multiplyColors,i=4*e,r=new s.CubismTextureColor;return r.R=t[i],r.G=t[i+1],r.B=t[i+2],r.A=t[i+3],r},e.prototype.getDrawableScreenColor=function(e){var t=this._model.drawables.screenColors,i=4*e,r=new s.CubismTextureColor;return r.R=t[i],r.G=t[i+1],r.B=t[i+2],r.A=t[i+3],r},e.prototype.getDrawableParentPartIndex=function(e){return this._model.drawables.parentPartIndices[e]},e.prototype.getDrawableCulling=function(e){var t=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(t[e])},e.prototype.getDrawableBlendMode=function(e){var t=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(t[e])?s.CubismBlendMode.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(t[e])?s.CubismBlendMode.CubismBlendMode_Multiplicative:s.CubismBlendMode.CubismBlendMode_Normal},e.prototype.getDrawableInvertedMaskBit=function(e){var t=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(t[e])},e.prototype.getDrawableMasks=function(){return this._model.drawables.masks},e.prototype.getDrawableMaskCounts=function(){return this._model.drawables.maskCounts},e.prototype.isUsingMasking=function(){for(var e=0;e<this._model.drawables.count;++e)if(!(this._model.drawables.maskCounts[e]<=0))return!0;return!1},e.prototype.getDrawableDynamicFlagIsVisible=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(t[e])},e.prototype.getDrawableDynamicFlagVisibilityDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(t[e])},e.prototype.getDrawableDynamicFlagOpacityDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasOpacityDidChangeBit(t[e])},e.prototype.getDrawableDynamicFlagRenderOrderDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(t[e])},e.prototype.getDrawableDynamicFlagBlendColorDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(t[e])},e.prototype.loadParameters=function(){var e=this._model.parameters.count,t=this._savedParameters.getSize();e>t&&(e=t);for(var i=0;i<e;++i)this._parameterValues[i]=this._savedParameters.at(i)},e.prototype.initialize=function(){(0,c.CSM_ASSERT)(this._model),this._parameterValues=this._model.parameters.values,this._partOpacities=this._model.parts.opacities,this._parameterMaximumValues=this._model.parameters.maximumValues,this._parameterMinimumValues=this._model.parameters.minimumValues;var e=this._model.parameters.ids,t=this._model.parameters.count;this._parameterIds.prepareCapacity(t);for(var i=0;i<t;++i)this._parameterIds.pushBack(n.CubismFramework.getIdManager().getId(e[i]));var r=this._model.parts.ids,a=this._model.parts.count;for(this._partIds.prepareCapacity(a),i=0;i<a;++i)this._partIds.pushBack(n.CubismFramework.getIdManager().getId(r[i]));var o=this._model.drawables.ids,s=this._model.drawables.count;for(this._userMultiplyColors=new l.csmVector,this._userMultiplyColors.updateSize(s,h,!0),this._userScreenColors=new l.csmVector,this._userScreenColors.updateSize(s,h,!0),this._drawableIds.prepareCapacity(s),i=0;i<s;++i)this._drawableIds.pushBack(n.CubismFramework.getIdManager().getId(o[i])),this.setMultiplyColorByRGBA(i,1,1,1,1),this.setScreenColorByRGBA(i,0,0,0,1)},e.prototype.release=function(){this._model.release(),this._model=null},e}();t.CubismModel=p;var d=o(i(1403));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModel=d.CubismModel},5408:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModelUserData=t.CubismModelUserDataNode=void 0;var n=i(1671),s=i(1695),u=i(5760),l=i(8845),c=function(){};t.CubismModelUserDataNode=c;var h=function(){function e(){this._userDataNodes=new u.csmVector,this._artMeshUserDataNode=new u.csmVector}return e.create=function(t,i){var r=new e;return r.parseUserData(t,i),r},e.delete=function(e){null!=e&&(e.release(),e=null)},e.prototype.getArtMeshUserDatas=function(){return this._artMeshUserDataNode},e.prototype.parseUserData=function(e,t){for(var i=new l.CubismModelUserDataJson(e,t),r=n.CubismFramework.getIdManager().getId("ArtMesh"),a=i.getUserDataCount(),o=0;o<a;o++){var u=new c;u.targetId=i.getUserDataId(o),u.targetType=n.CubismFramework.getIdManager().getId(i.getUserDataTargetType(o)),u.value=new s.csmString(i.getUserDataValue(o)),this._userDataNodes.pushBack(u),u.targetType==r&&this._artMeshUserDataNode.pushBack(u)}i.release(),i=void 0},e.prototype.release=function(){for(var e=0;e<this._userDataNodes.getSize();++e)this._userDataNodes.set(e,null);this._userDataNodes=null},e}();t.CubismModelUserData=h;var p,d=o(i(5408));(p=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModelUserData=d.CubismModelUserData,p.CubismModelUserDataNode=d.CubismModelUserDataNode},8845:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModelUserDataJson=void 0;var n=i(1671),s=i(3706),u="Meta",l="UserData",c=function(){function e(e,t){this._json=s.CubismJson.create(e,t)}return e.prototype.release=function(){s.CubismJson.delete(this._json)},e.prototype.getUserDataCount=function(){return this._json.getRoot().getValueByString(u).getValueByString("UserDataCount").toInt()},e.prototype.getTotalUserDataSize=function(){return this._json.getRoot().getValueByString(u).getValueByString("TotalUserDataSize").toInt()},e.prototype.getUserDataTargetType=function(e){return this._json.getRoot().getValueByString(l).getValueByIndex(e).getValueByString("Target").getRawString()},e.prototype.getUserDataId=function(e){return n.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(l).getValueByIndex(e).getValueByString("Id").getRawString())},e.prototype.getUserDataValue=function(e){return this._json.getRoot().getValueByString(l).getValueByIndex(e).getValueByString("Value").getRawString()},e}();t.CubismModelUserDataJson=c;var h=o(i(8845));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModelUserDataJson=h.CubismModelUserDataJson},8385:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismUserModel=void 0;var n=i(5644),s=i(6325),u=i(8111),l=i(1671),c=i(6175),h=i(1042),p=i(6437),d=i(2916),g=i(9296),m=i(3039),_=i(3795),f=i(1073),y=i(7577),v=i(5408),b=function(){function e(){this.loadMotion=function(e,t,i,r){return d.CubismMotion.create(e,t,r)},this._moc=null,this._model=null,this._motionManager=null,this._expressionManager=null,this._eyeBlink=null,this._breath=null,this._modelMatrix=null,this._pose=null,this._dragManager=null,this._physics=null,this._modelUserData=null,this._initialized=!1,this._updating=!1,this._opacity=1,this._lipsync=!0,this._lastLipSyncValue=0,this._dragX=0,this._dragY=0,this._accelerationX=0,this._accelerationY=0,this._accelerationZ=0,this._debugMode=!1,this._renderer=null,this._motionManager=new g.CubismMotionManager,this._motionManager.setEventCallback(e.cubismDefaultMotionEventCallback,this),this._expressionManager=new g.CubismMotionManager,this._dragManager=new h.CubismTargetPoint}return e.prototype.isInitialized=function(){return this._initialized},e.prototype.setInitialized=function(e){this._initialized=e},e.prototype.isUpdating=function(){return this._updating},e.prototype.setUpdating=function(e){this._updating=e},e.prototype.setDragging=function(e,t){this._dragManager.set(e,t)},e.prototype.setAcceleration=function(e,t,i){this._accelerationX=e,this._accelerationY=t,this._accelerationZ=i},e.prototype.getModelMatrix=function(){return this._modelMatrix},e.prototype.setOpacity=function(e){this._opacity=e},e.prototype.getOpacity=function(){return this._opacity},e.prototype.loadModel=function(e){this._moc=y.CubismMoc.create(e),null!=this._moc?(this._model=this._moc.createModel(),null!=this._model?(this._model.saveParameters(),this._modelMatrix=new c.CubismModelMatrix(this._model.getCanvasWidth(),this._model.getCanvasHeight())):(0,f.CubismLogError)("Failed to CreateModel().")):(0,f.CubismLogError)("Failed to CubismMoc.create().")},e.prototype.loadExpression=function(e,t,i){return p.CubismExpressionMotion.create(e,t)},e.prototype.loadPose=function(e,t){this._pose=u.CubismPose.create(e,t)},e.prototype.loadUserData=function(e,t){this._modelUserData=v.CubismModelUserData.create(e,t)},e.prototype.loadPhysics=function(e,t){this._physics=m.CubismPhysics.create(e,t)},e.prototype.isHit=function(e,t,i){var r=this._model.getDrawableIndex(e);if(r<0)return!1;for(var a=this._model.getDrawableVertexCount(r),o=this._model.getDrawableVertices(r),n=o[0],s=o[0],u=o[1],c=o[1],h=1;h<a;++h){var p=o[l.Constant.vertexOffset+h*l.Constant.vertexStep],d=o[l.Constant.vertexOffset+h*l.Constant.vertexStep+1];p<n&&(n=p),p>s&&(s=p),d<u&&(u=d),d>c&&(c=d)}var g=this._modelMatrix.invertTransformX(t),m=this._modelMatrix.invertTransformY(i);return n<=g&&g<=s&&u<=m&&m<=c},e.prototype.getModel=function(){return this._model},e.prototype.getRenderer=function(){return this._renderer},e.prototype.createRenderer=function(){this._renderer&&this.deleteRenderer(),this._renderer=new _.CubismRenderer_WebGL,this._renderer.initialize(this._model)},e.prototype.deleteRenderer=function(){null!=this._renderer&&(this._renderer.release(),this._renderer=null)},e.prototype.motionEventFired=function(e){(0,f.CubismLogInfo)("{0}",e.s)},e.cubismDefaultMotionEventCallback=function(e,t,i){null!=i&&i.motionEventFired(t)},e.prototype.release=function(){null!=this._motionManager&&(this._motionManager.release(),this._motionManager=null),null!=this._expressionManager&&(this._expressionManager.release(),this._expressionManager=null),null!=this._moc&&(this._moc.deleteModel(this._model),this._moc.release(),this._moc=null),this._modelMatrix=null,u.CubismPose.delete(this._pose),s.CubismEyeBlink.delete(this._eyeBlink),n.CubismBreath.delete(this._breath),this._dragManager=null,m.CubismPhysics.delete(this._physics),v.CubismModelUserData.delete(this._modelUserData),this.deleteRenderer()},e}();t.CubismUserModel=b;var M=o(i(8385));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismUserModel=M.CubismUserModel},8855:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.ACubismMotion=void 0;var n=i(6370),s=i(5760),u=i(1073),l=function(){function e(){var e=this;this.setFinishedMotionHandler=function(t){return e._onFinishedMotion=t},this.getFinishedMotionHandler=function(){return e._onFinishedMotion},this._fadeInSeconds=-1,this._fadeOutSeconds=-1,this._weight=1,this._offsetSeconds=0,this._firedEventValues=new s.csmVector}return e.delete=function(e){e.release(),e=null},e.prototype.release=function(){this._weight=0},e.prototype.updateParameters=function(e,t,i){if(t.isAvailable()&&!t.isFinished()){if(!t.isStarted()){t.setIsStarted(!0),t.setStartTime(i-this._offsetSeconds),t.setFadeInStartTime(i);var r=this.getDuration();t.getEndTime()<0&&t.setEndTime(r<=0?-1:t.getStartTime()+r)}var a=this._weight;a=a*(0==this._fadeInSeconds?1:n.CubismMath.getEasingSine((i-t.getFadeInStartTime())/this._fadeInSeconds))*(0==this._fadeOutSeconds||t.getEndTime()<0?1:n.CubismMath.getEasingSine((t.getEndTime()-i)/this._fadeOutSeconds)),t.setState(i,a),(0,u.CSM_ASSERT)(0<=a&&a<=1),this.doUpdateParameters(e,i,a,t),t.getEndTime()>0&&t.getEndTime()<i&&t.setIsFinished(!0)}},e.prototype.setFadeInTime=function(e){this._fadeInSeconds=e},e.prototype.setFadeOutTime=function(e){this._fadeOutSeconds=e},e.prototype.getFadeOutTime=function(){return this._fadeOutSeconds},e.prototype.getFadeInTime=function(){return this._fadeInSeconds},e.prototype.setWeight=function(e){this._weight=e},e.prototype.getWeight=function(){return this._weight},e.prototype.getDuration=function(){return-1},e.prototype.getLoopDuration=function(){return-1},e.prototype.setOffsetTime=function(e){this._offsetSeconds=e},e.prototype.getFiredEvent=function(e,t){return this._firedEventValues},e}();t.ACubismMotion=l;var c=o(i(8855));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).ACubismMotion=c.ACubismMotion},6437:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.ExpressionParameter=t.ExpressionBlendType=t.CubismExpressionMotion=void 0;var u,l=i(1671),c=i(5760),h=i(3706),p=i(8855),d="Parameters",g="Blend",m=function(e){function t(){var t=e.call(this)||this;return t._parameters=new c.csmVector,t}return a(t,e),t.create=function(e,i){var r=new t,a=h.CubismJson.create(e,i),o=a.getRoot();r.setFadeInTime(o.getValueByString("FadeInTime").toFloat(1)),r.setFadeOutTime(o.getValueByString("FadeOutTime").toFloat(1));var n=o.getValueByString(d).getSize();r._parameters.prepareCapacity(n);for(var s=0;s<n;++s){var c,p=o.getValueByString(d).getValueByIndex(s),m=l.CubismFramework.getIdManager().getId(p.getValueByString("Id").getRawString()),f=p.getValueByString("Value").toFloat();c=p.getValueByString(g).isNull()||"Add"==p.getValueByString(g).getString()?u.ExpressionBlendType_Add:"Multiply"==p.getValueByString(g).getString()?u.ExpressionBlendType_Multiply:"Overwrite"==p.getValueByString(g).getString()?u.ExpressionBlendType_Overwrite:u.ExpressionBlendType_Add;var y=new _;y.parameterId=m,y.blendType=c,y.value=f,r._parameters.pushBack(y)}return h.CubismJson.delete(a),r},t.prototype.doUpdateParameters=function(e,t,i,r){for(var a=0;a<this._parameters.getSize();++a){var o=this._parameters.at(a);switch(o.blendType){case u.ExpressionBlendType_Add:e.addParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Multiply:e.multiplyParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Overwrite:e.setParameterValueById(o.parameterId,o.value,i)}}},t}(p.ACubismMotion);t.CubismExpressionMotion=m,function(e){e[e.ExpressionBlendType_Add=0]="ExpressionBlendType_Add",e[e.ExpressionBlendType_Multiply=1]="ExpressionBlendType_Multiply",e[e.ExpressionBlendType_Overwrite=2]="ExpressionBlendType_Overwrite"}(u=t.ExpressionBlendType||(t.ExpressionBlendType={}));var _=function(){};t.ExpressionParameter=_;var f,y=s(i(6437));(f=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismExpressionMotion=y.CubismExpressionMotion,f.ExpressionBlendType=y.ExpressionBlendType,f.ExpressionParameter=y.ExpressionParameter},2916:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMotion=void 0;var u=i(1671),l=i(6370),c=i(1695),h=i(1073),p=i(8855),d=i(924),g=i(6571);function m(e,t,i){var r=new d.CubismMotionPoint;return r.time=e.time+(t.time-e.time)*i,r.value=e.value+(t.value-e.value)*i,r}function _(e,t){var i=(t-e[0].time)/(e[1].time-e[0].time);return i<0&&(i=0),e[0].value+(e[1].value-e[0].value)*i}function f(e,t){var i=(t-e[0].time)/(e[3].time-e[0].time);i<0&&(i=0);var r=m(e[0],e[1],i),a=m(e[1],e[2],i),o=m(e[2],e[3],i),n=m(r,a,i),s=m(a,o,i);return m(n,s,i).value}function y(e,t){var i=t,r=e[0].time,a=e[3].time,o=e[1].time,n=e[2].time,s=a-3*n+3*o-r,u=3*n-6*o+3*r,c=3*o-3*r,h=r-i,p=l.CubismMath.cardanoAlgorithmForBezier(s,u,c,h),d=m(e[0],e[1],p),g=m(e[1],e[2],p),_=m(e[2],e[3],p),f=m(d,g,p),y=m(g,_,p);return m(f,y,p).value}function v(e,t){return e[0].value}function b(e,t){return e[1].value}function M(e,t,i){for(var r=e.curves.at(t),a=-1,o=r.baseSegmentIndex+r.segmentCount,n=0,s=r.baseSegmentIndex;s<o;++s)if(n=e.segments.at(s).basePointIndex+(e.segments.at(s).segmentType==d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier?3:1),e.points.at(n).time>i){a=s;break}if(-1==a)return e.points.at(n).value;var u=e.segments.at(a);return u.evaluate(e.points.get(u.basePointIndex),i)}var C=function(e){function t(){var t=e.call(this)||this;return t._sourceFrameRate=30,t._loopDurationSeconds=-1,t._isLoop=!1,t._isLoopFadeIn=!0,t._lastWeight=0,t._motionData=null,t._modelCurveIdEyeBlink=null,t._modelCurveIdLipSync=null,t._eyeBlinkParameterIds=null,t._lipSyncParameterIds=null,t}return a(t,e),t.create=function(e,i,r){var a=new t;return a.parse(e,i),a._sourceFrameRate=a._motionData.fps,a._loopDurationSeconds=a._motionData.duration,a._onFinishedMotion=r,a},t.prototype.doUpdateParameters=function(e,t,i,r){null==this._modelCurveIdEyeBlink&&(this._modelCurveIdEyeBlink=u.CubismFramework.getIdManager().getId("EyeBlink")),null==this._modelCurveIdLipSync&&(this._modelCurveIdLipSync=u.CubismFramework.getIdManager().getId("LipSync"));var a=t-r.getStartTime();a<0&&(a=0);var o=Number.MAX_VALUE,n=Number.MAX_VALUE,s=64,c=0,p=0;this._eyeBlinkParameterIds.getSize()>s&&(0,h.CubismLogDebug)("too many eye blink targets : {0}",this._eyeBlinkParameterIds.getSize()),this._lipSyncParameterIds.getSize()>s&&(0,h.CubismLogDebug)("too many lip sync targets : {0}",this._lipSyncParameterIds.getSize());var g,m,_,f=this._fadeInSeconds<=0?1:l.CubismMath.getEasingSine((t-r.getFadeInStartTime())/this._fadeInSeconds),y=this._fadeOutSeconds<=0||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-t)/this._fadeOutSeconds),v=a;if(this._isLoop)for(;v>this._motionData.duration;)v-=this._motionData.duration;var b=this._motionData.curves;for(m=0;m<this._motionData.curveCount&&b.at(m).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;++m)g=M(this._motionData,m,v),b.at(m).id==this._modelCurveIdEyeBlink?n=g:b.at(m).id==this._modelCurveIdLipSync&&(o=g);for(;m<this._motionData.curveCount&&b.at(m).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;++m)if(-1!=(_=e.getParameterIndex(b.at(m).id))){var C=e.getParameterValueByIndex(_);if(g=M(this._motionData,m,v),n!=Number.MAX_VALUE)for(var S=0;S<this._eyeBlinkParameterIds.getSize()&&S<s;++S)if(this._eyeBlinkParameterIds.at(S)==b.at(m).id){g*=n,p|=1<<S;break}if(o!=Number.MAX_VALUE)for(S=0;S<this._lipSyncParameterIds.getSize()&&S<s;++S)if(this._lipSyncParameterIds.at(S)==b.at(m).id){g+=o,c|=1<<S;break}var P=void 0;if(b.at(m).fadeInTime<0&&b.at(m).fadeOutTime<0)P=C+(g-C)*i;else{var I,x;I=b.at(m).fadeInTime<0?f:0==b.at(m).fadeInTime?1:l.CubismMath.getEasingSine((t-r.getFadeInStartTime())/b.at(m).fadeInTime),x=b.at(m).fadeOutTime<0?y:0==b.at(m).fadeOutTime||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-t)/b.at(m).fadeOutTime),P=C+(g-C)*(this._weight*I*x)}e.setParameterValueByIndex(_,P,1)}if(n!=Number.MAX_VALUE)for(S=0;S<this._eyeBlinkParameterIds.getSize()&&S<s;++S)C=e.getParameterValueById(this._eyeBlinkParameterIds.at(S)),p>>S&1||(P=C+(n-C)*i,e.setParameterValueById(this._eyeBlinkParameterIds.at(S),P));if(o!=Number.MAX_VALUE)for(S=0;S<this._lipSyncParameterIds.getSize()&&S<s;++S)C=e.getParameterValueById(this._lipSyncParameterIds.at(S)),c>>S&1||(P=C+(o-C)*i,e.setParameterValueById(this._lipSyncParameterIds.at(S),P));for(;m<this._motionData.curveCount&&b.at(m).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;++m)-1!=(_=e.getParameterIndex(b.at(m).id))&&(g=M(this._motionData,m,v),e.setParameterValueByIndex(_,g));a>=this._motionData.duration&&(this._isLoop?(r.setStartTime(t),this._isLoopFadeIn&&r.setFadeInStartTime(t)):(this._onFinishedMotion&&this._onFinishedMotion(this),r.setIsFinished(!0))),this._lastWeight=i},t.prototype.setIsLoop=function(e){this._isLoop=e},t.prototype.isLoop=function(){return this._isLoop},t.prototype.setIsLoopFadeIn=function(e){this._isLoopFadeIn=e},t.prototype.isLoopFadeIn=function(){return this._isLoopFadeIn},t.prototype.getDuration=function(){return this._isLoop?-1:this._loopDurationSeconds},t.prototype.getLoopDuration=function(){return this._loopDurationSeconds},t.prototype.setParameterFadeInTime=function(e,t){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(e==i.at(r).id)return void(i.at(r).fadeInTime=t)},t.prototype.setParameterFadeOutTime=function(e,t){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(e==i.at(r).id)return void(i.at(r).fadeOutTime=t)},t.prototype.getParameterFadeInTime=function(e){for(var t=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(e==t.at(i).id)return t.at(i).fadeInTime;return-1},t.prototype.getParameterFadeOutTime=function(e){for(var t=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(e==t.at(i).id)return t.at(i).fadeOutTime;return-1},t.prototype.setEffectIds=function(e,t){this._eyeBlinkParameterIds=e,this._lipSyncParameterIds=t},t.prototype.release=function(){this._motionData=void 0,this._motionData=null},t.prototype.parse=function(e,t){this._motionData=new d.CubismMotionData;var i=new g.CubismMotionJson(e,t);this._motionData.duration=i.getMotionDuration(),this._motionData.loop=i.isMotionLoop(),this._motionData.curveCount=i.getMotionCurveCount(),this._motionData.fps=i.getMotionFps(),this._motionData.eventCount=i.getEventCount();var r=i.getEvaluationOptionFlag(g.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);i.isExistMotionFadeInTime()?this._fadeInSeconds=i.getMotionFadeInTime()<0?1:i.getMotionFadeInTime():this._fadeInSeconds=1,i.isExistMotionFadeOutTime()?this._fadeOutSeconds=i.getMotionFadeOutTime()<0?1:i.getMotionFadeOutTime():this._fadeOutSeconds=1,this._motionData.curves.updateSize(this._motionData.curveCount,d.CubismMotionCurve,!0),this._motionData.segments.updateSize(i.getMotionTotalSegmentCount(),d.CubismMotionSegment,!0),this._motionData.points.updateSize(i.getMotionTotalPointCount(),d.CubismMotionPoint,!0),this._motionData.events.updateSize(this._motionData.eventCount,d.CubismMotionEvent,!0);for(var a=0,o=0,n=0;n<this._motionData.curveCount;++n){"Model"==i.getMotionCurveTarget(n)?this._motionData.curves.at(n).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model:"Parameter"==i.getMotionCurveTarget(n)?this._motionData.curves.at(n).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter:"PartOpacity"==i.getMotionCurveTarget(n)?this._motionData.curves.at(n).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity:(0,h.CubismLogWarning)('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!'),this._motionData.curves.at(n).id=i.getMotionCurveId(n),this._motionData.curves.at(n).baseSegmentIndex=o,this._motionData.curves.at(n).fadeInTime=i.isExistMotionCurveFadeInTime(n)?i.getMotionCurveFadeInTime(n):-1,this._motionData.curves.at(n).fadeOutTime=i.isExistMotionCurveFadeOutTime(n)?i.getMotionCurveFadeOutTime(n):-1;for(var s=0;s<i.getMotionCurveSegmentCount(n);){switch(0==s?(this._motionData.segments.at(o).basePointIndex=a,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+1),a+=1,s+=2):this._motionData.segments.at(o).basePointIndex=a-1,i.getMotionCurveSegment(n,s)){case d.CubismMotionSegmentType.CubismMotionSegmentType_Linear:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Linear,this._motionData.segments.at(o).evaluate=_,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+2),a+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier,this._motionData.segments.at(o).evaluate=r?f:y,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+2),this._motionData.points.at(a+1).time=i.getMotionCurveSegment(n,s+3),this._motionData.points.at(a+1).value=i.getMotionCurveSegment(n,s+4),this._motionData.points.at(a+2).time=i.getMotionCurveSegment(n,s+5),this._motionData.points.at(a+2).value=i.getMotionCurveSegment(n,s+6),a+=3,s+=7;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped,this._motionData.segments.at(o).evaluate=v,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+2),a+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped,this._motionData.segments.at(o).evaluate=b,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+2),a+=1,s+=3;break;default:(0,h.CSM_ASSERT)(0)}++this._motionData.curves.at(n).segmentCount,++o}}for(var u=0;u<i.getEventCount();++u)this._motionData.events.at(u).fireTime=i.getEventTime(u),this._motionData.events.at(u).value=i.getEventValue(u);i.release(),i=void 0,i=null},t.prototype.getFiredEvent=function(e,t){this._firedEventValues.updateSize(0);for(var i=0;i<this._motionData.eventCount;++i)this._motionData.events.at(i).fireTime>e&&this._motionData.events.at(i).fireTime<=t&&this._firedEventValues.pushBack(new c.csmString(this._motionData.events.at(i).value.s));return this._firedEventValues},t}(p.ACubismMotion);t.CubismMotion=C;var S=s(i(2916));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotion=S.CubismMotion},924:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMotionData=t.CubismMotionEvent=t.CubismMotionCurve=t.CubismMotionSegment=t.CubismMotionPoint=t.CubismMotionSegmentType=t.CubismMotionCurveTarget=void 0;var n,s,u=i(5760);!function(e){e[e.CubismMotionCurveTarget_Model=0]="CubismMotionCurveTarget_Model",e[e.CubismMotionCurveTarget_Parameter=1]="CubismMotionCurveTarget_Parameter",e[e.CubismMotionCurveTarget_PartOpacity=2]="CubismMotionCurveTarget_PartOpacity"}(n=t.CubismMotionCurveTarget||(t.CubismMotionCurveTarget={})),(s=t.CubismMotionSegmentType||(t.CubismMotionSegmentType={}))[s.CubismMotionSegmentType_Linear=0]="CubismMotionSegmentType_Linear",s[s.CubismMotionSegmentType_Bezier=1]="CubismMotionSegmentType_Bezier",s[s.CubismMotionSegmentType_Stepped=2]="CubismMotionSegmentType_Stepped",s[s.CubismMotionSegmentType_InverseStepped=3]="CubismMotionSegmentType_InverseStepped";t.CubismMotionPoint=function(){this.time=0,this.value=0};t.CubismMotionSegment=function(){this.evaluate=null,this.basePointIndex=0,this.segmentType=0};t.CubismMotionCurve=function(){this.type=n.CubismMotionCurveTarget_Model,this.segmentCount=0,this.baseSegmentIndex=0,this.fadeInTime=0,this.fadeOutTime=0};t.CubismMotionEvent=function(){this.fireTime=0};t.CubismMotionData=function(){this.duration=0,this.loop=!1,this.curveCount=0,this.eventCount=0,this.fps=0,this.curves=new u.csmVector,this.segments=new u.csmVector,this.points=new u.csmVector,this.events=new u.csmVector};var l,c=o(i(924));(l=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionCurve=c.CubismMotionCurve,l.CubismMotionCurveTarget=c.CubismMotionCurveTarget,l.CubismMotionData=c.CubismMotionData,l.CubismMotionEvent=c.CubismMotionEvent,l.CubismMotionPoint=c.CubismMotionPoint,l.CubismMotionSegment=c.CubismMotionSegment,l.CubismMotionSegmentType=c.CubismMotionSegmentType},6571:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.EvaluationOptionFlag=t.CubismMotionJson=void 0;var n,s=i(1671),u=i(1695),l=i(3706),c="Meta",h="Curves",p="FadeInTime",d="FadeOutTime",g="Segments",m="UserData",_=function(){function e(e,t){this._json=l.CubismJson.create(e,t)}return e.prototype.release=function(){l.CubismJson.delete(this._json)},e.prototype.getMotionDuration=function(){return this._json.getRoot().getValueByString(c).getValueByString("Duration").toFloat()},e.prototype.isMotionLoop=function(){return this._json.getRoot().getValueByString(c).getValueByString("Loop").toBoolean()},e.prototype.getEvaluationOptionFlag=function(e){return n.EvaluationOptionFlag_AreBeziersRistricted==e&&this._json.getRoot().getValueByString(c).getValueByString("AreBeziersRestricted").toBoolean()},e.prototype.getMotionCurveCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("CurveCount").toInt()},e.prototype.getMotionFps=function(){return this._json.getRoot().getValueByString(c).getValueByString("Fps").toFloat()},e.prototype.getMotionTotalSegmentCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalSegmentCount").toInt()},e.prototype.getMotionTotalPointCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalPointCount").toInt()},e.prototype.isExistMotionFadeInTime=function(){return!this._json.getRoot().getValueByString(c).getValueByString(p).isNull()},e.prototype.isExistMotionFadeOutTime=function(){return!this._json.getRoot().getValueByString(c).getValueByString(d).isNull()},e.prototype.getMotionFadeInTime=function(){return this._json.getRoot().getValueByString(c).getValueByString(p).toFloat()},e.prototype.getMotionFadeOutTime=function(){return this._json.getRoot().getValueByString(c).getValueByString(d).toFloat()},e.prototype.getMotionCurveTarget=function(e){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString("Target").getRawString()},e.prototype.getMotionCurveId=function(e){return s.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString("Id").getRawString())},e.prototype.isExistMotionCurveFadeInTime=function(e){return!this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(p).isNull()},e.prototype.isExistMotionCurveFadeOutTime=function(e){return!this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(d).isNull()},e.prototype.getMotionCurveFadeInTime=function(e){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(p).toFloat()},e.prototype.getMotionCurveFadeOutTime=function(e){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(d).toFloat()},e.prototype.getMotionCurveSegmentCount=function(e){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(g).getVector().getSize()},e.prototype.getMotionCurveSegment=function(e,t){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(g).getValueByIndex(t).toFloat()},e.prototype.getEventCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("UserDataCount").toInt()},e.prototype.getTotalEventValueSize=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalUserDataSize").toInt()},e.prototype.getEventTime=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString("Time").toFloat()},e.prototype.getEventValue=function(e){return new u.csmString(this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString("Value").getRawString())},e}();t.CubismMotionJson=_,function(e){e[e.EvaluationOptionFlag_AreBeziersRistricted=0]="EvaluationOptionFlag_AreBeziersRistricted"}(n=t.EvaluationOptionFlag||(t.EvaluationOptionFlag={}));var f=o(i(6571));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionJson=f.CubismMotionJson},9296:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMotionManager=void 0;var u=function(e){function t(){var t=e.call(this)||this;return t._currentPriority=0,t._reservePriority=0,t}return a(t,e),t.prototype.getCurrentPriority=function(){return this._currentPriority},t.prototype.getReservePriority=function(){return this._reservePriority},t.prototype.setReservePriority=function(e){this._reservePriority=e},t.prototype.startMotionPriority=function(t,i,r){return r==this._reservePriority&&(this._reservePriority=0),this._currentPriority=r,e.prototype.startMotion.call(this,t,i,this._userTimeSeconds)},t.prototype.updateMotion=function(t,i){this._userTimeSeconds+=i;var r=e.prototype.doUpdateMotion.call(this,t,this._userTimeSeconds);return this.isFinished()&&(this._currentPriority=0),r},t.prototype.reserveMotion=function(e){return!(e<=this._reservePriority||e<=this._currentPriority||(this._reservePriority=e,0))},t}(i(2928).CubismMotionQueueManager);t.CubismMotionManager=u;var l=s(i(9296));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionManager=l.CubismMotionManager},7219:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMotionQueueEntry=void 0;var n=i(8855),s=function(){function e(){this._autoDelete=!1,this._motion=null,this._available=!0,this._finished=!1,this._started=!1,this._startTimeSeconds=-1,this._fadeInStartTimeSeconds=0,this._endTimeSeconds=-1,this._stateTimeSeconds=0,this._stateWeight=0,this._lastEventCheckSeconds=0,this._motionQueueEntryHandle=this,this._fadeOutSeconds=0,this._isTriggeredFadeOut=!1}return e.prototype.release=function(){this._autoDelete&&this._motion&&n.ACubismMotion.delete(this._motion)},e.prototype.setFadeOut=function(e){this._fadeOutSeconds=e,this._isTriggeredFadeOut=!0},e.prototype.startFadeOut=function(e,t){var i=t+e;this._isTriggeredFadeOut=!0,(this._endTimeSeconds<0||i<this._endTimeSeconds)&&(this._endTimeSeconds=i)},e.prototype.isFinished=function(){return this._finished},e.prototype.isStarted=function(){return this._started},e.prototype.getStartTime=function(){return this._startTimeSeconds},e.prototype.getFadeInStartTime=function(){return this._fadeInStartTimeSeconds},e.prototype.getEndTime=function(){return this._endTimeSeconds},e.prototype.setStartTime=function(e){this._startTimeSeconds=e},e.prototype.setFadeInStartTime=function(e){this._fadeInStartTimeSeconds=e},e.prototype.setEndTime=function(e){this._endTimeSeconds=e},e.prototype.setIsFinished=function(e){this._finished=e},e.prototype.setIsStarted=function(e){this._started=e},e.prototype.isAvailable=function(){return this._available},e.prototype.setIsAvailable=function(e){this._available=e},e.prototype.setState=function(e,t){this._stateTimeSeconds=e,this._stateWeight=t},e.prototype.getStateTime=function(){return this._stateTimeSeconds},e.prototype.getStateWeight=function(){return this._stateWeight},e.prototype.getLastCheckEventSeconds=function(){return this._lastEventCheckSeconds},e.prototype.setLastCheckEventSeconds=function(e){this._lastEventCheckSeconds=e},e.prototype.isTriggeredFadeOut=function(){return this._isTriggeredFadeOut},e.prototype.getFadeOutSeconds=function(){return this._fadeOutSeconds},e}();t.CubismMotionQueueEntry=s;var u=o(i(7219));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionQueueEntry=u.CubismMotionQueueEntry},2928:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.InvalidMotionQueueEntryHandleValue=t.CubismMotionQueueManager=void 0;var n=i(7219),s=i(5760),u=function(){function e(){this._userTimeSeconds=0,this._eventCallBack=null,this._eventCustomData=null,this._motions=new s.csmVector}return e.prototype.release=function(){for(var e=0;e<this._motions.getSize();++e)this._motions.at(e)&&(this._motions.at(e).release(),this._motions.set(e,null));this._motions=null},e.prototype.startMotion=function(e,i,r){if(null==e)return t.InvalidMotionQueueEntryHandleValue;for(var a=null,o=0;o<this._motions.getSize();++o)null!=(a=this._motions.at(o))&&a.setFadeOut(a._motion.getFadeOutTime());return(a=new n.CubismMotionQueueEntry)._autoDelete=i,a._motion=e,this._motions.pushBack(a),a._motionQueueEntryHandle},e.prototype.isFinished=function(){for(var e=this._motions.begin();e.notEqual(this._motions.end());){var t=e.ptr();if(null!=t)if(null!=t._motion){if(!t.isFinished())return!1;e.preIncrement()}else t.release(),t=null,e=this._motions.erase(e);else e=this._motions.erase(e)}return!0},e.prototype.isFinishedByHandle=function(e){for(var t=this._motions.begin();t.notEqual(this._motions.end());t.increment()){var i=t.ptr();if(null!=i&&i._motionQueueEntryHandle==e&&!i.isFinished())return!1}return!0},e.prototype.stopAllMotions=function(){for(var e=this._motions.begin();e.notEqual(this._motions.end());){var t=e.ptr();null!=t?(t.release(),t=null,e=this._motions.erase(e)):e=this._motions.erase(e)}},e.prototype.getCubismMotionQueueEntry=function(e){for(var t=this._motions.begin();t.notEqual(this._motions.end());t.preIncrement()){var i=t.ptr();if(null!=i&&i._motionQueueEntryHandle==e)return i}return null},e.prototype.setEventCallback=function(e,t){void 0===t&&(t=null),this._eventCallBack=e,this._eventCustomData=t},e.prototype.doUpdateMotion=function(e,t){for(var i=!1,r=this._motions.begin();r.notEqual(this._motions.end());){var a=r.ptr();if(null!=a){var o=a._motion;if(null!=o){o.updateParameters(e,a,t),i=!0;for(var n=o.getFiredEvent(a.getLastCheckEventSeconds()-a.getStartTime(),t-a.getStartTime()),s=0;s<n.getSize();++s)this._eventCallBack(this,n.at(s),this._eventCustomData);a.setLastCheckEventSeconds(t),a.isFinished()?(a.release(),a=null,r=this._motions.erase(r)):(a.isTriggeredFadeOut()&&a.startFadeOut(a.getFadeOutSeconds(),t),r.preIncrement())}else a.release(),a=null,r=this._motions.erase(r)}else r=this._motions.erase(r)}return i},e}();t.CubismMotionQueueManager=u,t.InvalidMotionQueueEntryHandleValue=-1;var l,c=o(i(2928));(l=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionQueueManager=c.CubismMotionQueueManager,l.InvalidMotionQueueEntryHandleValue=c.InvalidMotionQueueEntryHandleValue},3039:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.PhysicsOutput=t.Options=t.CubismPhysics=void 0;var n=i(6370),s=i(2376),u=i(5760),l=i(6658),c=i(6286),h="Angle",p=function(){function e(){this._physicsRig=null,this._options=new d,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0,this._currentRigOutputs=new u.csmVector,this._previousRigOutputs=new u.csmVector,this._currentRemainTime=0,this._parameterCaches=null,this._parameterInputCaches=null}return e.create=function(t,i){var r=new e;return r.parse(t,i),r._physicsRig.gravity.y=0,r},e.delete=function(e){null!=e&&(e.release(),e=null)},e.prototype.parse=function(e,t){this._physicsRig=new l.CubismPhysicsRig;var i=new c.CubismPhysicsJson(e,t);this._physicsRig.gravity=i.getGravity(),this._physicsRig.wind=i.getWind(),this._physicsRig.subRigCount=i.getSubRigCount(),this._physicsRig.fps=i.getFps(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,l.CubismPhysicsSubRig,!0),this._physicsRig.inputs.updateSize(i.getTotalInputCount(),l.CubismPhysicsInput,!0),this._physicsRig.outputs.updateSize(i.getTotalOutputCount(),l.CubismPhysicsOutput,!0),this._physicsRig.particles.updateSize(i.getVertexCount(),l.CubismPhysicsParticle,!0),this._currentRigOutputs.clear(),this._previousRigOutputs.clear();for(var r=0,a=0,o=0,n=0;n<this._physicsRig.settings.getSize();++n){this._physicsRig.settings.at(n).normalizationPosition.minimum=i.getNormalizationPositionMinimumValue(n),this._physicsRig.settings.at(n).normalizationPosition.maximum=i.getNormalizationPositionMaximumValue(n),this._physicsRig.settings.at(n).normalizationPosition.defalut=i.getNormalizationPositionDefaultValue(n),this._physicsRig.settings.at(n).normalizationAngle.minimum=i.getNormalizationAngleMinimumValue(n),this._physicsRig.settings.at(n).normalizationAngle.maximum=i.getNormalizationAngleMaximumValue(n),this._physicsRig.settings.at(n).normalizationAngle.defalut=i.getNormalizationAngleDefaultValue(n),this._physicsRig.settings.at(n).inputCount=i.getInputCount(n),this._physicsRig.settings.at(n).baseInputIndex=r;for(var s=0;s<this._physicsRig.settings.at(n).inputCount;++s)this._physicsRig.inputs.at(r+s).sourceParameterIndex=-1,this._physicsRig.inputs.at(r+s).weight=i.getInputWeight(n,s),this._physicsRig.inputs.at(r+s).reflect=i.getInputReflect(n,s),"X"==i.getInputType(n,s)?(this._physicsRig.inputs.at(r+s).type=l.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=m):"Y"==i.getInputType(n,s)?(this._physicsRig.inputs.at(r+s).type=l.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=_):i.getInputType(n,s)==h&&(this._physicsRig.inputs.at(r+s).type=l.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=f),this._physicsRig.inputs.at(r+s).source.targetType=l.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(r+s).source.id=i.getInputSourceId(n,s);r+=this._physicsRig.settings.at(n).inputCount,this._physicsRig.settings.at(n).outputCount=i.getOutputCount(n),this._physicsRig.settings.at(n).baseOutputIndex=a;var u=new g;u.outputs.resize(this._physicsRig.settings.at(n).outputCount);var p=new g;for(p.outputs.resize(this._physicsRig.settings.at(n).outputCount),s=0;s<this._physicsRig.settings.at(n).outputCount;++s)u.outputs[s]=0,p.outputs[s]=0,this._physicsRig.outputs.at(a+s).destinationParameterIndex=-1,this._physicsRig.outputs.at(a+s).vertexIndex=i.getOutputVertexIndex(n,s),this._physicsRig.outputs.at(a+s).angleScale=i.getOutputAngleScale(n,s),this._physicsRig.outputs.at(a+s).weight=i.getOutputWeight(n,s),this._physicsRig.outputs.at(a+s).destination.targetType=l.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(a+s).destination.id=i.getOutputDestinationId(n,s),"X"==i.getOutputType(n,s)?(this._physicsRig.outputs.at(a+s).type=l.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.outputs.at(a+s).getValue=y,this._physicsRig.outputs.at(a+s).getScale=M):"Y"==i.getOutputType(n,s)?(this._physicsRig.outputs.at(a+s).type=l.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.outputs.at(a+s).getValue=v,this._physicsRig.outputs.at(a+s).getScale=C):i.getOutputType(n,s)==h&&(this._physicsRig.outputs.at(a+s).type=l.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(a+s).getValue=b,this._physicsRig.outputs.at(a+s).getScale=S),this._physicsRig.outputs.at(a+s).reflect=i.getOutputReflect(n,s);for(this._currentRigOutputs.pushBack(u),this._previousRigOutputs.pushBack(p),a+=this._physicsRig.settings.at(n).outputCount,this._physicsRig.settings.at(n).particleCount=i.getParticleCount(n),this._physicsRig.settings.at(n).baseParticleIndex=o,s=0;s<this._physicsRig.settings.at(n).particleCount;++s)this._physicsRig.particles.at(o+s).mobility=i.getParticleMobility(n,s),this._physicsRig.particles.at(o+s).delay=i.getParticleDelay(n,s),this._physicsRig.particles.at(o+s).acceleration=i.getParticleAcceleration(n,s),this._physicsRig.particles.at(o+s).radius=i.getParticleRadius(n,s),this._physicsRig.particles.at(o+s).position=i.getParticlePosition(n,s);o+=this._physicsRig.settings.at(n).particleCount}this.initialize(),i.release(),i=void 0,i=null},e.prototype.stabilization=function(e){var t,i,r,a,o,u,l,c,h,p,d,g,m,_,f,y,v=new s.CubismVector2;m=e.getModel().parameters.values,_=e.getModel().parameters.maximumValues,f=e.getModel().parameters.minimumValues,y=e.getModel().parameters.defaultValues,(null!==(i=null===(t=this._parameterCaches)||void 0===t?void 0:t.length)&&void 0!==i?i:0)<e.getParameterCount()&&(this._parameterCaches=new Float32Array(e.getParameterCount())),(null!==(a=null===(r=this._parameterInputCaches)||void 0===r?void 0:r.length)&&void 0!==a?a:0)<e.getParameterCount()&&(this._parameterInputCaches=new Float32Array(e.getParameterCount()));for(var b=0;b<e.getParameterCount();++b)this._parameterCaches[b]=m[b],this._parameterInputCaches[b]=m[b];for(var M=0;M<this._physicsRig.subRigCount;++M){o={angle:0},v.x=0,v.y=0,h=this._physicsRig.settings.at(M),p=this._physicsRig.inputs.get(h.baseInputIndex),d=this._physicsRig.outputs.get(h.baseOutputIndex),g=this._physicsRig.particles.get(h.baseParticleIndex);for(var C=0;C<h.inputCount;++C)u=p[C].weight/100,-1==p[C].sourceParameterIndex&&(p[C].sourceParameterIndex=e.getParameterIndex(p[C].source.id)),p[C].getNormalizedParameterValue(v,o,m[p[C].sourceParameterIndex],f[p[C].sourceParameterIndex],_[p[C].sourceParameterIndex],y[p[C].sourceParameterIndex],h.normalizationPosition,h.normalizationAngle,p[C].reflect,u),this._parameterCaches[p[C].sourceParameterIndex]=m[p[C].sourceParameterIndex];for(l=n.CubismMath.degreesToRadian(-o.angle),v.x=v.x*n.CubismMath.cos(l)-v.y*n.CubismMath.sin(l),v.y=v.x*n.CubismMath.sin(l)+v.y*n.CubismMath.cos(l),I(g,h.particleCount,v,o.angle,this._options.wind,.001*h.normalizationPosition.maximum),C=0;C<h.outputCount;++C){var S=d[C].vertexIndex;if(-1==d[C].destinationParameterIndex&&(d[C].destinationParameterIndex=e.getParameterIndex(d[C].destination.id)),!(S<1||S>=h.particleCount)){var P=new s.CubismVector2;P=g[S].position.substract(g[S-1].position),c=d[C].getValue(P,g,S,d[C].reflect,this._options.gravity),this._currentRigOutputs.at(M).outputs[C]=c,this._previousRigOutputs.at(M).outputs[C]=c;var w=d[C].destinationParameterIndex,B=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(m.subarray(w))):m.slice(w);x(B,f[w],_[w],c,d[C]);for(var L=w,N=0;L<this._parameterCaches.length;L++,N++)m[L]=this._parameterCaches[L]=B[N]}}}},e.prototype.evaluate=function(e,t){var i,r,a,o,u,l,c,h,p,d,g,m,_=new s.CubismVector2;if(!(0>=t)){var f,y,v,b,M;if(this._currentRemainTime+=t,this._currentRemainTime>5&&(this._currentRemainTime=0),f=e.getModel().parameters.values,y=e.getModel().parameters.maximumValues,v=e.getModel().parameters.minimumValues,b=e.getModel().parameters.defaultValues,(null!==(r=null===(i=this._parameterCaches)||void 0===i?void 0:i.length)&&void 0!==r?r:0)<e.getParameterCount()&&(this._parameterCaches=new Float32Array(e.getParameterCount())),(null!==(o=null===(a=this._parameterInputCaches)||void 0===a?void 0:a.length)&&void 0!==o?o:0)<e.getParameterCount()){this._parameterInputCaches=new Float32Array(e.getParameterCount());for(var C=0;C<e.getParameterCount();++C)this._parameterInputCaches[C]=f[C]}for(M=this._physicsRig.fps>0?1/this._physicsRig.fps:t;this._currentRemainTime>=M;){for(var S=0;S<this._physicsRig.subRigCount;++S){p=this._physicsRig.settings.at(S),g=this._physicsRig.outputs.get(p.baseOutputIndex);for(var I=0;I<p.outputCount;++I)this._previousRigOutputs.at(S).outputs[I]=this._currentRigOutputs.at(S).outputs[I]}var w=M/this._currentRemainTime;for(C=0;C<e.getParameterCount();++C)this._parameterCaches[C]=this._parameterInputCaches[C]*(1-w)+f[C]*w,this._parameterInputCaches[C]=this._parameterCaches[C];for(S=0;S<this._physicsRig.subRigCount;++S){for(u={angle:0},_.x=0,_.y=0,p=this._physicsRig.settings.at(S),d=this._physicsRig.inputs.get(p.baseInputIndex),g=this._physicsRig.outputs.get(p.baseOutputIndex),m=this._physicsRig.particles.get(p.baseParticleIndex),I=0;I<p.inputCount;++I)l=d[I].weight/100,-1==d[I].sourceParameterIndex&&(d[I].sourceParameterIndex=e.getParameterIndex(d[I].source.id)),d[I].getNormalizedParameterValue(_,u,this._parameterCaches[d[I].sourceParameterIndex],v[d[I].sourceParameterIndex],y[d[I].sourceParameterIndex],b[d[I].sourceParameterIndex],p.normalizationPosition,p.normalizationAngle,d[I].reflect,l);for(c=n.CubismMath.degreesToRadian(-u.angle),_.x=_.x*n.CubismMath.cos(c)-_.y*n.CubismMath.sin(c),_.y=_.x*n.CubismMath.sin(c)+_.y*n.CubismMath.cos(c),P(m,p.particleCount,_,u.angle,this._options.wind,.001*p.normalizationPosition.maximum,M,5),I=0;I<p.outputCount;++I){var B=g[I].vertexIndex;if(-1==g[I].destinationParameterIndex&&(g[I].destinationParameterIndex=e.getParameterIndex(g[I].destination.id)),!(B<1||B>=p.particleCount)){var L=new s.CubismVector2;L.x=m[B].position.x-m[B-1].position.x,L.y=m[B].position.y-m[B-1].position.y,h=g[I].getValue(L,m,B,g[I].reflect,this._options.gravity),this._currentRigOutputs.at(S).outputs[I]=h;var N=g[I].destinationParameterIndex,O=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(this._parameterCaches.subarray(N))):this._parameterCaches.slice(N);x(O,v[N],y[N],h,g[I]);for(var V=N,D=0;V<this._parameterCaches.length;V++,D++)this._parameterCaches[V]=O[D]}}}this._currentRemainTime-=M}var E=this._currentRemainTime/M;this.interpolate(e,E)}},e.prototype.interpolate=function(e,t){var i,r,a,o,n;a=e.getModel().parameters.values,o=e.getModel().parameters.maximumValues,n=e.getModel().parameters.minimumValues;for(var s=0;s<this._physicsRig.subRigCount;++s){r=this._physicsRig.settings.at(s),i=this._physicsRig.outputs.get(r.baseOutputIndex);for(var u=0;u<r.outputCount;++u)if(-1!=i[u].destinationParameterIndex){var l=i[u].destinationParameterIndex,c=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(a.subarray(l))):a.slice(l);x(c,n[l],o[l],this._previousRigOutputs.at(s).outputs[u]*(1-t)+this._currentRigOutputs.at(s).outputs[u]*t,i[u]);for(var h=l,p=0;h<a.length;h++,p++)a[h]=c[p]}}},e.prototype.setOptions=function(e){this._options=e},e.prototype.getOption=function(){return this._options},e.prototype.release=function(){this._physicsRig=void 0,this._physicsRig=null},e.prototype.initialize=function(){for(var e,t,i,r=0;r<this._physicsRig.subRigCount;++r){t=this._physicsRig.settings.at(r),(e=this._physicsRig.particles.get(t.baseParticleIndex))[0].initialPosition=new s.CubismVector2(0,0),e[0].lastPosition=new s.CubismVector2(e[0].initialPosition.x,e[0].initialPosition.y),e[0].lastGravity=new s.CubismVector2(0,-1),e[0].lastGravity.y*=-1,e[0].velocity=new s.CubismVector2(0,0),e[0].force=new s.CubismVector2(0,0);for(var a=1;a<t.particleCount;++a)(i=new s.CubismVector2(0,0)).y=e[a].radius,e[a].initialPosition=new s.CubismVector2(e[a-1].initialPosition.x+i.x,e[a-1].initialPosition.y+i.y),e[a].position=new s.CubismVector2(e[a].initialPosition.x,e[a].initialPosition.y),e[a].lastPosition=new s.CubismVector2(e[a].initialPosition.x,e[a].initialPosition.y),e[a].lastGravity=new s.CubismVector2(0,-1),e[a].lastGravity.y*=-1,e[a].velocity=new s.CubismVector2(0,0),e[a].force=new s.CubismVector2(0,0)}},e}();t.CubismPhysics=p;var d=function(){this.gravity=new s.CubismVector2(0,0),this.wind=new s.CubismVector2(0,0)};t.Options=d;var g=function(){this.outputs=new u.csmVector(0)};function m(e,t,i,r,a,o,n,s,u,l){e.x+=w(i,r,a,0,n.minimum,n.maximum,n.defalut,u)*l}function _(e,t,i,r,a,o,n,s,u,l){e.y+=w(i,r,a,0,n.minimum,n.maximum,n.defalut,u)*l}function f(e,t,i,r,a,o,n,s,u,l){t.angle+=w(i,r,a,0,s.minimum,s.maximum,s.defalut,u)*l}function y(e,t,i,r,a){var o=e.x;return r&&(o*=-1),o}function v(e,t,i,r,a){var o=e.y;return r&&(o*=-1),o}function b(e,t,i,r,a){var o;return a=i>=2?t[i-1].position.substract(t[i-2].position):a.multiplyByScaler(-1),o=n.CubismMath.directionToRadian(a,e),r&&(o*=-1),o}function M(e,t){return JSON.parse(JSON.stringify(e.x))}function C(e,t){return JSON.parse(JSON.stringify(e.y))}function S(e,t){return JSON.parse(JSON.stringify(t))}function P(e,t,i,r,a,o,u,l){var c,h,p,d,g=new s.CubismVector2(0,0),m=new s.CubismVector2(0,0),_=new s.CubismVector2(0,0),f=new s.CubismVector2(0,0);e[0].position=new s.CubismVector2(i.x,i.y),c=n.CubismMath.degreesToRadian(r),(d=n.CubismMath.radianToDirection(c)).normalize();for(var y=1;y<t;++y)e[y].force=d.multiplyByScaler(e[y].acceleration).add(a),e[y].lastPosition=new s.CubismVector2(e[y].position.x,e[y].position.y),h=e[y].delay*u*30,g=e[y].position.substract(e[y-1].position),p=n.CubismMath.directionToRadian(e[y].lastGravity,d)/l,g.x=n.CubismMath.cos(p)*g.x-g.y*n.CubismMath.sin(p),g.y=n.CubismMath.sin(p)*g.x+g.y*n.CubismMath.cos(p),e[y].position=e[y-1].position.add(g),m=e[y].velocity.multiplyByScaler(h),_=e[y].force.multiplyByScaler(h).multiplyByScaler(h),e[y].position=e[y].position.add(m).add(_),(f=e[y].position.substract(e[y-1].position)).normalize(),e[y].position=e[y-1].position.add(f.multiplyByScaler(e[y].radius)),n.CubismMath.abs(e[y].position.x)<o&&(e[y].position.x=0),0!=h&&(e[y].velocity=e[y].position.substract(e[y].lastPosition),e[y].velocity=e[y].velocity.divisionByScalar(h),e[y].velocity=e[y].velocity.multiplyByScaler(e[y].mobility)),e[y].force=new s.CubismVector2(0,0),e[y].lastGravity=new s.CubismVector2(d.x,d.y)}function I(e,t,i,r,a,o){var u,l,c=new s.CubismVector2(0,0);e[0].position=new s.CubismVector2(i.x,i.y),u=n.CubismMath.degreesToRadian(r),(l=n.CubismMath.radianToDirection(u)).normalize();for(var h=1;h<t;++h)e[h].force=l.multiplyByScaler(e[h].acceleration).add(a),e[h].lastPosition=new s.CubismVector2(e[h].position.x,e[h].position.y),e[h].velocity=new s.CubismVector2(0,0),(c=e[h].force).normalize(),c=c.multiplyByScaler(e[h].radius),e[h].position=e[h-1].position.add(c),n.CubismMath.abs(e[h].position.x)<o&&(e[h].position.x=0),e[h].force=new s.CubismVector2(0,0),e[h].lastGravity=new s.CubismVector2(l.x,l.y)}function x(e,t,i,r,a){var o,n;(o=r*a.getScale(a.translationScale,a.angleScale))<t?(o<a.valueBelowMinimum&&(a.valueBelowMinimum=o),o=t):o>i&&(o>a.valueExceededMaximum&&(a.valueExceededMaximum=o),o=i),(n=a.weight/100)>=1||(o=e[0]*(1-n)+o*n),e[0]=o}function w(e,t,i,r,a,o,s,u){var l=0,c=n.CubismMath.max(i,t);c<e&&(e=c);var h=n.CubismMath.min(i,t);h>e&&(e=h);var p,d,g=n.CubismMath.min(a,o),m=n.CubismMath.max(a,o),_=s,f=(p=h,d=c,n.CubismMath.min(p,d)+function(e,t){var i=n.CubismMath.max(e,t),r=n.CubismMath.min(e,t);return n.CubismMath.abs(i-r)}(p,d)/2),y=e-f;switch(function(e){var t=0;return e>0?t=1:e<0&&(t=-1),t}(y)){case 1:var v=m-_;0!=(b=c-f)&&(l=y*(v/b),l+=_);break;case-1:var b;v=g-_,0!=(b=h-f)&&(l=y*(v/b),l+=_);break;case 0:l=_}return u?l:-1*l}t.PhysicsOutput=g;var B,L=o(i(3039));(B=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismPhysics=L.CubismPhysics,B.Options=L.Options},6658:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismPhysicsRig=t.CubismPhysicsOutput=t.CubismPhysicsInput=t.CubismPhysicsSubRig=t.CubismPhysicsParticle=t.CubismPhysicsNormalization=t.CubismPhysicsParameter=t.PhysicsJsonEffectiveForces=t.CubismPhysicsSource=t.CubismPhysicsTargetType=void 0;var n,s,u=i(2376),l=i(5760);(s=t.CubismPhysicsTargetType||(t.CubismPhysicsTargetType={}))[s.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter",(n=t.CubismPhysicsSource||(t.CubismPhysicsSource={}))[n.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",n[n.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",n[n.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle";t.PhysicsJsonEffectiveForces=function(){this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0)};var c=function(){};t.CubismPhysicsParameter=c;var h=function(){};t.CubismPhysicsNormalization=h;t.CubismPhysicsParticle=function(){this.initialPosition=new u.CubismVector2(0,0),this.position=new u.CubismVector2(0,0),this.lastPosition=new u.CubismVector2(0,0),this.lastGravity=new u.CubismVector2(0,0),this.force=new u.CubismVector2(0,0),this.velocity=new u.CubismVector2(0,0)};t.CubismPhysicsSubRig=function(){this.normalizationPosition=new h,this.normalizationAngle=new h};t.CubismPhysicsInput=function(){this.source=new c};t.CubismPhysicsOutput=function(){this.destination=new c,this.translationScale=new u.CubismVector2(0,0)};t.CubismPhysicsRig=function(){this.settings=new l.csmVector,this.inputs=new l.csmVector,this.outputs=new l.csmVector,this.particles=new l.csmVector,this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0),this.fps=0};var p,d=o(i(6658));(p=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismPhysicsInput=d.CubismPhysicsInput,p.CubismPhysicsNormalization=d.CubismPhysicsNormalization,p.CubismPhysicsOutput=d.CubismPhysicsOutput,p.CubismPhysicsParameter=d.CubismPhysicsParameter,p.CubismPhysicsParticle=d.CubismPhysicsParticle,p.CubismPhysicsRig=d.CubismPhysicsRig,p.CubismPhysicsSource=d.CubismPhysicsSource,p.CubismPhysicsSubRig=d.CubismPhysicsSubRig,p.CubismPhysicsTargetType=d.CubismPhysicsTargetType,p.PhysicsJsonEffectiveForces=d.PhysicsJsonEffectiveForces},6286:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismPhysicsJson=void 0;var n=i(1671),s=i(2376),u=i(3706),l="Position",c="Angle",h="Type",p="Meta",d="EffectiveForces",g="Gravity",m="Wind",_="PhysicsSettings",f="Normalization",y="Minimum",v="Maximum",b="Default",M="Reflect",C="Weight",S="Input",P="Output",I="Vertices",x=function(){function e(e,t){this._json=u.CubismJson.create(e,t)}return e.prototype.release=function(){u.CubismJson.delete(this._json)},e.prototype.getGravity=function(){var e=new s.CubismVector2(0,0);return e.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("X").toFloat(),e.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("Y").toFloat(),e},e.prototype.getWind=function(){var e=new s.CubismVector2(0,0);return e.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(m).getValueByString("X").toFloat(),e.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(m).getValueByString("Y").toFloat(),e},e.prototype.getFps=function(){return this._json.getRoot().getValueByString(p).getValueByString("Fps").toFloat(0)},e.prototype.getSubRigCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("PhysicsSettingCount").toInt()},e.prototype.getTotalInputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalInputCount").toInt()},e.prototype.getTotalOutputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalOutputCount").toInt()},e.prototype.getVertexCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("VertexCount").toInt()},e.prototype.getNormalizationPositionMinimumValue=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(f).getValueByString(l).getValueByString(y).toFloat()},e.prototype.getNormalizationPositionMaximumValue=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(f).getValueByString(l).getValueByString(v).toFloat()},e.prototype.getNormalizationPositionDefaultValue=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(f).getValueByString(l).getValueByString(b).toFloat()},e.prototype.getNormalizationAngleMinimumValue=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(f).getValueByString(c).getValueByString(y).toFloat()},e.prototype.getNormalizationAngleMaximumValue=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(f).getValueByString(c).getValueByString(v).toFloat()},e.prototype.getNormalizationAngleDefaultValue=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(f).getValueByString(c).getValueByString(b).toFloat()},e.prototype.getInputCount=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(S).getVector().getSize()},e.prototype.getInputWeight=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(S).getValueByIndex(t).getValueByString(C).toFloat()},e.prototype.getInputReflect=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(S).getValueByIndex(t).getValueByString(M).toBoolean()},e.prototype.getInputType=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(S).getValueByIndex(t).getValueByString(h).getRawString()},e.prototype.getInputSourceId=function(e,t){return n.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(S).getValueByIndex(t).getValueByString("Source").getValueByString("Id").getRawString())},e.prototype.getOutputCount=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(P).getVector().getSize()},e.prototype.getOutputVertexIndex=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString("VertexIndex").toInt()},e.prototype.getOutputAngleScale=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString("Scale").toFloat()},e.prototype.getOutputWeight=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString(C).toFloat()},e.prototype.getOutputDestinationId=function(e,t){return n.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString("Destination").getValueByString("Id").getRawString())},e.prototype.getOutputType=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString(h).getRawString()},e.prototype.getOutputReflect=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString(M).toBoolean()},e.prototype.getParticleCount=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(I).getVector().getSize()},e.prototype.getParticleMobility=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString("Mobility").toFloat()},e.prototype.getParticleDelay=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString("Delay").toFloat()},e.prototype.getParticleAcceleration=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString("Acceleration").toFloat()},e.prototype.getParticleRadius=function(e,t){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString("Radius").toFloat()},e.prototype.getParticlePosition=function(e,t){var i=new s.CubismVector2(0,0);return i.x=this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString(l).getValueByString("X").toFloat(),i.y=this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString(l).getValueByString("Y").toFloat(),i},e}();t.CubismPhysicsJson=x;var w=o(i(6286));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismPhysicsJson=w.CubismPhysicsJson},7151:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismTextureColor=t.CubismBlendMode=t.CubismRenderer=void 0;var n,s=i(1149),u=function(){function e(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisotropy=0,this._model=null,this._modelColor=new l,this._mvpMatrix4x4=new s.CubismMatrix44,this._mvpMatrix4x4.loadIdentity()}return e.create=function(){return null},e.delete=function(e){},e.prototype.initialize=function(e){this._model=e},e.prototype.drawModel=function(){null!=this.getModel()&&this.doDrawModel()},e.prototype.setMvpMatrix=function(e){this._mvpMatrix4x4.setMatrix(e.getArray())},e.prototype.getMvpMatrix=function(){return this._mvpMatrix4x4},e.prototype.setModelColor=function(e,t,i,r){e<0?e=0:e>1&&(e=1),t<0?t=0:t>1&&(t=1),i<0?i=0:i>1&&(i=1),r<0?r=0:r>1&&(r=1),this._modelColor.R=e,this._modelColor.G=t,this._modelColor.B=i,this._modelColor.A=r},e.prototype.getModelColor=function(){return JSON.parse(JSON.stringify(this._modelColor))},e.prototype.setIsPremultipliedAlpha=function(e){this._isPremultipliedAlpha=e},e.prototype.isPremultipliedAlpha=function(){return this._isPremultipliedAlpha},e.prototype.setIsCulling=function(e){this._isCulling=e},e.prototype.isCulling=function(){return this._isCulling},e.prototype.setAnisotropy=function(e){this._anisotropy=e},e.prototype.getAnisotropy=function(){return this._anisotropy},e.prototype.getModel=function(){return this._model},e}();t.CubismRenderer=u,(n=t.CubismBlendMode||(t.CubismBlendMode={}))[n.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",n[n.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",n[n.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative";var l=function(){this.R=1,this.G=1,this.B=1,this.A=1};t.CubismTextureColor=l;var c,h=o(i(7151));(c=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismBlendMode=h.CubismBlendMode,c.CubismRenderer=h.CubismRenderer,c.CubismTextureColor=h.CubismTextureColor},3795:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismRenderer_WebGL=t.fragmentShaderSrcMaskInvertedPremultipliedAlpha=t.fragmentShaderSrcMaskPremultipliedAlpha=t.fragmentShaderSrcPremultipliedAlpha=t.vertexShaderSrcMasked=t.vertexShaderSrc=t.fragmentShaderSrcsetupMask=t.vertexShaderSrcSetupMask=t.ShaderNames=t.CubismShaderSet=t.CubismShader_WebGL=t.CubismClippingContext=t.CubismRenderTextureResource=t.CubismClippingManager_WebGL=void 0;var u,l,c,h=i(1671),p=i(1149),d=i(502),g=i(9920),m=i(5760),_=i(1073),f=i(7151),y=function(){function e(){this._maskRenderTexture=null,this._colorBuffer=null,this._currentFrameNo=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new m.csmVector,this._clippingContextListForDraw=new m.csmVector,this._channelColors=new m.csmVector,this._tmpBoundsOnModel=new g.csmRect,this._tmpMatrix=new p.CubismMatrix44,this._tmpMatrixForMask=new p.CubismMatrix44,this._tmpMatrixForDraw=new p.CubismMatrix44,this._maskTexture=null;var e=new f.CubismTextureColor;e.R=1,e.G=0,e.B=0,e.A=0,this._channelColors.pushBack(e),(e=new f.CubismTextureColor).R=0,e.G=1,e.B=0,e.A=0,this._channelColors.pushBack(e),(e=new f.CubismTextureColor).R=0,e.G=0,e.B=1,e.A=0,this._channelColors.pushBack(e),(e=new f.CubismTextureColor).R=0,e.G=0,e.B=0,e.A=1,this._channelColors.pushBack(e)}return e.prototype.getChannelFlagAsColor=function(e){return this._channelColors.at(e)},e.prototype.getMaskRenderTexture=function(){var e=0;if(this._maskTexture&&0!=this._maskTexture.texture&&(this._maskTexture.frameNo=this._currentFrameNo,e=this._maskTexture.texture),0==e){var t=this._clippingMaskBufferSize;this._colorBuffer=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this._colorBuffer),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,t,t,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),e=this.gl.createFramebuffer(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,e),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._colorBuffer,0),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,c),this._maskTexture=new v(this._currentFrameNo,e)}return e},e.prototype.setGL=function(e){this.gl=e},e.prototype.calcClippedDrawTotalBounds=function(e,t){for(var i=Number.MAX_VALUE,r=Number.MAX_VALUE,a=Number.MIN_VALUE,o=Number.MIN_VALUE,n=t._clippedDrawableIndexList.length,s=0;s<n;s++){for(var u=t._clippedDrawableIndexList[s],l=e.getDrawableVertexCount(u),c=e.getDrawableVertices(u),p=Number.MAX_VALUE,d=Number.MAX_VALUE,g=Number.MIN_VALUE,m=Number.MIN_VALUE,_=l*h.Constant.vertexStep,f=h.Constant.vertexOffset;f<_;f+=h.Constant.vertexStep){var y=c[f],v=c[f+1];y<p&&(p=y),y>g&&(g=y),v<d&&(d=v),v>m&&(m=v)}if(p!=Number.MAX_VALUE)if(p<i&&(i=p),d<r&&(r=d),g>a&&(a=g),m>o&&(o=m),i==Number.MAX_VALUE)t._allClippedDrawRect.x=0,t._allClippedDrawRect.y=0,t._allClippedDrawRect.width=0,t._allClippedDrawRect.height=0,t._isUsing=!1;else{t._isUsing=!0;var b=a-i,M=o-r;t._allClippedDrawRect.x=i,t._allClippedDrawRect.y=r,t._allClippedDrawRect.width=b,t._allClippedDrawRect.height=M}}},e.prototype.release=function(){for(var e=0;e<this._clippingContextListForMask.getSize();e++)this._clippingContextListForMask.at(e)&&(this._clippingContextListForMask.at(e).release(),this._clippingContextListForMask.set(e,void 0)),this._clippingContextListForMask.set(e,null);for(this._clippingContextListForMask=null,e=0;e<this._clippingContextListForDraw.getSize();e++)this._clippingContextListForDraw.set(e,null);for(this._clippingContextListForDraw=null,this._maskTexture&&(this.gl.deleteFramebuffer(this._maskTexture.texture),this._maskTexture=null),e=0;e<this._channelColors.getSize();e++)this._channelColors.set(e,null);this._channelColors=null,this.gl.deleteTexture(this._colorBuffer),this._colorBuffer=null},e.prototype.initialize=function(e,t,i,r){for(var a=0;a<t;a++)if(r[a]<=0)this._clippingContextListForDraw.pushBack(null);else{var o=this.findSameClip(i[a],r[a]);null==o&&(o=new b(this,i[a],r[a]),this._clippingContextListForMask.pushBack(o)),o.addClippedDrawable(a),this._clippingContextListForDraw.pushBack(o)}},e.prototype.setupClippingContext=function(e,t){this._currentFrameNo++;for(var i=0,r=0;r<this._clippingContextListForMask.getSize();r++){var a=this._clippingContextListForMask.at(r);this.calcClippedDrawTotalBounds(e,a),a._isUsing&&i++}if(i>0){for(this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._maskRenderTexture=this.getMaskRenderTexture(),t.getMvpMatrix(),t.preDraw(),this.setupLayoutBounds(i),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTexture),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),r=0;r<this._clippingContextListForMask.getSize();r++){var o=this._clippingContextListForMask.at(r),n=o._allClippedDrawRect,s=o._layoutBounds;this._tmpBoundsOnModel.setRect(n),this._tmpBoundsOnModel.expand(.05*n.width,.05*n.height);var u=s.width/this._tmpBoundsOnModel.width,h=s.height/this._tmpBoundsOnModel.height;this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(s.x,s.y),this._tmpMatrix.scaleRelative(u,h),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(s.x,s.y),this._tmpMatrix.scaleRelative(u,h),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),o._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),o._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());for(var p=o._clippingIdCount,d=0;d<p;d++){var g=o._clippingIdList[d];e.getDrawableDynamicFlagVertexPositionsDidChange(g)&&(t.setIsCulling(0!=e.getDrawableCulling(g)),t.setClippingContextBufferForMask(o),t.drawMesh(e.getDrawableTextureIndex(g),e.getDrawableVertexIndexCount(g),e.getDrawableVertexCount(g),e.getDrawableVertexIndices(g),e.getDrawableVertices(g),e.getDrawableVertexUvs(g),e.getMultiplyColor(g),e.getScreenColor(g),e.getDrawableOpacity(g),f.CubismBlendMode.CubismBlendMode_Normal,!1))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,c),t.setClippingContextBufferForMask(null),this.gl.viewport(l[0],l[1],l[2],l[3])}},e.prototype.findSameClip=function(e,t){for(var i=0;i<this._clippingContextListForMask.getSize();i++){var r=this._clippingContextListForMask.at(i),a=r._clippingIdCount;if(a==t){for(var o=0,n=0;n<a;n++)for(var s=r._clippingIdList[n],u=0;u<a;u++)if(e[u]==s){o++;break}if(o==a)return r}}return null},e.prototype.setupLayoutBounds=function(e){var t=e/4,i=e%4;t=~~t,i=~~i;for(var r=0,a=0;a<4;a++){var o=t+(a<i?1:0);if(0==o);else if(1==o){var n=this._clippingContextListForMask.at(r++);n._layoutChannelNo=a,n._layoutBounds.x=0,n._layoutBounds.y=0,n._layoutBounds.width=1,n._layoutBounds.height=1}else if(2==o)for(var s=0;s<o;s++)u=~~(u=s%2),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=a,h._layoutBounds.x=.5*u,h._layoutBounds.y=0,h._layoutBounds.width=.5,h._layoutBounds.height=1;else if(o<=4)for(s=0;s<o;s++)u=~~(u=s%2),l=~~(l=s/2),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=a,h._layoutBounds.x=.5*u,h._layoutBounds.y=.5*l,h._layoutBounds.width=.5,h._layoutBounds.height=.5;else if(o<=9)for(s=0;s<o;s++){var u,l;u=~~(u=s%3),l=~~(l=s/3),(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=a,h._layoutBounds.x=u/3,h._layoutBounds.y=l/3,h._layoutBounds.width=1/3,h._layoutBounds.height=1/3}else{(0,_.CubismLogError)("not supported mask count : {0}",o);for(var c=0;c<o;c++){var h;(h=this._clippingContextListForMask.at(r++))._layoutChannelNo=0,h._layoutBounds.x=0,h._layoutBounds.y=0,h._layoutBounds.width=1,h._layoutBounds.height=1}}}},e.prototype.getColorBuffer=function(){return this._colorBuffer},e.prototype.getClippingContextListForDraw=function(){return this._clippingContextListForDraw},e.prototype.setClippingMaskBufferSize=function(e){this._clippingMaskBufferSize=e},e.prototype.getClippingMaskBufferSize=function(){return this._clippingMaskBufferSize},e}();t.CubismClippingManager_WebGL=y;var v=function(e,t){this.frameNo=e,this.texture=t};t.CubismRenderTextureResource=v;var b=function(){function e(e,t,i){this._owner=e,this._clippingIdList=t,this._clippingIdCount=i,this._allClippedDrawRect=new g.csmRect,this._layoutBounds=new g.csmRect,this._clippedDrawableIndexList=[],this._matrixForMask=new p.CubismMatrix44,this._matrixForDraw=new p.CubismMatrix44}return e.prototype.release=function(){null!=this._layoutBounds&&(this._layoutBounds=null),null!=this._allClippedDrawRect&&(this._allClippedDrawRect=null),null!=this._clippedDrawableIndexList&&(this._clippedDrawableIndexList=null)},e.prototype.addClippedDrawable=function(e){this._clippedDrawableIndexList.push(e)},e.prototype.getClippingManager=function(){return this._owner},e.prototype.setGl=function(e){this._owner.setGL(e)},e}();t.CubismClippingContext=b;var M=function(){function e(){this._shaderSets=new m.csmVector}return e.getInstance=function(){return null==u?u=new e:u},e.deleteInstance=function(){u&&(u.release(),u=null)},e.prototype.release=function(){this.releaseShaderProgram()},e.prototype.setupShaderProgram=function(e,t,i,r,a,o,n,s,u,l,c,h,p,d,g){var m,y,v,b;if(p||(0,_.CubismLogError)("NoPremultipliedAlpha is not allowed"),0==this._shaderSets.getSize()&&this.generateShaders(),null!=e.getClippingContextBufferForMask()){var M=this._shaderSets.at(C.ShaderNames_SetupMask);this.gl.useProgram(M.shaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,t),this.gl.uniform1i(M.samplerTexture0Location,0),null==n.vertex&&(n.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(M.attributePositionLocation),this.gl.vertexAttribPointer(M.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==n.uv&&(n.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(M.attributeTexCoordLocation),this.gl.vertexAttribPointer(M.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0);var P=e.getClippingContextBufferForMask()._layoutChannelNo,I=e.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(P);this.gl.uniform4f(M.uniformChannelFlagLocation,I.R,I.G,I.B,I.A),this.gl.uniformMatrix4fv(M.uniformClipMatrixLocation,!1,e.getClippingContextBufferForMask()._matrixForMask.getArray());var x=e.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(M.uniformBaseColorLocation,2*x.x-1,2*x.y-1,2*x.getRight()-1,2*x.getBottom()-1),this.gl.uniform4f(M.uniformMultiplyColorLocation,c.R,c.G,c.B,c.A),this.gl.uniform4f(M.uniformScreenColorLocation,h.R,h.G,h.B,h.A),m=this.gl.ZERO,y=this.gl.ONE_MINUS_SRC_COLOR,v=this.gl.ZERO,b=this.gl.ONE_MINUS_SRC_ALPHA}else{var w=null!=e.getClippingContextBufferForDraw(),B=w?g?2:1:0;switch(M=new S,u){case f.CubismBlendMode.CubismBlendMode_Normal:default:M=this._shaderSets.at(C.ShaderNames_NormalPremultipliedAlpha+B),m=this.gl.ONE,y=this.gl.ONE_MINUS_SRC_ALPHA,v=this.gl.ONE,b=this.gl.ONE_MINUS_SRC_ALPHA;break;case f.CubismBlendMode.CubismBlendMode_Additive:M=this._shaderSets.at(C.ShaderNames_AddPremultipliedAlpha+B),m=this.gl.ONE,y=this.gl.ONE,v=this.gl.ZERO,b=this.gl.ONE;break;case f.CubismBlendMode.CubismBlendMode_Multiplicative:M=this._shaderSets.at(C.ShaderNames_MultPremultipliedAlpha+B),m=this.gl.DST_COLOR,y=this.gl.ONE_MINUS_SRC_ALPHA,v=this.gl.ZERO,b=this.gl.ONE}if(this.gl.useProgram(M.shaderProgram),null==n.vertex&&(n.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(M.attributePositionLocation),this.gl.vertexAttribPointer(M.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==n.uv&&(n.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(M.attributeTexCoordLocation),this.gl.vertexAttribPointer(M.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),w){this.gl.activeTexture(this.gl.TEXTURE1);var L=e.getClippingContextBufferForDraw().getClippingManager().getColorBuffer();this.gl.bindTexture(this.gl.TEXTURE_2D,L),this.gl.uniform1i(M.samplerTexture1Location,1),this.gl.uniformMatrix4fv(M.uniformClipMatrixLocation,!1,e.getClippingContextBufferForDraw()._matrixForDraw.getArray()),P=e.getClippingContextBufferForDraw()._layoutChannelNo,I=e.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(P),this.gl.uniform4f(M.uniformChannelFlagLocation,I.R,I.G,I.B,I.A)}this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,t),this.gl.uniform1i(M.samplerTexture0Location,0),this.gl.uniformMatrix4fv(M.uniformMatrixLocation,!1,d.getArray()),this.gl.uniform4f(M.uniformBaseColorLocation,l.R,l.G,l.B,l.A),this.gl.uniform4f(M.uniformMultiplyColorLocation,c.R,c.G,c.B,c.A),this.gl.uniform4f(M.uniformScreenColorLocation,h.R,h.G,h.B,h.A)}null==n.index&&(n.index=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,n.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,a,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(m,y,v,b)},e.prototype.releaseShaderProgram=function(){for(var e=0;e<this._shaderSets.getSize();e++)this.gl.deleteProgram(this._shaderSets.at(e).shaderProgram),this._shaderSets.at(e).shaderProgram=0,this._shaderSets.set(e,void 0),this._shaderSets.set(e,null)},e.prototype.generateShaders=function(){for(var e=0;e<10;e++)this._shaderSets.pushBack(new S);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcSetupMask,t.fragmentShaderSrcsetupMask),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(t.vertexShaderSrc,t.fragmentShaderSrcPremultipliedAlpha),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcMasked,t.fragmentShaderSrcMaskPremultipliedAlpha),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcMasked,t.fragmentShaderSrcMaskInvertedPremultipliedAlpha),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(0).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_multiplyColor"),this._shaderSets.at(0).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_screenColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(1).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_multiplyColor"),this._shaderSets.at(1).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_screenColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(2).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_multiplyColor"),this._shaderSets.at(2).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_screenColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(3).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_multiplyColor"),this._shaderSets.at(3).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_screenColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(4).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_multiplyColor"),this._shaderSets.at(4).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_screenColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(5).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_multiplyColor"),this._shaderSets.at(5).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_screenColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(6).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_multiplyColor"),this._shaderSets.at(6).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_screenColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(7).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_multiplyColor"),this._shaderSets.at(7).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_screenColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(8).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_multiplyColor"),this._shaderSets.at(8).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_screenColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor"),this._shaderSets.at(9).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_multiplyColor"),this._shaderSets.at(9).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_screenColor")},e.prototype.loadShaderProgram=function(e,t){var i=this.gl.createProgram(),r=this.compileShaderSource(this.gl.VERTEX_SHADER,e);if(!r)return(0,_.CubismLogError)("Vertex shader compile error!"),0;var a=this.compileShaderSource(this.gl.FRAGMENT_SHADER,t);return a?(this.gl.attachShader(i,r),this.gl.attachShader(i,a),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(r),this.gl.deleteShader(a),i):((0,_.CubismLogError)("Failed to link program: {0}",i),this.gl.deleteShader(r),r=0,this.gl.deleteShader(a),a=0,i&&(this.gl.deleteProgram(i),i=0),0)):((0,_.CubismLogError)("Vertex shader compile error!"),0)},e.prototype.compileShaderSource=function(e,t){var i=t,r=this.gl.createShader(e);if(this.gl.shaderSource(r,i),this.gl.compileShader(r),!r){var a=this.gl.getShaderInfoLog(r);(0,_.CubismLogError)("Shader compile log: {0} ",a)}return this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(this.gl.deleteShader(r),null)},e.prototype.setGl=function(e){this.gl=e},e}();t.CubismShader_WebGL=M;var C,S=function(){};t.CubismShaderSet=S,function(e){e[e.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",e[e.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",e[e.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",e[e.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",e[e.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",e[e.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",e[e.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",e[e.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",e[e.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",e[e.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted"}(C=t.ShaderNames||(t.ShaderNames={})),t.vertexShaderSrcSetupMask="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.fragmentShaderSrcsetupMask="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",t.vertexShaderSrc="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.vertexShaderSrcMasked="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.fragmentShaderSrcPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 color = texColor * u_baseColor;   gl_FragColor = vec4(color.rgb, color.a);}",t.fragmentShaderSrcMaskPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",t.fragmentShaderSrcMaskInvertedPremultipliedAlpha="precision mediump float;varying vec2      v_texCoord;varying vec4      v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4      u_channelFlag;uniform vec4      u_baseColor;uniform vec4      u_multiplyColor;uniform vec4      u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * (1.0 - maskVal);   gl_FragColor = col_formask;}";var P=function(e){function t(){var t=e.call(this)||this;return t._clippingContextBufferForMask=null,t._clippingContextBufferForDraw=null,t._clippingManager=new y,t.firstDraw=!0,t._textures=new d.csmMap,t._sortedDrawableIndexList=new m.csmVector,t._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},t._textures.prepareCapacity(32,!0),t}return a(t,e),t.prototype.initialize=function(t){t.isUsingMasking()&&(this._clippingManager=new y,this._clippingManager.initialize(t,t.getDrawableCount(),t.getDrawableMasks(),t.getDrawableMaskCounts())),this._sortedDrawableIndexList.resize(t.getDrawableCount(),0),e.prototype.initialize.call(this,t)},t.prototype.bindTexture=function(e,t){this._textures.setValue(e,t)},t.prototype.getBindedTextures=function(){return this._textures},t.prototype.setClippingMaskBufferSize=function(e){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new y,this._clippingManager.setClippingMaskBufferSize(e),this._clippingManager.initialize(this.getModel(),this.getModel().getDrawableCount(),this.getModel().getDrawableMasks(),this.getModel().getDrawableMaskCounts())},t.prototype.getClippingMaskBufferSize=function(){return this._clippingManager.getClippingMaskBufferSize()},t.prototype.release=function(){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null},t.prototype.doDrawModel=function(){null!=this._clippingManager&&(this.preDraw(),this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();for(var e=this.getModel().getDrawableCount(),t=this.getModel().getDrawableRenderOrders(),i=0;i<e;++i){var r=t[i];this._sortedDrawableIndexList.set(r,i)}for(i=0;i<e;++i){var a=this._sortedDrawableIndexList.at(i);this.getModel().getDrawableDynamicFlagIsVisible(a)&&(this.setClippingContextBufferForDraw(null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(a):null),this.setIsCulling(this.getModel().getDrawableCulling(a)),this.drawMesh(this.getModel().getDrawableTextureIndex(a),this.getModel().getDrawableVertexIndexCount(a),this.getModel().getDrawableVertexCount(a),this.getModel().getDrawableVertexIndices(a),this.getModel().getDrawableVertices(a),this.getModel().getDrawableVertexUvs(a),this.getModel().getMultiplyColor(a),this.getModel().getScreenColor(a),this.getModel().getDrawableOpacity(a),this.getModel().getDrawableBlendMode(a),this.getModel().getDrawableInvertedMaskBit(a)))}},t.prototype.drawMesh=function(e,t,i,r,a,o,n,s,u,l,c){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW);var h,p=this.getModelColor();null==this.getClippingContextBufferForMask()&&(p.A*=u,this.isPremultipliedAlpha()&&(p.R*=p.A,p.G*=p.A,p.B*=p.A)),h=null!=this._textures.getValue(e)?this._textures.getValue(e):null,M.getInstance().setupShaderProgram(this,h,i,a,r,o,this._bufferData,u,l,p,n,s,this.isPremultipliedAlpha(),this.getMvpMatrix(),c),this.gl.drawElements(this.gl.TRIANGLES,t,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)},t.doStaticRelease=function(){M.deleteInstance()},t.prototype.setRenderState=function(e,t){c=e,l=t},t.prototype.preDraw=function(){if(this.firstDraw&&(this.firstDraw=!1),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null),this.getAnisotropy()>0&&this._extension)for(var e=0;e<this._textures.getSize();++e)this.gl.bindTexture(this.gl.TEXTURE_2D,this._textures.getValue(e)),this.gl.texParameterf(this.gl.TEXTURE_2D,this._extension.TEXTURE_MAX_ANISOTROPY_EXT,this.getAnisotropy())},t.prototype.setClippingContextBufferForMask=function(e){this._clippingContextBufferForMask=e},t.prototype.getClippingContextBufferForMask=function(){return this._clippingContextBufferForMask},t.prototype.setClippingContextBufferForDraw=function(e){this._clippingContextBufferForDraw=e},t.prototype.getClippingContextBufferForDraw=function(){return this._clippingContextBufferForDraw},t.prototype.startUp=function(e){this.gl=e,this._clippingManager.setGL(e),M.getInstance().setGl(e),this._extension=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")},t}(f.CubismRenderer);t.CubismRenderer_WebGL=P,f.CubismRenderer.staticRelease=function(){P.doStaticRelease()};var I,x=s(i(3795));(I=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismClippingContext=x.CubismClippingContext,I.CubismClippingManager_WebGL=x.CubismClippingManager_WebGL,I.CubismRenderTextureResource=x.CubismRenderTextureResource,I.CubismRenderer_WebGL=x.CubismRenderer_WebGL,I.CubismShaderSet=x.CubismShaderSet,I.CubismShader_WebGL=x.CubismShader_WebGL,I.ShaderNames=x.ShaderNames},502:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.iterator=t.csmMap=t.csmPair=void 0;var n=i(1073),s=function(e,t){this.first=null==e?null:e,this.second=null==t?null:t};t.csmPair=s;var u=function(){function e(e){null!=e?e<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(e),this._size=e):(this._keyValues=[],this._dummyValue=null,this._size=0)}return e.prototype.release=function(){this.clear()},e.prototype.appendKey=function(e){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new s(e),this._size+=1},e.prototype.getValue=function(e){for(var t=-1,i=0;i<this._size;i++)if(this._keyValues[i].first==e){t=i;break}return t>=0?this._keyValues[t].second:(this.appendKey(e),this._keyValues[this._size-1].second)},e.prototype.setValue=function(e,t){for(var i=-1,r=0;r<this._size;r++)if(this._keyValues[r].first==e){i=r;break}i>=0?this._keyValues[i].second=t:(this.appendKey(e),this._keyValues[this._size-1].second=t)},e.prototype.isExist=function(e){for(var t=0;t<this._size;t++)if(this._keyValues[t].first==e)return!0;return!1},e.prototype.clear=function(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0},e.prototype.getSize=function(){return this._size},e.prototype.prepareCapacity=function(t,i){t>this._keyValues.length&&(0==this._keyValues.length?(!i&&t<e.DefaultSize&&(t=e.DefaultSize),this._keyValues.length=t):(!i&&t<2*this._keyValues.length&&(t=2*this._keyValues.length),this._keyValues.length=t))},e.prototype.begin=function(){return new l(this,0)},e.prototype.end=function(){return new l(this,this._size)},e.prototype.erase=function(e){var t=e._index;return t<0||this._size<=t?e:(this._keyValues.splice(t,1),--this._size,new l(this,t))},e.prototype.dumpAsInt=function(){for(var e=0;e<this._size;e++)(0,n.CubismLogDebug)("{0} ,",this._keyValues[e]),(0,n.CubismLogDebug)("\n")},e.DefaultSize=10,e}();t.csmMap=u;var l=function(){function e(e,t){this._map=null!=e?e:new u,this._index=null!=t?t:0}return e.prototype.set=function(e){return this._index=e._index,this._map=e._map,this},e.prototype.preIncrement=function(){return++this._index,this},e.prototype.preDecrement=function(){return--this._index,this},e.prototype.increment=function(){return new e(this._map,this._index++)},e.prototype.decrement=function(){var t=new e(this._map,this._index);return this._map=t._map,this._index=t._index,this},e.prototype.ptr=function(){return this._map._keyValues[this._index]},e.prototype.notEqual=function(e){return this._index!=e._index||this._map!=e._map},e}();t.iterator=l;var c,h=o(i(502));(c=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).csmMap=h.csmMap,c.csmPair=h.csmPair,c.iterator=h.iterator},9920:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.csmRect=void 0;var n=function(){function e(e,t,i,r){this.x=e,this.y=t,this.width=i,this.height=r}return e.prototype.getCenterX=function(){return this.x+.5*this.width},e.prototype.getCenterY=function(){return this.y+.5*this.height},e.prototype.getRight=function(){return this.x+this.width},e.prototype.getBottom=function(){return this.y+this.height},e.prototype.setRect=function(e){this.x=e.x,this.y=e.y,this.width=e.width,this.height=e.height},e.prototype.expand=function(e,t){this.x-=e,this.y-=t,this.width+=2*e,this.height+=2*t},e}();t.csmRect=n;var s=o(i(9920));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).csmRect=s.csmRect},1695:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.csmString=void 0;var n=function(){function e(e){this.s=e}return e.prototype.append=function(e,t){return this.s+=void 0!==t?e.substr(0,t):e,this},e.prototype.expansion=function(e,t){for(var i=0;i<e;i++)this.append(t);return this},e.prototype.getBytes=function(){return encodeURIComponent(this.s).replace(/%../g,"x").length},e.prototype.getLength=function(){return this.s.length},e.prototype.isLess=function(e){return this.s<e.s},e.prototype.isGreat=function(e){return this.s>e.s},e.prototype.isEqual=function(e){return this.s==e},e.prototype.isEmpty=function(){return 0==this.s.length},e}();t.csmString=n;var s=o(i(1695));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).csmString=s.csmString},5760:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.iterator=t.csmVector=void 0;var n=function(){function e(e){void 0===e&&(e=0),e<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(e),this._capacity=e,this._size=0)}return e.prototype.at=function(e){return this._ptr[e]},e.prototype.set=function(e,t){this._ptr[e]=t},e.prototype.get=function(e){void 0===e&&(e=0);for(var t=new Array,i=e;i<this._size;i++)t.push(this._ptr[i]);return t},e.prototype.pushBack=function(t){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?e.s_defaultSize:2*this._capacity),this._ptr[this._size++]=t},e.prototype.clear=function(){this._ptr.length=0,this._size=0},e.prototype.getSize=function(){return this._size},e.prototype.assign=function(e,t){this._size<e&&this.prepareCapacity(e);for(var i=0;i<e;i++)this._ptr[i]=t;this._size=e},e.prototype.resize=function(e,t){void 0===t&&(t=null),this.updateSize(e,t,!0)},e.prototype.updateSize=function(e,t,i){if(void 0===t&&(t=null),void 0===i&&(i=!0),this._size<e)if(this.prepareCapacity(e),i)for(var r=this._size;r<e;r++)this._ptr[r]="function"==typeof t?JSON.parse(JSON.stringify(new t)):t;else for(r=this._size;r<e;r++)this._ptr[r]=t;else{var a=this._size-e;this._ptr.splice(this._size-a,a)}this._size=e},e.prototype.insert=function(e,t,i){var r=e._index,a=t._index,o=i._index,n=o-a;this.prepareCapacity(this._size+n);var s=this._size-r;if(s>0)for(var u=0;u<s;u++)this._ptr.splice(r+u,0,null);for(u=a;u<o;u++,r++)this._ptr[r]=t._vector._ptr[u];this._size=this._size+n},e.prototype.remove=function(e){return!(e<0||this._size<=e||(this._ptr.splice(e,1),--this._size,0))},e.prototype.erase=function(e){var t=e._index;return t<0||this._size<=t?e:(this._ptr.splice(t,1),--this._size,new s(this,t))},e.prototype.prepareCapacity=function(e){e>this._capacity&&(0==this._capacity?(this._ptr=new Array(e),this._capacity=e):(this._ptr.length=e,this._capacity=e))},e.prototype.begin=function(){return 0==this._size?this.end():new s(this,0)},e.prototype.end=function(){return new s(this,this._size)},e.prototype.getOffset=function(t){var i=new e;return i._ptr=this.get(t),i._size=this.get(t).length,i._capacity=this.get(t).length,i},e.s_defaultSize=10,e}();t.csmVector=n;var s=function(){function e(e,t){this._vector=null!=e?e:null,this._index=null!=t?t:0}return e.prototype.set=function(e){return this._index=e._index,this._vector=e._vector,this},e.prototype.preIncrement=function(){return++this._index,this},e.prototype.preDecrement=function(){return--this._index,this},e.prototype.increment=function(){return new e(this._vector,this._index++)},e.prototype.decrement=function(){return new e(this._vector,this._index--)},e.prototype.ptr=function(){return this._vector._ptr[this._index]},e.prototype.substitution=function(e){return this._index=e._index,this._vector=e._vector,this},e.prototype.notEqual=function(e){return this._index!=e._index||this._vector!=e._vector},e}();t.iterator=s;var u,l=o(i(5760));(u=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).csmVector=l.csmVector,u.iterator=l.iterator},1073:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismDebug=t.CubismLogError=t.CubismLogWarning=t.CubismLogInfo=t.CubismLogDebug=t.CubismLogVerbose=t.CSM_ASSERT=t.CubismLogPrintIn=t.CubismLogPrint=void 0;var n=i(1816),s=i(1671);t.CubismLogPrint=function(e,t,i){u.print(e,"[CSM]"+t,i)},t.CubismLogPrintIn=function(e,i,r){(0,t.CubismLogPrint)(e,i+"\n",r)},t.CSM_ASSERT=function(e){console.assert(e)},n.CSM_LOG_LEVEL<=n.CSM_LOG_LEVEL_VERBOSE?(t.CubismLogVerbose=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Verbose,"[V]"+e,i)},t.CubismLogDebug=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+e,i)},t.CubismLogInfo=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+e,i)},t.CubismLogWarning=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+e,i)},t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_DEBUG?(t.CubismLogDebug=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+e,i)},t.CubismLogInfo=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+e,i)},t.CubismLogWarning=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+e,i)},t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_INFO?(t.CubismLogInfo=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+e,i)},t.CubismLogWarning=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+e,i)},t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_WARNING?(t.CubismLogWarning=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+e,i)},t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_ERROR&&(t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)});var u=function(){function e(){}return e.print=function(e,t,i){if(!(e<s.CubismFramework.getLoggingLevel())){var r=s.CubismFramework.coreLogFunction;r&&r(t.replace(/\{(\d+)\}/g,(function(e,t){return i[t]})))}},e.dumpBytes=function(e,t,i){for(var r=0;r<i;r++)r%16==0&&r>0?this.print(e,"\n"):r%8==0&&r>0&&this.print(e,"  "),this.print(e,"{0} ",[255&t[r]]);this.print(e,"\n")},e}();t.CubismDebug=u;var l=o(i(1073));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismDebug=l.CubismDebug},3706:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.JsonMap=t.JsonArray=t.JsonNullvalue=t.JsonError=t.JsonString=t.JsonBoolean=t.JsonFloat=t.CubismJson=t.Value=void 0;var u=i(1671),l=i(502),c=i(1695),h=i(5760),p=i(1073),d="Error: type mismatch",g=function(){function e(){}return e.prototype.getRawString=function(e,t){return this.getString(e,t)},e.prototype.toInt=function(e){return void 0===e&&(e=0),e},e.prototype.toFloat=function(e){return void 0===e&&(e=0),e},e.prototype.toBoolean=function(e){return void 0===e&&(e=!1),e},e.prototype.getSize=function(){return 0},e.prototype.getArray=function(e){return void 0===e&&(e=null),e},e.prototype.getVector=function(e){return void 0===e&&(e=new h.csmVector),e},e.prototype.getMap=function(e){return e},e.prototype.getValueByIndex=function(t){return e.errorValue.setErrorNotForClientCall(d)},e.prototype.getValueByString=function(t){return e.nullValue.setErrorNotForClientCall(d)},e.prototype.getKeys=function(){return e.s_dummyKeys},e.prototype.isError=function(){return!1},e.prototype.isNull=function(){return!1},e.prototype.isBool=function(){return!1},e.prototype.isFloat=function(){return!1},e.prototype.isString=function(){return!1},e.prototype.isArray=function(){return!1},e.prototype.isMap=function(){return!1},e.prototype.equals=function(e){return!1},e.prototype.isStatic=function(){return!1},e.prototype.setErrorNotForClientCall=function(e){return v.errorValue},e.staticInitializeNotForClientCall=function(){f.trueValue=new f(!0),f.falseValue=new f(!1),e.errorValue=new v("ERROR",!0),e.nullValue=new b,e.s_dummyKeys=new h.csmVector},e.staticReleaseNotForClientCall=function(){f.trueValue=null,f.falseValue=null,e.errorValue=null,e.nullValue=null,e.s_dummyKeys=null},e}();t.Value=g;var m=function(){function e(e,t){this._parseCallback=I.CubismJsonExtension.parseJsonObject,this._error=null,this._lineCount=0,this._root=null,null!=e&&this.parseBytes(e,t,this._parseCallback)}return e.create=function(t,i){var r=new e;return r.parseBytes(t,i,r._parseCallback)?r:(e.delete(r),null)},e.delete=function(e){},e.prototype.getRoot=function(){return this._root},e.arrayBufferToString=function(e){for(var t=new Uint8Array(e),i="",r=0,a=t.length;r<a;++r)i+="%"+this.pad(t[r].toString(16));return decodeURIComponent(i)},e.pad=function(e){return e.length<2?"0"+e:e},e.prototype.parseBytes=function(t,i,r){var a,o=new Array(1),n=e.arrayBufferToString(t);return this._root=null==r?this.parseValue(n,i,0,o):r(JSON.parse(n),new C),this._error?(a="Json parse error : @line "+(this._lineCount+1)+"\n",this._root=new y(a),(0,p.CubismLogInfo)("{0}",this._root.getRawString()),!1):null!=this._root||(this._root=new v(new c.csmString(this._error),!1),!1)},e.prototype.getParseError=function(){return this._error},e.prototype.checkEndOfFile=function(){return this._root.getArray()[1].equals("EOF")},e.prototype.parseValue=function(e,t,i,r){if(this._error)return null;for(var a,o=null,n=i;n<t;n++)switch(e[n]){case"-":case".":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":var s=new Array(1);return a=(0,u.strtod)(e.slice(n),s),r[0]=e.indexOf(s[0]),new _(a);case'"':return new y(this.parseString(e,t,n+1,r));case"[":return this.parseArray(e,t,n+1,r);case"{":return this.parseObject(e,t,n+1,r);case"n":return n+3<t?(o=new b,r[0]=n+4):this._error="parse null",o;case"t":return n+3<t?(o=f.trueValue,r[0]=n+4):this._error="parse true",o;case"f":return n+4<t?(o=f.falseValue,r[0]=n+5):this._error="illegal ',' position",o;case",":return this._error="illegal ',' position",null;case"]":return r[0]=n,null;case"\n":this._lineCount++}return this._error="illegal end of value",null},e.prototype.parseString=function(e,t,i,r){if(this._error)return null;for(var a=i,o=new c.csmString(""),n=i;a<t;a++)switch(e[a]){case'"':return r[0]=a+1,o.append(e.slice(n),a-n),o.s;case"//":if(++a-1>n&&o.append(e.slice(n),a-n),n=a+1,a<t)switch(e[a]){case"\\":o.expansion(1,"\\");break;case'"':o.expansion(1,'"');break;case"/":o.expansion(1,"/");break;case"b":o.expansion(1,"\b");break;case"f":o.expansion(1,"\f");break;case"n":o.expansion(1,"\n");break;case"r":o.expansion(1,"\r");break;case"t":o.expansion(1,"\t");break;case"u":this._error="parse string/unicord escape not supported"}else this._error="parse string/escape error"}return this._error="parse string/illegal end",null},e.prototype.parseObject=function(e,t,i,r){if(this._error)return null;for(var a=new C,o="",n=i,s=Array(1),u=!1;n<t;n++){e:for(;n<t;n++)switch(e[n]){case'"':if(o=this.parseString(e,t,n+1,s),this._error)return null;n=s[0],u=!0;break e;case"}":return r[0]=n+1,a;case":":this._error="illegal ':' position";break;case"\n":this._lineCount++}if(!u)return this._error="key not found",null;u=!1;e:for(;n<t;n++)switch(e[n]){case":":u=!0,n++;break e;case"}":this._error="illegal '}' position";break;case"\n":this._lineCount++}if(!u)return this._error="':' not found",null;var l=this.parseValue(e,t,n,s);if(this._error)return null;n=s[0],a.put(o,l);e:for(;n<t;n++)switch(e[n]){case",":break e;case"}":return r[0]=n+1,a;case"\n":this._lineCount++}}return this._error="illegal end of perseObject",null},e.prototype.parseArray=function(e,t,i,r){if(this._error)return null;for(var a=new M,o=i,n=new Array(1);o<t;o++){var s=this.parseValue(e,t,o,n);if(this._error)return null;o=n[0],s&&a.add(s);e:for(;o<t;o++)switch(e[o]){case",":break e;case"]":return r[0]=o+1,a;case"\n":++this._lineCount}}return a=void 0,this._error="illegal end of parseObject",null},e}();t.CubismJson=m;var _=function(e){function t(t){var i=e.call(this)||this;return i._value=t,i}return a(t,e),t.prototype.isFloat=function(){return!0},t.prototype.getString=function(e,t){return this._value=parseFloat("\0"),this._stringBuffer="\0",this._stringBuffer},t.prototype.toInt=function(e){return void 0===e&&(e=0),parseInt(this._value.toString())},t.prototype.toFloat=function(e){return void 0===e&&(e=0),this._value},t.prototype.equals=function(e){return"number"==typeof e&&!Math.round(e)&&e==this._value},t}(g);t.JsonFloat=_;var f=function(e){function t(t){var i=e.call(this)||this;return i._boolValue=t,i}return a(t,e),t.prototype.isBool=function(){return!0},t.prototype.toBoolean=function(e){return void 0===e&&(e=!1),this._boolValue},t.prototype.getString=function(e,t){return this._stringBuffer=this._boolValue?"true":"false",this._stringBuffer},t.prototype.equals=function(e){return"boolean"==typeof e&&e==this._boolValue},t.prototype.isStatic=function(){return!0},t}(g);t.JsonBoolean=f;var y=function(e){function t(t){var i=e.call(this)||this;return"string"==typeof t&&(i._stringBuffer=t),t instanceof c.csmString&&(i._stringBuffer=t.s),i}return a(t,e),t.prototype.isString=function(){return!0},t.prototype.getString=function(e,t){return this._stringBuffer},t.prototype.equals=function(e){return"string"==typeof e?this._stringBuffer==e:e instanceof c.csmString&&this._stringBuffer==e.s},t}(g);t.JsonString=y;var v=function(e){function t(t,i){var r=this;return(r=e.call(this,t)||this)._isStatic=i,r}return a(t,e),t.prototype.isStatic=function(){return this._isStatic},t.prototype.setErrorNotForClientCall=function(e){return this._stringBuffer=e,this},t.prototype.isError=function(){return!0},t}(y);t.JsonError=v;var b=function(e){function t(){var t=e.call(this)||this;return t._stringBuffer="NullValue",t}return a(t,e),t.prototype.isNull=function(){return!0},t.prototype.getString=function(e,t){return this._stringBuffer},t.prototype.isStatic=function(){return!0},t.prototype.setErrorNotForClientCall=function(e){return this._stringBuffer=e,v.nullValue},t}(g);t.JsonNullvalue=b;var M=function(e){function t(){var t=e.call(this)||this;return t._array=new h.csmVector,t}return a(t,e),t.prototype.release=function(){for(var e=this._array.begin();e.notEqual(this._array.end());e.preIncrement()){var t=e.ptr();t&&!t.isStatic()&&(t=void 0,t=null)}},t.prototype.isArray=function(){return!0},t.prototype.getValueByIndex=function(e){if(e<0||this._array.getSize()<=e)return g.errorValue.setErrorNotForClientCall("Error: index out of bounds");var t=this._array.at(e);return null==t?g.nullValue:t},t.prototype.getValueByString=function(e){return g.errorValue.setErrorNotForClientCall(d)},t.prototype.getString=function(e,t){for(var i=t+"[\n",r=this._array.begin();r.notEqual(this._array.end());r.increment()){var a=r.ptr();this._stringBuffer+=t+""+a.getString(t+" ")+"\n"}return this._stringBuffer=i+t+"]\n",this._stringBuffer},t.prototype.add=function(e){this._array.pushBack(e)},t.prototype.getVector=function(e){return void 0===e&&(e=null),this._array},t.prototype.getSize=function(){return this._array.getSize()},t}(g);t.JsonArray=M;var C=function(e){function t(){var t=e.call(this)||this;return t._map=new l.csmMap,t}return a(t,e),t.prototype.release=function(){for(var e=this._map.begin();e.notEqual(this._map.end());){var t=e.ptr().second;t&&!t.isStatic()&&(t=void 0,t=null),e.preIncrement()}},t.prototype.isMap=function(){return!0},t.prototype.getValueByString=function(e){if(e instanceof c.csmString){var t=this._map.getValue(e.s);return null==t?g.nullValue:t}for(var i=this._map.begin();i.notEqual(this._map.end());i.preIncrement())if(i.ptr().first==e)return null==i.ptr().second?g.nullValue:i.ptr().second;return g.nullValue},t.prototype.getValueByIndex=function(e){return g.errorValue.setErrorNotForClientCall(d)},t.prototype.getString=function(e,t){this._stringBuffer=t+"{\n";for(var i=this._map.begin();i.notEqual(this._map.end());){var r=i.ptr().first,a=i.ptr().second;this._stringBuffer+=t+" "+r+" : "+a.getString(t+"   ")+" \n",i.preIncrement()}return this._stringBuffer+=t+"}\n",this._stringBuffer},t.prototype.getMap=function(e){return this._map},t.prototype.put=function(e,t){this._map.setValue(e,t)},t.prototype.getKeys=function(){if(!this._keys){this._keys=new h.csmVector;for(var e=this._map.begin();e.notEqual(this._map.end());){var t=e.ptr().first;this._keys.pushBack(t),e.preIncrement()}}return this._keys},t.prototype.getSize=function(){return this._keys.getSize()},t}(g);t.JsonMap=C;var S,P=s(i(3706)),I=i(5868);(S=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismJson=P.CubismJson,S.JsonArray=P.JsonArray,S.JsonBoolean=P.JsonBoolean,S.JsonError=P.JsonError,S.JsonFloat=P.JsonFloat,S.JsonMap=P.JsonMap,S.JsonNullvalue=P.JsonNullvalue,S.JsonString=P.JsonString,S.Value=P.Value},5868:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CubismJsonExtension=void 0;var r=i(3706),a=function(){function e(){}return e.parseJsonObject=function(t,i){return Object.keys(t).forEach((function(a){"boolean"==typeof t[a]?i.put(a,new r.JsonBoolean(t[a])):"string"==typeof t[a]?i.put(a,new r.JsonString(t[a])):"number"==typeof t[a]?i.put(a,new r.JsonFloat(t[a])):t[a]instanceof Array?i.put(a,e.parseJsonArray(t[a])):t[a]instanceof Object?i.put(a,e.parseJsonObject(t[a],new r.JsonMap)):null==t[a]?i.put(a,new r.JsonNullvalue):i.put(a,t[a])})),i},e.parseJsonArray=function(e){var t=this,i=new r.JsonArray;return Object.keys(e).forEach((function(a){var o=Number(a);if("number"==typeof o)"boolean"==typeof e[o]?i.add(new r.JsonBoolean(e[o])):"string"==typeof e[o]?i.add(new r.JsonString(e[o])):"number"==typeof e[o]?i.add(new r.JsonFloat(e[o])):e[a]instanceof Array?i.add(t.parseJsonArray(e[a])):e[a]instanceof Object?i.add(t.parseJsonObject(e[a],new r.JsonMap)):null==e[a]?i.add(new r.JsonNullvalue):i.add(e[a]);else if(e[a]instanceof Array)i.add(t.parseJsonArray(e[a]));else if(e[a]instanceof Object)i.add(t.parseJsonObject(e[a],new r.JsonMap));else if(null==e[a])i.add(new r.JsonNullvalue);else for(var n=0;n<e[a].length;n++)i.add(e[a][n])})),i},e}();t.CubismJsonExtension=a},8046:function(e,t,i){"use strict";var r=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(a,o){function n(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,s)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,r,a,o,n={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(u){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(n=0)),n;)try{if(i=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return n.label++,{value:s[1],done:!1};case 5:n.label++,r=s[1],s=[0];continue;case 7:s=n.ops.pop(),n.trys.pop();continue;default:if(!((a=(a=n.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){n=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){n.label=s[1];break}if(6===s[0]&&n.label<a[1]){n.label=a[1],a=s;break}if(a&&n.label<a[2]){n.label=a[2],n.ops.push(s);break}a[2]&&n.ops.pop(),n.trys.pop();continue}s=t.call(e,n)}catch(e){s=[6,e],r=0}finally{i=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.AzureAi=void 0;var o=i(1986),n=i(4952),s=i(1780),u=function(){function e(){this._openaiurl=document.getElementById("openaiurl").value,this._openaipikey=document.getElementById("openaipikey").value,this._ttsregion=document.getElementById("ttsregion").value,this._ttsapikey=document.getElementById("ttsapikey").value,this._inProgress=!1}return e.prototype.getOpenAiAnswer=function(e){return r(this,void 0,void 0,(function(){var t,i,r,n;return a(this,(function(a){switch(a.label){case 0:return this._inProgress||""===e?[2,""]:(this._inProgress=!0,t=document.getElementById("conversations").value,o.LAppPal.printMessage(e),i={prompt:"##".concat(t+"\n\n## "+e,"\n\n"),max_tokens:300,temperature:0,frequency_penalty:0,presence_penalty:0,top_p:1,stop:["#",";"]},[4,fetch(this._openaiurl,{method:"POST",headers:{"Content-Type":"application/json","api-key":this._openaipikey},body:JSON.stringify(i)})]);case 1:return[4,a.sent().json()];case 2:return r=a.sent(),n=r.choices[0].text,o.LAppPal.printMessage(n),document.getElementById("reply").value=n,document.getElementById("conversations").value=t+"\n\n"+n,[2,n]}}))}))},e.prototype.getSpeechUrl=function(e,t){return r(this,void 0,void 0,(function(){var i,r,n,u,l;return a(this,(function(a){switch(a.label){case 0:return(i=new Headers).set("Content-Type","application/ssml+xml"),i.set("X-Microsoft-OutputFormat","riff-8khz-16bit-mono-pcm"),i.set("Ocp-Apim-Subscription-Key",this._ttsapikey),r=s.LANGUAGE_TO_VOICE_MAPPING_LIST.find((function(t){return t.voice.startsWith(e)&&!1===t.IsMale})).voice,n="<speak version='1.0' xml:lang='".concat(e,"'>\n              <voice xml:lang='").concat(e,"' xml:gender='Female' name='").concat(r,"'>\n                  ").concat(t,"\n              </voice>\n            </speak>"),[4,fetch("https://".concat(this._ttsregion,".tts.speech.microsoft.com/cognitiveservices/v1"),{method:"POST",headers:i,body:n})];case 1:return[4,a.sent().blob()];case 2:return u=a.sent(),l=window.URL.createObjectURL(u),document.getElementById("voice").src=l,o.LAppPal.printMessage("Load Text to Speech url"),this._inProgress=!1,[2,l]}}))}))},e.prototype.getTextFromSpeech=function(e,t){return r(this,void 0,void 0,(function(){var i,r;return a(this,(function(a){switch(a.label){case 0:return o.LAppPal.printMessage(e),(i=new Headers).set("Accept","application/json;text/xml"),i.set("Content-Type","audio/wav; codecs=audio/pcm; samplerate=16000"),i.set("Ocp-Apim-Subscription-Key",this._ttsapikey),[4,(0,n.getWaveBlob)(t,!1)];case 1:return r=a.sent(),[4,fetch("https://".concat(this._ttsregion,".stt.speech.microsoft.com/speech/recognition/conversation/cognitiveservices/v1?language=").concat(e),{method:"POST",headers:i,body:r})];case 2:return[4,a.sent().json()];case 3:return[2,a.sent().DisplayText]}}))}))},e}();t.AzureAi=u},1780:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LANGUAGE_TO_VOICE_MAPPING_LIST=void 0,t.LANGUAGE_TO_VOICE_MAPPING_LIST=[{voice:"af-ZA-AdriNeural",IsMale:!1},{voice:"af-ZA-WillemNeural",IsMale:!0},{voice:"am-ET-AmehaNeural",IsMale:!0},{voice:"am-ET-MekdesNeural",IsMale:!1},{voice:"ar-AE-FatimaNeural",IsMale:!1},{voice:"ar-AE-HamdanNeural",IsMale:!0},{voice:"ar-BH-AliNeural",IsMale:!0},{voice:"ar-BH-LailaNeural",IsMale:!1},{voice:"ar-DZ-AminaNeural",IsMale:!1},{voice:"ar-DZ-IsmaelNeural",IsMale:!0},{voice:"ar-EG-SalmaNeural",IsMale:!1},{voice:"ar-EG-ShakirNeural",IsMale:!0},{voice:"ar-IQ-BasselNeural",IsMale:!0},{voice:"ar-IQ-RanaNeural",IsMale:!1},{voice:"ar-JO-SanaNeural",IsMale:!1},{voice:"ar-JO-TaimNeural",IsMale:!0},{voice:"ar-KW-FahedNeural",IsMale:!0},{voice:"ar-KW-NouraNeural",IsMale:!1},{voice:"ar-LB-LaylaNeural",IsMale:!1},{voice:"ar-LB-RamiNeural",IsMale:!0},{voice:"ar-LY-ImanNeural",IsMale:!1},{voice:"ar-LY-OmarNeural",IsMale:!0},{voice:"ar-MA-JamalNeural",IsMale:!0},{voice:"ar-MA-MounaNeural",IsMale:!1},{voice:"ar-OM-AbdullahNeural",IsMale:!0},{voice:"ar-OM-AyshaNeural",IsMale:!1},{voice:"ar-QA-AmalNeural",IsMale:!1},{voice:"ar-QA-MoazNeural",IsMale:!0},{voice:"ar-SA-HamedNeural",IsMale:!0},{voice:"ar-SA-ZariyahNeural",IsMale:!1},{voice:"ar-SY-AmanyNeural",IsMale:!1},{voice:"ar-SY-LaithNeural",IsMale:!0},{voice:"ar-TN-HediNeural",IsMale:!0},{voice:"ar-TN-ReemNeural",IsMale:!1},{voice:"ar-YE-MaryamNeural",IsMale:!1},{voice:"ar-YE-SalehNeural",IsMale:!0},{voice:"az-AZ-BabekNeural",IsMale:!0},{voice:"az-AZ-BanuNeural",IsMale:!1},{voice:"bg-BG-BorislavNeural",IsMale:!0},{voice:"bg-BG-KalinaNeural",IsMale:!1},{voice:"bn-BD-NabanitaNeural",IsMale:!1},{voice:"bn-BD-PradeepNeural",IsMale:!0},{voice:"bn-IN-BashkarNeural",IsMale:!0},{voice:"bn-IN-TanishaaNeural",IsMale:!1},{voice:"bs-BA-GoranNeural",IsMale:!0},{voice:"bs-BA-VesnaNeural",IsMale:!1},{voice:"ca-ES-AlbaNeural",IsMale:!1},{voice:"ca-ES-EnricNeural",IsMale:!0},{voice:"ca-ES-JoanaNeural",IsMale:!1},{voice:"cs-CZ-AntoninNeural",IsMale:!0},{voice:"cs-CZ-VlastaNeural",IsMale:!1},{voice:"cy-GB-AledNeural",IsMale:!0},{voice:"cy-GB-NiaNeural",IsMale:!1},{voice:"da-DK-ChristelNeural",IsMale:!1},{voice:"da-DK-JeppeNeural",IsMale:!0},{voice:"de-AT-IngridNeural",IsMale:!1},{voice:"de-AT-JonasNeural",IsMale:!0},{voice:"de-CH-JanNeural",IsMale:!0},{voice:"de-CH-LeniNeural",IsMale:!1},{voice:"de-DE-AmalaNeural",IsMale:!1},{voice:"de-DE-BerndNeural",IsMale:!0},{voice:"de-DE-ChristophNeural",IsMale:!0},{voice:"de-DE-ConradNeural",IsMale:!0},{voice:"de-DE-ElkeNeural",IsMale:!1},{voice:"de-DE-GiselaNeural",IsMale:!1},{voice:"de-DE-KasperNeural",IsMale:!0},{voice:"de-DE-KatjaNeural",IsMale:!1},{voice:"de-DE-KillianNeural",IsMale:!0},{voice:"de-DE-KlarissaNeural",IsMale:!1},{voice:"de-DE-KlausNeural",IsMale:!0},{voice:"de-DE-LouisaNeural",IsMale:!1},{voice:"de-DE-MajaNeural",IsMale:!1},{voice:"de-DE-RalfNeural",IsMale:!0},{voice:"de-DE-TanjaNeural",IsMale:!1},{voice:"el-GR-AthinaNeural",IsMale:!1},{voice:"el-GR-NestorasNeural",IsMale:!0},{voice:"en-AU-AnnetteNeural",IsMale:!1},{voice:"en-AU-CarlyNeural",IsMale:!1},{voice:"en-AU-DarrenNeural",IsMale:!0},{voice:"en-AU-DuncanNeural",IsMale:!0},{voice:"en-AU-ElsieNeural",IsMale:!1},{voice:"en-AU-FreyaNeural",IsMale:!1},{voice:"en-AU-JoanneNeural",IsMale:!1},{voice:"en-AU-KenNeural",IsMale:!0},{voice:"en-AU-KimNeural",IsMale:!1},{voice:"en-AU-NatashaNeural",IsMale:!1},{voice:"en-AU-NeilNeural",IsMale:!0},{voice:"en-AU-TimNeural",IsMale:!0},{voice:"en-AU-TinaNeural",IsMale:!1},{voice:"en-AU-WilliamNeural",IsMale:!0},{voice:"en-CA-ClaraNeural",IsMale:!1},{voice:"en-CA-LiamNeural",IsMale:!0},{voice:"en-GB-AbbiNeural",IsMale:!1},{voice:"en-GB-AlfieNeural",IsMale:!0},{voice:"en-GB-BellaNeural",IsMale:!1},{voice:"en-GB-ElliotNeural",IsMale:!0},{voice:"en-GB-EthanNeural",IsMale:!0},{voice:"en-GB-HollieNeural",IsMale:!1},{voice:"en-GB-LibbyNeural",IsMale:!1},{voice:"en-GB-MaisieNeural",IsMale:!1},{voice:"en-GB-NoahNeural",IsMale:!0},{voice:"en-GB-OliverNeural",IsMale:!0},{voice:"en-GB-OliviaNeural",IsMale:!1},{voice:"en-GB-RyanNeural",IsMale:!0},{voice:"en-GB-SoniaNeural",IsMale:!1},{voice:"en-GB-ThomasNeural",IsMale:!0},{voice:"en-HK-SamNeural",IsMale:!0},{voice:"en-HK-YanNeural",IsMale:!1},{voice:"en-IE-ConnorNeural",IsMale:!0},{voice:"en-IE-EmilyNeural",IsMale:!1},{voice:"en-IN-NeerjaNeural",IsMale:!1},{voice:"en-IN-PrabhatNeural",IsMale:!0},{voice:"en-KE-AsiliaNeural",IsMale:!1},{voice:"en-KE-ChilembaNeural",IsMale:!0},{voice:"en-NG-AbeoNeural",IsMale:!0},{voice:"en-NG-EzinneNeural",IsMale:!1},{voice:"en-NZ-MitchellNeural",IsMale:!0},{voice:"en-NZ-MollyNeural",IsMale:!1},{voice:"en-PH-JamesNeural",IsMale:!0},{voice:"en-PH-RosaNeural",IsMale:!1},{voice:"en-SG-LunaNeural",IsMale:!1},{voice:"en-SG-WayneNeural",IsMale:!0},{voice:"en-TZ-ElimuNeural",IsMale:!0},{voice:"en-TZ-ImaniNeural",IsMale:!1},{voice:"en-US-AmberNeural",IsMale:!1},{voice:"en-US-AnaNeural",IsMale:!1},{voice:"en-US-AriaNeural",IsMale:!1},{voice:"en-US-AshleyNeural",IsMale:!1},{voice:"en-US-BrandonNeural",IsMale:!0},{voice:"en-US-ChristopherNeural",IsMale:!0},{voice:"en-US-CoraNeural",IsMale:!1},{voice:"en-US-DavisNeural",IsMale:!0},{voice:"en-US-ElizabethNeural",IsMale:!1},{voice:"en-US-EricNeural",IsMale:!0},{voice:"en-US-GuyNeural",IsMale:!0},{voice:"en-US-JacobNeural",IsMale:!0},{voice:"en-US-JaneNeural",IsMale:!1},{voice:"en-US-JasonNeural",IsMale:!0},{voice:"en-US-JennyMultilingualNeural",IsMale:!1},{voice:"en-US-JennyNeural",IsMale:!1},{voice:"en-US-MichelleNeural",IsMale:!1},{voice:"en-US-MonicaNeural",IsMale:!1},{voice:"en-US-NancyNeural",IsMale:!1},{voice:"en-US-RogerNeural",IsMale:!0},{voice:"en-US-SaraNeural",IsMale:!1},{voice:"en-US-SteffanNeural",IsMale:!0},{voice:"en-US-TonyNeural",IsMale:!0},{voice:"en-ZA-LeahNeural",IsMale:!1},{voice:"en-ZA-LukeNeural",IsMale:!0},{voice:"es-AR-ElenaNeural",IsMale:!1},{voice:"es-AR-TomasNeural",IsMale:!0},{voice:"es-BO-MarceloNeural",IsMale:!0},{voice:"es-BO-SofiaNeural",IsMale:!1},{voice:"es-CL-CatalinaNeural",IsMale:!1},{voice:"es-CL-LorenzoNeural",IsMale:!0},{voice:"es-CO-GonzaloNeural",IsMale:!0},{voice:"es-CO-SalomeNeural",IsMale:!1},{voice:"es-CR-JuanNeural",IsMale:!0},{voice:"es-CR-MariaNeural",IsMale:!1},{voice:"es-CU-BelkysNeural",IsMale:!1},{voice:"es-CU-ManuelNeural",IsMale:!0},{voice:"es-DO-EmilioNeural",IsMale:!0},{voice:"es-DO-RamonaNeural",IsMale:!1},{voice:"es-EC-AndreaNeural",IsMale:!1},{voice:"es-EC-LuisNeural",IsMale:!0},{voice:"es-ES-AbrilNeural",IsMale:!1},{voice:"es-ES-AlvaroNeural",IsMale:!0},{voice:"es-ES-ArnauNeural",IsMale:!0},{voice:"es-ES-DarioNeural",IsMale:!0},{voice:"es-ES-EliasNeural",IsMale:!0},{voice:"es-ES-ElviraNeural",IsMale:!1},{voice:"es-ES-EstrellaNeural",IsMale:!1},{voice:"es-ES-IreneNeural",IsMale:!1},{voice:"es-ES-LaiaNeural",IsMale:!1},{voice:"es-ES-LiaNeural",IsMale:!1},{voice:"es-ES-NilNeural",IsMale:!0},{voice:"es-ES-SaulNeural",IsMale:!0},{voice:"es-ES-TeoNeural",IsMale:!0},{voice:"es-ES-TrianaNeural",IsMale:!1},{voice:"es-ES-VeraNeural",IsMale:!1},{voice:"es-GQ-JavierNeural",IsMale:!0},{voice:"es-GQ-TeresaNeural",IsMale:!1},{voice:"es-GT-AndresNeural",IsMale:!0},{voice:"es-GT-MartaNeural",IsMale:!1},{voice:"es-HN-CarlosNeural",IsMale:!0},{voice:"es-HN-KarlaNeural",IsMale:!1},{voice:"es-MX-BeatrizNeural",IsMale:!1},{voice:"es-MX-CandelaNeural",IsMale:!1},{voice:"es-MX-CarlotaNeural",IsMale:!1},{voice:"es-MX-CecilioNeural",IsMale:!0},{voice:"es-MX-DaliaNeural",IsMale:!1},{voice:"es-MX-GerardoNeural",IsMale:!0},{voice:"es-MX-JorgeNeural",IsMale:!0},{voice:"es-MX-LarissaNeural",IsMale:!1},{voice:"es-MX-LibertoNeural",IsMale:!0},{voice:"es-MX-LucianoNeural",IsMale:!0},{voice:"es-MX-MarinaNeural",IsMale:!1},{voice:"es-MX-NuriaNeural",IsMale:!1},{voice:"es-MX-PelayoNeural",IsMale:!0},{voice:"es-MX-RenataNeural",IsMale:!1},{voice:"es-MX-YagoNeural",IsMale:!0},{voice:"es-NI-FedericoNeural",IsMale:!0},{voice:"es-NI-YolandaNeural",IsMale:!1},{voice:"es-PA-MargaritaNeural",IsMale:!1},{voice:"es-PA-RobertoNeural",IsMale:!0},{voice:"es-PE-AlexNeural",IsMale:!0},{voice:"es-PE-CamilaNeural",IsMale:!1},{voice:"es-PR-KarinaNeural",IsMale:!1},{voice:"es-PR-VictorNeural",IsMale:!0},{voice:"es-PY-MarioNeural",IsMale:!0},{voice:"es-PY-TaniaNeural",IsMale:!1},{voice:"es-SV-LorenaNeural",IsMale:!1},{voice:"es-SV-RodrigoNeural",IsMale:!0},{voice:"es-US-AlonsoNeural",IsMale:!0},{voice:"es-US-PalomaNeural",IsMale:!1},{voice:"es-UY-MateoNeural",IsMale:!0},{voice:"es-UY-ValentinaNeural",IsMale:!1},{voice:"es-VE-PaolaNeural",IsMale:!1},{voice:"es-VE-SebastianNeural",IsMale:!0},{voice:"et-EE-AnuNeural",IsMale:!1},{voice:"et-EE-KertNeural",IsMale:!0},{voice:"eu-ES-AinhoaNeural",IsMale:!1},{voice:"eu-ES-AnderNeural",IsMale:!0},{voice:"fa-IR-DilaraNeural",IsMale:!1},{voice:"fa-IR-FaridNeural",IsMale:!0},{voice:"fi-FI-HarriNeural",IsMale:!0},{voice:"fi-FI-NooraNeural",IsMale:!1},{voice:"fi-FI-SelmaNeural",IsMale:!1},{voice:"fil-PH-AngeloNeural",IsMale:!0},{voice:"fil-PH-BlessicaNeural",IsMale:!1},{voice:"fr-BE-CharlineNeural",IsMale:!1},{voice:"fr-BE-GerardNeural",IsMale:!0},{voice:"fr-CA-AntoineNeural",IsMale:!0},{voice:"fr-CA-JeanNeural",IsMale:!0},{voice:"fr-CA-SylvieNeural",IsMale:!1},{voice:"fr-CH-ArianeNeural",IsMale:!1},{voice:"fr-CH-FabriceNeural",IsMale:!0},{voice:"fr-FR-AlainNeural",IsMale:!0},{voice:"fr-FR-BrigitteNeural",IsMale:!1},{voice:"fr-FR-CelesteNeural",IsMale:!1},{voice:"fr-FR-ClaudeNeural",IsMale:!0},{voice:"fr-FR-CoralieNeural",IsMale:!1},{voice:"fr-FR-DeniseNeural",IsMale:!1},{voice:"fr-FR-EloiseNeural",IsMale:!1},{voice:"fr-FR-HenriNeural",IsMale:!0},{voice:"fr-FR-JacquelineNeural",IsMale:!1},{voice:"fr-FR-JeromeNeural",IsMale:!0},{voice:"fr-FR-JosephineNeural",IsMale:!1},{voice:"fr-FR-MauriceNeural",IsMale:!0},{voice:"fr-FR-YvesNeural",IsMale:!0},{voice:"fr-FR-YvetteNeural",IsMale:!1},{voice:"ga-IE-ColmNeural",IsMale:!0},{voice:"ga-IE-OrlaNeural",IsMale:!1},{voice:"gl-ES-RoiNeural",IsMale:!0},{voice:"gl-ES-SabelaNeural",IsMale:!1},{voice:"gu-IN-DhwaniNeural",IsMale:!1},{voice:"gu-IN-NiranjanNeural",IsMale:!0},{voice:"he-IL-AvriNeural",IsMale:!0},{voice:"he-IL-HilaNeural",IsMale:!1},{voice:"hi-IN-MadhurNeural",IsMale:!0},{voice:"hi-IN-SwaraNeural",IsMale:!1},{voice:"hr-HR-GabrijelaNeural",IsMale:!1},{voice:"hr-HR-SreckoNeural",IsMale:!0},{voice:"hu-HU-NoemiNeural",IsMale:!1},{voice:"hu-HU-TamasNeural",IsMale:!0},{voice:"hy-AM-AnahitNeural",IsMale:!1},{voice:"hy-AM-HaykNeural",IsMale:!0},{voice:"id-ID-ArdiNeural",IsMale:!0},{voice:"id-ID-GadisNeural",IsMale:!1},{voice:"is-IS-GudrunNeural",IsMale:!1},{voice:"is-IS-GunnarNeural",IsMale:!0},{voice:"it-IT-BenignoNeural",IsMale:!0},{voice:"it-IT-CalimeroNeural",IsMale:!0},{voice:"it-IT-CataldoNeural",IsMale:!0},{voice:"it-IT-DiegoNeural",IsMale:!0},{voice:"it-IT-ElsaNeural",IsMale:!1},{voice:"it-IT-FabiolaNeural",IsMale:!1},{voice:"it-IT-FiammaNeural",IsMale:!1},{voice:"it-IT-GianniNeural",IsMale:!0},{voice:"it-IT-ImeldaNeural",IsMale:!1},{voice:"it-IT-IrmaNeural",IsMale:!1},{voice:"it-IT-IsabellaNeural",IsMale:!1},{voice:"it-IT-LisandroNeural",IsMale:!0},{voice:"it-IT-PalmiraNeural",IsMale:!1},{voice:"it-IT-PierinaNeural",IsMale:!1},{voice:"it-IT-RinaldoNeural",IsMale:!0},{voice:"ja-JP-AoiNeural",IsMale:!1},{voice:"ja-JP-DaichiNeural",IsMale:!0},{voice:"ja-JP-KeitaNeural",IsMale:!0},{voice:"ja-JP-MayuNeural",IsMale:!1},{voice:"ja-JP-NanamiNeural",IsMale:!1},{voice:"ja-JP-NaokiNeural",IsMale:!0},{voice:"ja-JP-ShioriNeural",IsMale:!1},{voice:"jv-ID-DimasNeural",IsMale:!0},{voice:"jv-ID-SitiNeural",IsMale:!1},{voice:"ka-GE-EkaNeural",IsMale:!1},{voice:"ka-GE-GiorgiNeural",IsMale:!0},{voice:"kk-KZ-AigulNeural",IsMale:!1},{voice:"kk-KZ-DauletNeural",IsMale:!0},{voice:"km-KH-PisethNeural",IsMale:!0},{voice:"km-KH-SreymomNeural",IsMale:!1},{voice:"kn-IN-GaganNeural",IsMale:!0},{voice:"kn-IN-SapnaNeural",IsMale:!1},{voice:"ko-KR-BongJinNeural",IsMale:!0},{voice:"ko-KR-GookMinNeural",IsMale:!0},{voice:"ko-KR-InJoonNeural",IsMale:!0},{voice:"ko-KR-JiMinNeural",IsMale:!1},{voice:"ko-KR-SeoHyeonNeural",IsMale:!1},{voice:"ko-KR-SoonBokNeural",IsMale:!1},{voice:"ko-KR-SunHiNeural",IsMale:!1},{voice:"ko-KR-YuJinNeural",IsMale:!1},{voice:"lo-LA-ChanthavongNeural",IsMale:!0},{voice:"lo-LA-KeomanyNeural",IsMale:!1},{voice:"lt-LT-LeonasNeural",IsMale:!0},{voice:"lt-LT-OnaNeural",IsMale:!1},{voice:"lv-LV-EveritaNeural",IsMale:!1},{voice:"lv-LV-NilsNeural",IsMale:!0},{voice:"mk-MK-AleksandarNeural",IsMale:!0},{voice:"mk-MK-MarijaNeural",IsMale:!1},{voice:"ml-IN-MidhunNeural",IsMale:!0},{voice:"ml-IN-SobhanaNeural",IsMale:!1},{voice:"mn-MN-BataaNeural",IsMale:!0},{voice:"mn-MN-YesuiNeural",IsMale:!1},{voice:"mr-IN-AarohiNeural",IsMale:!1},{voice:"mr-IN-ManoharNeural",IsMale:!0},{voice:"ms-MY-OsmanNeural",IsMale:!0},{voice:"ms-MY-YasminNeural",IsMale:!1},{voice:"mt-MT-GraceNeural",IsMale:!1},{voice:"mt-MT-JosephNeural",IsMale:!0},{voice:"my-MM-NilarNeural",IsMale:!1},{voice:"my-MM-ThihaNeural",IsMale:!0},{voice:"nb-NO-FinnNeural",IsMale:!0},{voice:"nb-NO-IselinNeural",IsMale:!1},{voice:"nb-NO-PernilleNeural",IsMale:!1},{voice:"ne-NP-HemkalaNeural",IsMale:!1},{voice:"ne-NP-SagarNeural",IsMale:!0},{voice:"nl-BE-ArnaudNeural",IsMale:!0},{voice:"nl-BE-DenaNeural",IsMale:!1},{voice:"nl-NL-ColetteNeural",IsMale:!1},{voice:"nl-NL-FennaNeural",IsMale:!1},{voice:"nl-NL-MaartenNeural",IsMale:!0},{voice:"pl-PL-AgnieszkaNeural",IsMale:!1},{voice:"pl-PL-MarekNeural",IsMale:!0},{voice:"pl-PL-ZofiaNeural",IsMale:!1},{voice:"ps-AF-GulNawazNeural",IsMale:!0},{voice:"ps-AF-LatifaNeural",IsMale:!1},{voice:"pt-BR-AntonioNeural",IsMale:!0},{voice:"pt-BR-BrendaNeural",IsMale:!1},{voice:"pt-BR-DonatoNeural",IsMale:!0},{voice:"pt-BR-ElzaNeural",IsMale:!1},{voice:"pt-BR-FabioNeural",IsMale:!0},{voice:"pt-BR-FranciscaNeural",IsMale:!1},{voice:"pt-BR-GiovannaNeural",IsMale:!1},{voice:"pt-BR-HumbertoNeural",IsMale:!0},{voice:"pt-BR-JulioNeural",IsMale:!0},{voice:"pt-BR-LeilaNeural",IsMale:!1},{voice:"pt-BR-LeticiaNeural",IsMale:!1},{voice:"pt-BR-ManuelaNeural",IsMale:!1},{voice:"pt-BR-NicolauNeural",IsMale:!0},{voice:"pt-BR-ValerioNeural",IsMale:!0},{voice:"pt-BR-YaraNeural",IsMale:!1},{voice:"pt-PT-DuarteNeural",IsMale:!0},{voice:"pt-PT-FernandaNeural",IsMale:!1},{voice:"pt-PT-RaquelNeural",IsMale:!1},{voice:"ro-RO-AlinaNeural",IsMale:!1},{voice:"ro-RO-EmilNeural",IsMale:!0},{voice:"ru-RU-DariyaNeural",IsMale:!1},{voice:"ru-RU-DmitryNeural",IsMale:!0},{voice:"ru-RU-SvetlanaNeural",IsMale:!1},{voice:"si-LK-SameeraNeural",IsMale:!0},{voice:"si-LK-ThiliniNeural",IsMale:!1},{voice:"sk-SK-LukasNeural",IsMale:!0},{voice:"sk-SK-ViktoriaNeural",IsMale:!1},{voice:"sl-SI-PetraNeural",IsMale:!1},{voice:"sl-SI-RokNeural",IsMale:!0},{voice:"so-SO-MuuseNeural",IsMale:!0},{voice:"so-SO-UbaxNeural",IsMale:!1},{voice:"sq-AL-AnilaNeural",IsMale:!1},{voice:"sq-AL-IlirNeural",IsMale:!0},{voice:"sr-RS-NicholasNeural",IsMale:!0},{voice:"sr-RS-SophieNeural",IsMale:!1},{voice:"su-ID-JajangNeural",IsMale:!0},{voice:"su-ID-TutiNeural",IsMale:!1},{voice:"sv-SE-HilleviNeural",IsMale:!1},{voice:"sv-SE-MattiasNeural",IsMale:!0},{voice:"sv-SE-SofieNeural",IsMale:!1},{voice:"sw-KE-RafikiNeural",IsMale:!0},{voice:"sw-KE-ZuriNeural",IsMale:!1},{voice:"sw-TZ-DaudiNeural",IsMale:!0},{voice:"sw-TZ-RehemaNeural",IsMale:!1},{voice:"ta-IN-PallaviNeural",IsMale:!1},{voice:"ta-IN-ValluvarNeural",IsMale:!0},{voice:"ta-LK-KumarNeural",IsMale:!0},{voice:"ta-LK-SaranyaNeural",IsMale:!1},{voice:"ta-MY-KaniNeural",IsMale:!1},{voice:"ta-MY-SuryaNeural",IsMale:!0},{voice:"ta-SG-AnbuNeural",IsMale:!0},{voice:"ta-SG-VenbaNeural",IsMale:!1},{voice:"te-IN-MohanNeural",IsMale:!0},{voice:"te-IN-ShrutiNeural",IsMale:!1},{voice:"th-TH-AcharaNeural",IsMale:!1},{voice:"th-TH-NiwatNeural",IsMale:!0},{voice:"th-TH-PremwadeeNeural",IsMale:!1},{voice:"tr-TR-AhmetNeural",IsMale:!0},{voice:"tr-TR-EmelNeural",IsMale:!1},{voice:"uk-UA-OstapNeural",IsMale:!0},{voice:"uk-UA-PolinaNeural",IsMale:!1},{voice:"ur-IN-GulNeural",IsMale:!1},{voice:"ur-IN-SalmanNeural",IsMale:!0},{voice:"ur-PK-AsadNeural",IsMale:!0},{voice:"ur-PK-UzmaNeural",IsMale:!1},{voice:"uz-UZ-MadinaNeural",IsMale:!1},{voice:"uz-UZ-SardorNeural",IsMale:!0},{voice:"vi-VN-HoaiMyNeural",IsMale:!1},{voice:"vi-VN-NamMinhNeural",IsMale:!0},{voice:"wuu-CN-XiaotongNeural",IsMale:!1},{voice:"wuu-CN-YunzheNeural",IsMale:!0},{voice:"yue-CN-XiaoMinNeural",IsMale:!1},{voice:"yue-CN-YunSongNeural",IsMale:!0},{voice:"zh-CN-XiaochenNeural",IsMale:!1},{voice:"zh-CN-XiaohanNeural",IsMale:!1},{voice:"zh-CN-XiaomengNeural",IsMale:!1},{voice:"zh-CN-XiaomoNeural",IsMale:!1},{voice:"zh-CN-XiaoqiuNeural",IsMale:!1},{voice:"zh-CN-XiaoruiNeural",IsMale:!1},{voice:"zh-CN-XiaoshuangNeural",IsMale:!1},{voice:"zh-CN-XiaoxiaoNeural",IsMale:!1},{voice:"zh-CN-XiaoxuanNeural",IsMale:!1},{voice:"zh-CN-XiaoyanNeural",IsMale:!1},{voice:"zh-CN-XiaoyiNeural",IsMale:!1},{voice:"zh-CN-XiaoyouNeural",IsMale:!1},{voice:"zh-CN-XiaozhenNeural",IsMale:!1},{voice:"zh-CN-YunfengNeural",IsMale:!0},{voice:"zh-CN-YunhaoNeural",IsMale:!0},{voice:"zh-CN-YunjianNeural",IsMale:!0},{voice:"zh-CN-YunxiaNeural",IsMale:!0},{voice:"zh-CN-YunxiNeural",IsMale:!0},{voice:"zh-CN-YunyangNeural",IsMale:!0},{voice:"zh-CN-YunyeNeural",IsMale:!0},{voice:"zh-CN-YunzeNeural",IsMale:!0},{voice:"zh-CN-henan-YundengNeural",IsMale:!0},{voice:"zh-CN-liaoning-XiaobeiNeural",IsMale:!1},{voice:"zh-CN-shaanxi-XiaoniNeural",IsMale:!1},{voice:"zh-CN-shandong-YunxiangNeural",IsMale:!0},{voice:"zh-CN-sichuan-YunxiNeural",IsMale:!0},{voice:"zh-HK-HiuGaaiNeural",IsMale:!1},{voice:"zh-HK-HiuMaanNeural",IsMale:!1},{voice:"zh-HK-WanLungNeural",IsMale:!0},{voice:"zh-TW-HsiaoChenNeural",IsMale:!1},{voice:"zh-TW-HsiaoYuNeural",IsMale:!1},{voice:"zh-TW-YunJheNeural",IsMale:!0},{voice:"zu-ZA-ThandoNeural",IsMale:!1},{voice:"zu-ZA-ThembaNeural",IsMale:!0}]},9556:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RenderTargetHeight=t.RenderTargetWidth=t.CubismLoggingLevel=t.DebugTouchLogEnable=t.DebugLogEnable=t.PriorityForce=t.PriorityNormal=t.PriorityIdle=t.PriorityNone=t.HitAreaNameBody=t.HitAreaNameHead=t.MotionGroupTapBody=t.MotionGroupIdle=t.ModelDirSize=t.ModelDir=t.PowerImageName=t.GearImageName=t.BackImageName=t.ResourcesPath=t.ViewLogicalMaxTop=t.ViewLogicalMaxBottom=t.ViewLogicalMaxRight=t.ViewLogicalMaxLeft=t.ViewLogicalTop=t.ViewLogicalBottom=t.ViewLogicalRight=t.ViewLogicalLeft=t.ViewMinScale=t.ViewMaxScale=t.ViewScale=t.CanvasSize=void 0;var r=i(1671);t.CanvasSize="auto",t.ViewScale=1,t.ViewMaxScale=2,t.ViewMinScale=.8,t.ViewLogicalLeft=-1,t.ViewLogicalRight=1,t.ViewLogicalBottom=-1,t.ViewLogicalTop=1,t.ViewLogicalMaxLeft=-2,t.ViewLogicalMaxRight=2,t.ViewLogicalMaxBottom=-2,t.ViewLogicalMaxTop=2,t.ResourcesPath="./Resources/",t.BackImageName="back_class_normal.png",t.GearImageName="icon_gear.png",t.PowerImageName="CloseNormal.png",t.ModelDir=["Haru","Hiyori","Mark","Natori","Rice","Mao"],t.ModelDirSize=t.ModelDir.length,t.MotionGroupIdle="Idle",t.MotionGroupTapBody="TapBody",t.HitAreaNameHead="Head",t.HitAreaNameBody="Body",t.PriorityNone=0,t.PriorityIdle=1,t.PriorityNormal=2,t.PriorityForce=3,t.DebugLogEnable=!0,t.DebugTouchLogEnable=!1,t.CubismLoggingLevel=r.LogLevel.LogLevel_Verbose,t.RenderTargetWidth=1900,t.RenderTargetHeight=1e3},7551:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LAppDelegate=t.frameBuffer=t.gl=t.s_instance=t.canvas=void 0;var n=i(1671),s=o(i(9556)),u=i(6424),l=i(1986),c=i(3938),h=i(4585);t.canvas=null,t.s_instance=null,t.gl=null,t.frameBuffer=null;var p=function(){function e(){this._captured=!1,this._mouseX=0,this._mouseY=0,this._isEnd=!1,this._cubismOption=new n.Option,this._view=new h.LAppView,this._textureManager=new c.LAppTextureManager}return e.getInstance=function(){return null==t.s_instance&&(t.s_instance=new e),t.s_instance},e.releaseInstance=function(){null!=t.s_instance&&t.s_instance.release(),t.s_instance=null},e.prototype.initialize=function(){return t.canvas=document.createElement("canvas"),"auto"===s.CanvasSize?this._resizeCanvas():(t.canvas.width=s.CanvasSize.width,t.canvas.height=s.CanvasSize.height),t.gl=t.canvas.getContext("webgl")||t.canvas.getContext("experimental-webgl"),t.gl?(document.body.appendChild(t.canvas),t.frameBuffer||(t.frameBuffer=t.gl.getParameter(t.gl.FRAMEBUFFER_BINDING)),t.gl.enable(t.gl.BLEND),t.gl.blendFunc(t.gl.SRC_ALPHA,t.gl.ONE_MINUS_SRC_ALPHA),"ontouchend"in t.canvas?(t.canvas.ontouchstart=_,t.canvas.ontouchmove=f,t.canvas.ontouchend=y,t.canvas.ontouchcancel=v):(t.canvas.onmousedown=d,t.canvas.onmousemove=g,t.canvas.onmouseup=m),this._view.initialize(),this.initializeCubism(),!0):(alert("Cannot initialize WebGL. This browser does not support."),t.gl=null,document.body.innerHTML="This browser does not support the <code>&lt;canvas&gt;</code> element.",!1)},e.prototype.onResize=function(){this._resizeCanvas(),this._view.initialize(),this._view.initializeSprite();var e=[0,0,t.canvas.width,t.canvas.height];t.gl.viewport(e[0],e[1],e[2],e[3])},e.prototype.release=function(){this._textureManager.release(),this._textureManager=null,this._view.release(),this._view=null,u.LAppLive2DManager.releaseInstance(),n.CubismFramework.dispose()},e.prototype.run=function(){var e=this,i=function(){null!=t.s_instance&&(l.LAppPal.updateTime(),t.gl.clearColor(0,0,0,1),t.gl.enable(t.gl.DEPTH_TEST),t.gl.depthFunc(t.gl.LEQUAL),t.gl.clear(t.gl.COLOR_BUFFER_BIT|t.gl.DEPTH_BUFFER_BIT),t.gl.clearDepth(1),t.gl.enable(t.gl.BLEND),t.gl.blendFunc(t.gl.SRC_ALPHA,t.gl.ONE_MINUS_SRC_ALPHA),e._view.render(),requestAnimationFrame(i))};i()},e.prototype.createShader=function(){var e=t.gl.createShader(t.gl.VERTEX_SHADER);if(null==e)return l.LAppPal.printMessage("failed to create vertexShader"),null;t.gl.shaderSource(e,"precision mediump float;attribute vec3 position;attribute vec2 uv;varying vec2 vuv;void main(void){   gl_Position = vec4(position, 1.0);   vuv = uv;}"),t.gl.compileShader(e);var i=t.gl.createShader(t.gl.FRAGMENT_SHADER);if(null==i)return l.LAppPal.printMessage("failed to create fragmentShader"),null;t.gl.shaderSource(i,"precision mediump float;varying vec2 vuv;uniform sampler2D texture;void main(void){   gl_FragColor = texture2D(texture, vuv);}"),t.gl.compileShader(i);var r=t.gl.createProgram();return t.gl.attachShader(r,e),t.gl.attachShader(r,i),t.gl.deleteShader(e),t.gl.deleteShader(i),t.gl.linkProgram(r),t.gl.useProgram(r),r},e.prototype.getView=function(){return this._view},e.prototype.getTextureManager=function(){return this._textureManager},e.prototype.startVoiceConversation=function(e,t){u.LAppLive2DManager.getInstance().startVoiceConversation(e,t)},e.prototype.initializeCubism=function(){this._cubismOption.logFunction=l.LAppPal.printMessage,this._cubismOption.loggingLevel=s.CubismLoggingLevel,n.CubismFramework.startUp(this._cubismOption),n.CubismFramework.initialize(),u.LAppLive2DManager.getInstance(),l.LAppPal.updateTime(),this._view.initializeSprite()},e.prototype._resizeCanvas=function(){t.canvas.width=window.innerWidth,t.canvas.height=window.innerHeight},e}();function d(e){if(p.getInstance()._view){p.getInstance()._captured=!0;var t=e.pageX,i=e.pageY;p.getInstance()._view.onTouchesBegan(t,i)}else l.LAppPal.printMessage("view notfound")}function g(e){if(p.getInstance()._captured)if(p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.clientX-t.left,r=e.clientY-t.top;p.getInstance()._view.onTouchesMoved(i,r)}else l.LAppPal.printMessage("view notfound")}function m(e){if(p.getInstance()._captured=!1,p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.clientX-t.left,r=e.clientY-t.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}function _(e){if(p.getInstance()._view){p.getInstance()._captured=!0;var t=e.changedTouches[0].pageX,i=e.changedTouches[0].pageY;p.getInstance()._view.onTouchesBegan(t,i)}else l.LAppPal.printMessage("view notfound")}function f(e){if(p.getInstance()._captured)if(p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.changedTouches[0].clientX-t.left,r=e.changedTouches[0].clientY-t.top;p.getInstance()._view.onTouchesMoved(i,r)}else l.LAppPal.printMessage("view notfound")}function y(e){if(p.getInstance()._captured=!1,p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.changedTouches[0].clientX-t.left,r=e.changedTouches[0].clientY-t.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}function v(e){if(p.getInstance()._captured=!1,p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.changedTouches[0].clientX-t.left,r=e.changedTouches[0].clientY-t.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}t.LAppDelegate=p},6424:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LAppLive2DManager=t.s_instance=void 0;var n=i(1149),s=i(5760),u=i(8046),l=o(i(9556)),c=i(7551),h=i(398),p=i(1986);t.s_instance=null;var d=function(){function e(){this._finishedMotion=function(e){p.LAppPal.printMessage("Motion Finished:"),console.log(e)},this._viewMatrix=new n.CubismMatrix44,this._models=new s.csmVector,this._sceneIndex=0,this.changeScene(this._sceneIndex)}return e.getInstance=function(){return null==t.s_instance&&(t.s_instance=new e),t.s_instance},e.releaseInstance=function(){null!=t.s_instance&&(t.s_instance=void 0),t.s_instance=null},e.prototype.getModel=function(e){return e<this._models.getSize()?this._models.at(e):null},e.prototype.releaseAllModel=function(){for(var e=0;e<this._models.getSize();e++)this._models.at(e).release(),this._models.set(e,null);this._models.clear()},e.prototype.onDrag=function(e,t){for(var i=0;i<this._models.getSize();i++){var r=this.getModel(i);r&&r.setDragging(e,t)}},e.prototype.onTap=function(e,t){var i=this;l.DebugLogEnable&&p.LAppPal.printMessage("[APP]tap point: {x: ".concat(e.toFixed(2)," y: ").concat(t.toFixed(2),"}"));for(var r=function(r){if(a._models.at(r).hitTest(l.HitAreaNameHead,e,t))l.DebugLogEnable&&p.LAppPal.printMessage("[APP]hit area: [".concat(l.HitAreaNameHead,"]")),a._models.at(r).setRandomExpression();else if(a._models.at(r).hitTest(l.HitAreaNameBody,e,t)){l.DebugLogEnable&&p.LAppPal.printMessage("[APP]hit area: [".concat(l.HitAreaNameBody,"]"));var o=document.getElementById("prompt").value,n=document.getElementById("language").value,s=new u.AzureAi;s.getOpenAiAnswer(o).then((function(e){return s.getSpeechUrl(n,e)})).then((function(e){i._models.at(r)._wavFileHandler.loadWavFile(e),i._models.at(r).startRandomMotion(l.MotionGroupTapBody,l.PriorityNormal,i._finishedMotion)}))}},a=this,o=0;o<this._models.getSize();o++)r(o)},e.prototype.startVoiceConversation=function(e,t){for(var i=this,r=function(r){if(l.DebugLogEnable){p.LAppPal.printMessage("startConversation");var a=new u.AzureAi;a.getTextFromSpeech(e,t).then((function(e){return document.getElementById("prompt").value=e,a.getOpenAiAnswer(e)})).then((function(t){return a.getSpeechUrl(e,t)})).then((function(e){i._models.at(r)._wavFileHandler.loadWavFile(e),i._models.at(r).startRandomMotion(l.MotionGroupTapBody,l.PriorityNormal,i._finishedMotion)}))}},a=0;a<this._models.getSize();a++)r(a)},e.prototype.onUpdate=function(){for(var e=c.canvas.width,t=c.canvas.height,i=this._models.getSize(),r=0;r<i;++r){var a=new n.CubismMatrix44,o=this.getModel(r);o.getModel()&&(o.getModel().getCanvasWidth()>1&&e<t?(o.getModelMatrix().setWidth(2),a.scale(1,e/t)):a.scale(t/e,1),null!=this._viewMatrix&&a.multiplyByMatrix(this._viewMatrix)),o.update(),o.draw(a)}},e.prototype.nextScene=function(){var e=(this._sceneIndex+1)%l.ModelDirSize;this.changeScene(e)},e.prototype.changeScene=function(e){this._sceneIndex=e,l.DebugLogEnable&&p.LAppPal.printMessage("[APP]model index: ".concat(this._sceneIndex));var t=l.ModelDir[e],i=l.ResourcesPath+t+"/",r=l.ModelDir[e];r+=".model3.json",this.releaseAllModel(),this._models.pushBack(new h.LAppModel),this._models.at(0).loadAssets(i,r)},e.prototype.setViewMatrix=function(e){for(var t=0;t<16;t++)this._viewMatrix.getArray()[t]=e.getArray()[t]},e}();t.LAppLive2DManager=d},398:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LAppModel=void 0,i(7147);var u,l=i(7564),c=i(9462),h=i(5644),p=i(6325),d=i(1671),g=i(8385),m=i(8855),_=i(2928),f=i(502),y=i(5760),v=i(1073),b=s(i(9556)),M=i(7551),C=i(1986),S=i(5364);!function(e){e[e.LoadAssets=0]="LoadAssets",e[e.LoadModel=1]="LoadModel",e[e.WaitLoadModel=2]="WaitLoadModel",e[e.LoadExpression=3]="LoadExpression",e[e.WaitLoadExpression=4]="WaitLoadExpression",e[e.LoadPhysics=5]="LoadPhysics",e[e.WaitLoadPhysics=6]="WaitLoadPhysics",e[e.LoadPose=7]="LoadPose",e[e.WaitLoadPose=8]="WaitLoadPose",e[e.SetupEyeBlink=9]="SetupEyeBlink",e[e.SetupBreath=10]="SetupBreath",e[e.LoadUserData=11]="LoadUserData",e[e.WaitLoadUserData=12]="WaitLoadUserData",e[e.SetupEyeBlinkIds=13]="SetupEyeBlinkIds",e[e.SetupLipSyncIds=14]="SetupLipSyncIds",e[e.SetupLayout=15]="SetupLayout",e[e.LoadMotion=16]="LoadMotion",e[e.WaitLoadMotion=17]="WaitLoadMotion",e[e.CompleteInitialize=18]="CompleteInitialize",e[e.CompleteSetupModel=19]="CompleteSetupModel",e[e.LoadTexture=20]="LoadTexture",e[e.WaitLoadTexture=21]="WaitLoadTexture",e[e.CompleteSetup=22]="CompleteSetup"}(u||(u={}));var P=function(e){function t(){var t=e.call(this)||this;return t._modelSetting=null,t._modelHomeDir=null,t._userTimeSeconds=0,t._eyeBlinkIds=new y.csmVector,t._lipSyncIds=new y.csmVector,t._motions=new f.csmMap,t._expressions=new f.csmMap,t._hitArea=new y.csmVector,t._userArea=new y.csmVector,t._idParamAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleX),t._idParamAngleY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleY),t._idParamAngleZ=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleZ),t._idParamEyeBallX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallX),t._idParamEyeBallY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallY),t._idParamBodyAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBodyAngleX),t._state=u.LoadAssets,t._expressionCount=0,t._textureCount=0,t._motionCount=0,t._allMotionCount=0,t._wavFileHandler=new S.LAppWavFileHandler,t}return a(t,e),t.prototype.loadAssets=function(e,t){var i=this;this._modelHomeDir=e,fetch("".concat(this._modelHomeDir).concat(t)).then((function(e){return e.arrayBuffer()})).then((function(e){var t=new c.CubismModelSettingJson(e,e.byteLength);i._state=u.LoadModel,i.setupModel(t)}))},t.prototype.setupModel=function(e){var t=this;if(this._updating=!0,this._initialized=!1,this._modelSetting=e,""!=this._modelSetting.getModelFileName()){var i=this._modelSetting.getModelFileName();fetch("".concat(this._modelHomeDir).concat(i)).then((function(e){return e.arrayBuffer()})).then((function(e){t.loadModel(e),t._state=u.LoadExpression,r()})),this._state=u.WaitLoadModel}else C.LAppPal.printMessage("Model data does not exist.");var r=function(){if(t._modelSetting.getExpressionCount()>0){for(var e=t._modelSetting.getExpressionCount(),i=function(i){var r=t._modelSetting.getExpressionName(i),o=t._modelSetting.getExpressionFileName(i);fetch("".concat(t._modelHomeDir).concat(o)).then((function(e){return e.arrayBuffer()})).then((function(i){var o=t.loadExpression(i,i.byteLength,r);null!=t._expressions.getValue(r)&&(m.ACubismMotion.delete(t._expressions.getValue(r)),t._expressions.setValue(r,null)),t._expressions.setValue(r,o),t._expressionCount++,t._expressionCount>=e&&(t._state=u.LoadPhysics,a())}))},r=0;r<e;r++)i(r);t._state=u.WaitLoadExpression}else t._state=u.LoadPhysics,a()},a=function(){if(""!=t._modelSetting.getPhysicsFileName()){var e=t._modelSetting.getPhysicsFileName();fetch("".concat(t._modelHomeDir).concat(e)).then((function(e){return e.arrayBuffer()})).then((function(e){t.loadPhysics(e,e.byteLength),t._state=u.LoadPose,o()})),t._state=u.WaitLoadPhysics}else t._state=u.LoadPose,o()},o=function(){if(""!=t._modelSetting.getPoseFileName()){var e=t._modelSetting.getPoseFileName();fetch("".concat(t._modelHomeDir).concat(e)).then((function(e){return e.arrayBuffer()})).then((function(e){t.loadPose(e,e.byteLength),t._state=u.SetupEyeBlink,n()})),t._state=u.WaitLoadPose}else t._state=u.SetupEyeBlink,n()},n=function(){t._modelSetting.getEyeBlinkParameterCount()>0&&(t._eyeBlink=p.CubismEyeBlink.create(t._modelSetting),t._state=u.SetupBreath),s()},s=function(){t._breath=h.CubismBreath.create();var e=new y.csmVector;e.pushBack(new h.BreathParameterData(t._idParamAngleX,0,15,6.5345,.5)),e.pushBack(new h.BreathParameterData(t._idParamAngleY,0,8,3.5345,.5)),e.pushBack(new h.BreathParameterData(t._idParamAngleZ,0,10,5.5345,.5)),e.pushBack(new h.BreathParameterData(t._idParamBodyAngleX,0,4,15.5345,.5)),e.pushBack(new h.BreathParameterData(d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBreath),.5,.5,3.2345,1)),t._breath.setParameters(e),t._state=u.LoadUserData,c()},c=function(){if(""!=t._modelSetting.getUserDataFile()){var e=t._modelSetting.getUserDataFile();fetch("".concat(t._modelHomeDir).concat(e)).then((function(e){return e.arrayBuffer()})).then((function(e){t.loadUserData(e,e.byteLength),t._state=u.SetupEyeBlinkIds,g()})),t._state=u.WaitLoadUserData}else t._state=u.SetupEyeBlinkIds,g()},g=function(){for(var e=t._modelSetting.getEyeBlinkParameterCount(),i=0;i<e;++i)t._eyeBlinkIds.pushBack(t._modelSetting.getEyeBlinkParameterId(i));t._state=u.SetupLipSyncIds,_()},_=function(){for(var e=t._modelSetting.getLipSyncParameterCount(),i=0;i<e;++i)t._lipSyncIds.pushBack(t._modelSetting.getLipSyncParameterId(i));t._state=u.SetupLayout,b()},b=function(){var e=new f.csmMap;null!=t._modelSetting&&null!=t._modelMatrix?(t._modelSetting.getLayoutMap(e),t._modelMatrix.setupFromLayout(e),t._state=u.LoadMotion,S()):(0,v.CubismLogError)("Failed to setupLayout().")},S=function(){t._state=u.WaitLoadMotion,t._model.saveParameters(),t._allMotionCount=0,t._motionCount=0;for(var e=[],i=t._modelSetting.getMotionGroupCount(),r=0;r<i;r++)e[r]=t._modelSetting.getMotionGroupName(r),t._allMotionCount+=t._modelSetting.getMotionCount(e[r]);for(r=0;r<i;r++)t.preLoadMotionGroup(e[r]);0==i&&(t._state=u.LoadTexture,t._motionManager.stopAllMotions(),t._updating=!1,t._initialized=!0,t.createRenderer(),t.setupTextures(),t.getRenderer().startUp(M.gl))}},t.prototype.setupTextures=function(){var e=this;if(this._state==u.LoadTexture){for(var t=this._modelSetting.getTextureCount(),i=function(i){if(""==r._modelSetting.getTextureFileName(i))return console.log("getTextureFileName null"),"continue";var a=r._modelSetting.getTextureFileName(i);a=r._modelHomeDir+a,M.LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(a,!0,(function(r){e.getRenderer().bindTexture(i,r.id),e._textureCount++,e._textureCount>=t&&(e._state=u.CompleteSetup)})),r.getRenderer().setIsPremultipliedAlpha(!0)},r=this,a=0;a<t;a++)i(a);this._state=u.WaitLoadTexture}},t.prototype.reloadRenderer=function(){this.deleteRenderer(),this.createRenderer(),this.setupTextures()},t.prototype.update=function(){if(this._state==u.CompleteSetup){var e=C.LAppPal.getDeltaTime();this._userTimeSeconds+=e,this._dragManager.update(e),this._dragX=this._dragManager.getX(),this._dragY=this._dragManager.getY();var t=!1;if(this._model.loadParameters(),this._motionManager.isFinished()?this.startRandomMotion(b.MotionGroupIdle,b.PriorityIdle):t=this._motionManager.updateMotion(this._model,e),this._model.saveParameters(),t||null!=this._eyeBlink&&this._eyeBlink.updateParameters(this._model,e),null!=this._expressionManager&&this._expressionManager.updateMotion(this._model,e),this._model.addParameterValueById(this._idParamAngleX,30*this._dragX),this._model.addParameterValueById(this._idParamAngleY,30*this._dragY),this._model.addParameterValueById(this._idParamAngleZ,this._dragX*this._dragY*-30),this._model.addParameterValueById(this._idParamBodyAngleX,10*this._dragX),this._model.addParameterValueById(this._idParamEyeBallX,this._dragX),this._model.addParameterValueById(this._idParamEyeBallY,this._dragY),null!=this._breath&&this._breath.updateParameters(this._model,e),null!=this._physics&&this._physics.evaluate(this._model,e),this._lipsync){var i;this._wavFileHandler.update(e),i=this._wavFileHandler.getRms();for(var r=0;r<this._lipSyncIds.getSize();++r)this._model.addParameterValueById(this._lipSyncIds.at(r),i,.8)}null!=this._pose&&this._pose.updateParameters(this._model,e);var a=document.getElementById("voice");a.src!==this._audioSrc&&(this._audioSrc=a.src,a.play()),this._model.update()}},t.prototype.startMotion=function(e,t,i,r){var a=this;if(i==b.PriorityForce)this._motionManager.setReservePriority(i);else if(!this._motionManager.reserveMotion(i))return this._debugMode&&C.LAppPal.printMessage("[APP]can't start motion."),_.InvalidMotionQueueEntryHandleValue;var o=this._modelSetting.getMotionFileName(e,t),n="".concat(e,"_").concat(t),s=this._motions.getValue(n),u=!1;null==s?fetch("".concat(this._modelHomeDir).concat(o)).then((function(e){return e.arrayBuffer()})).then((function(i){s=a.loadMotion(i,i.byteLength,null,r);var o=a._modelSetting.getMotionFadeInTimeValue(e,t);o>=0&&s.setFadeInTime(o),(o=a._modelSetting.getMotionFadeOutTimeValue(e,t))>=0&&s.setFadeOutTime(o),s.setEffectIds(a._eyeBlinkIds,a._lipSyncIds),u=!0})):s.setFinishedMotionHandler(r);var l=this._modelSetting.getMotionSoundFileName(e,t);if(0!=l.localeCompare("")){var c=l;c=this._modelHomeDir+c,this._wavFileHandler.start(c)}return this._debugMode&&C.LAppPal.printMessage("[APP]start motion: [".concat(e,"_").concat(t)),this._motionManager.startMotionPriority(s,u,i)},t.prototype.startRandomMotion=function(e,t,i){if(0==this._modelSetting.getMotionCount(e))return _.InvalidMotionQueueEntryHandleValue;var r=Math.floor(Math.random()*this._modelSetting.getMotionCount(e));return this.startMotion(e,r,t,i)},t.prototype.setExpression=function(e){var t=this._expressions.getValue(e);this._debugMode&&C.LAppPal.printMessage("[APP]expression: [".concat(e,"]")),null!=t?this._expressionManager.startMotionPriority(t,!1,b.PriorityForce):this._debugMode&&C.LAppPal.printMessage("[APP]expression[".concat(e,"] is null"))},t.prototype.setRandomExpression=function(){if(0!=this._expressions.getSize())for(var e=Math.floor(Math.random()*this._expressions.getSize()),t=0;t<this._expressions.getSize();t++)if(t==e){var i=this._expressions._keyValues[t].first;return void this.setExpression(i)}},t.prototype.motionEventFired=function(e){(0,v.CubismLogInfo)("{0} is fired on LAppModel!!",e.s)},t.prototype.hitTest=function(e,t,i){if(this._opacity<1)return!1;for(var r=this._modelSetting.getHitAreasCount(),a=0;a<r;a++)if(this._modelSetting.getHitAreaName(a)==e){var o=this._modelSetting.getHitAreaId(a);return this.isHit(o,t,i)}return!1},t.prototype.preLoadMotionGroup=function(e){for(var t=this,i=function(i){var a=r._modelSetting.getMotionFileName(e,i),o="".concat(e,"_").concat(i);r._debugMode&&C.LAppPal.printMessage("[APP]load motion: ".concat(a," => [").concat(o,"]")),fetch("".concat(r._modelHomeDir).concat(a)).then((function(e){return e.arrayBuffer()})).then((function(r){var a=t.loadMotion(r,r.byteLength,o),n=t._modelSetting.getMotionFadeInTimeValue(e,i);n>=0&&a.setFadeInTime(n),(n=t._modelSetting.getMotionFadeOutTimeValue(e,i))>=0&&a.setFadeOutTime(n),a.setEffectIds(t._eyeBlinkIds,t._lipSyncIds),null!=t._motions.getValue(o)&&m.ACubismMotion.delete(t._motions.getValue(o)),t._motions.setValue(o,a),t._motionCount++,t._motionCount>=t._allMotionCount&&(t._state=u.LoadTexture,t._motionManager.stopAllMotions(),t._updating=!1,t._initialized=!0,t.createRenderer(),t.setupTextures(),t.getRenderer().startUp(M.gl))}))},r=this,a=0;a<this._modelSetting.getMotionCount(e);a++)i(a)},t.prototype.releaseMotions=function(){this._motions.clear()},t.prototype.releaseExpressions=function(){this._expressions.clear()},t.prototype.doDraw=function(){if(null!=this._model){var e=[0,0,M.canvas.width,M.canvas.height];this.getRenderer().setRenderState(M.frameBuffer,e),this.getRenderer().drawModel()}},t.prototype.draw=function(e){null!=this._model&&this._state==u.CompleteSetup&&(e.multiplyByMatrix(this._modelMatrix),this.getRenderer().setMvpMatrix(e),this.doDraw())},t}(g.CubismUserModel);t.LAppModel=P},1986:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LAppPal=void 0;var i=function(){function e(){}return e.loadFileAsBytes=function(e,t){fetch(e).then((function(e){return e.arrayBuffer()})).then((function(e){return t(e,e.byteLength)}))},e.getDeltaTime=function(){return this.s_deltaTime},e.updateTime=function(){this.s_currentFrame=Date.now(),this.s_deltaTime=(this.s_currentFrame-this.s_lastFrame)/1e3,this.s_lastFrame=this.s_currentFrame},e.printMessage=function(e){console.log(e)},e.lastUpdate=Date.now(),e.s_currentFrame=0,e.s_lastFrame=0,e.s_deltaTime=0,e}();t.LAppPal=i},5279:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Rect=t.LAppSprite=void 0;var r=i(7551),a=function(){function e(e,t,i,r,a){this._rect=new o,this._rect.left=e-.5*i,this._rect.right=e+.5*i,this._rect.up=t+.5*r,this._rect.down=t-.5*r,this._texture=a,this._vertexBuffer=null,this._uvBuffer=null,this._indexBuffer=null,this._positionLocation=null,this._uvLocation=null,this._textureLocation=null,this._positionArray=null,this._uvArray=null,this._indexArray=null,this._firstDraw=!0}return e.prototype.release=function(){this._rect=null,r.gl.deleteTexture(this._texture),this._texture=null,r.gl.deleteBuffer(this._uvBuffer),this._uvBuffer=null,r.gl.deleteBuffer(this._vertexBuffer),this._vertexBuffer=null,r.gl.deleteBuffer(this._indexBuffer),this._indexBuffer=null},e.prototype.getTexture=function(){return this._texture},e.prototype.render=function(e){if(null!=this._texture){if(this._firstDraw){this._positionLocation=r.gl.getAttribLocation(e,"position"),r.gl.enableVertexAttribArray(this._positionLocation),this._uvLocation=r.gl.getAttribLocation(e,"uv"),r.gl.enableVertexAttribArray(this._uvLocation),this._textureLocation=r.gl.getUniformLocation(e,"texture"),r.gl.uniform1i(this._textureLocation,0),this._uvArray=new Float32Array([1,0,0,0,0,1,1,1]),this._uvBuffer=r.gl.createBuffer();var t=r.canvas.width,i=r.canvas.height;this._positionArray=new Float32Array([(this._rect.right-.5*t)/(.5*t),(this._rect.up-.5*i)/(.5*i),(this._rect.left-.5*t)/(.5*t),(this._rect.up-.5*i)/(.5*i),(this._rect.left-.5*t)/(.5*t),(this._rect.down-.5*i)/(.5*i),(this._rect.right-.5*t)/(.5*t),(this._rect.down-.5*i)/(.5*i)]),this._vertexBuffer=r.gl.createBuffer(),this._indexArray=new Uint16Array([0,1,2,3,2,0]),this._indexBuffer=r.gl.createBuffer(),this._firstDraw=!1}r.gl.bindBuffer(r.gl.ARRAY_BUFFER,this._uvBuffer),r.gl.bufferData(r.gl.ARRAY_BUFFER,this._uvArray,r.gl.STATIC_DRAW),r.gl.vertexAttribPointer(this._uvLocation,2,r.gl.FLOAT,!1,0,0),r.gl.bindBuffer(r.gl.ARRAY_BUFFER,this._vertexBuffer),r.gl.bufferData(r.gl.ARRAY_BUFFER,this._positionArray,r.gl.STATIC_DRAW),r.gl.vertexAttribPointer(this._positionLocation,2,r.gl.FLOAT,!1,0,0),r.gl.bindBuffer(r.gl.ELEMENT_ARRAY_BUFFER,this._indexBuffer),r.gl.bufferData(r.gl.ELEMENT_ARRAY_BUFFER,this._indexArray,r.gl.DYNAMIC_DRAW),r.gl.bindTexture(r.gl.TEXTURE_2D,this._texture),r.gl.drawElements(r.gl.TRIANGLES,this._indexArray.length,r.gl.UNSIGNED_SHORT,0)}},e.prototype.isHit=function(e,t){var i=r.canvas.height-t;return e>=this._rect.left&&e<=this._rect.right&&i<=this._rect.up&&i>=this._rect.down},e}();t.LAppSprite=a;var o=function(){};t.Rect=o},3938:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TextureInfo=t.LAppTextureManager=void 0;var r=i(5760),a=i(7551),o=function(){function e(){this._textures=new r.csmVector}return e.prototype.release=function(){for(var e=this._textures.begin();e.notEqual(this._textures.end());e.preIncrement())a.gl.deleteTexture(e.ptr().id);this._textures=null},e.prototype.createTextureFromPngFile=function(e,t,i){for(var r=this,o=function(r){if(r.ptr().fileName==e&&r.ptr().usePremultply==t)return r.ptr().img=new Image,r.ptr().img.onload=function(){return i(r.ptr())},r.ptr().img.src=e,{value:void 0}},s=this._textures.begin();s.notEqual(this._textures.end());s.preIncrement()){var u=o(s);if("object"==typeof u)return u.value}var l=new Image;l.onload=function(){var o=a.gl.createTexture();a.gl.bindTexture(a.gl.TEXTURE_2D,o),a.gl.texParameteri(a.gl.TEXTURE_2D,a.gl.TEXTURE_MIN_FILTER,a.gl.LINEAR_MIPMAP_LINEAR),a.gl.texParameteri(a.gl.TEXTURE_2D,a.gl.TEXTURE_MAG_FILTER,a.gl.LINEAR),t&&a.gl.pixelStorei(a.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),a.gl.texImage2D(a.gl.TEXTURE_2D,0,a.gl.RGBA,a.gl.RGBA,a.gl.UNSIGNED_BYTE,l),a.gl.generateMipmap(a.gl.TEXTURE_2D),a.gl.bindTexture(a.gl.TEXTURE_2D,null);var s=new n;null!=s&&(s.fileName=e,s.width=l.width,s.height=l.height,s.id=o,s.img=l,s.usePremultply=t,r._textures.pushBack(s)),i(s)},l.src=e},e.prototype.releaseTextures=function(){for(var e=0;e<this._textures.getSize();e++)this._textures.set(e,null);this._textures.clear()},e.prototype.releaseTextureByTexture=function(e){for(var t=0;t<this._textures.getSize();t++)if(this._textures.at(t).id==e){this._textures.set(t,null),this._textures.remove(t);break}},e.prototype.releaseTextureByFilePath=function(e){for(var t=0;t<this._textures.getSize();t++)if(this._textures.at(t).fileName==e){this._textures.set(t,null),this._textures.remove(t);break}},e}();t.LAppTextureManager=o;var n=function(){this.id=null,this.width=0,this.height=0};t.TextureInfo=n},4585:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LAppView=void 0;var n=i(1149),s=i(9248),u=o(i(9556)),l=i(7551),c=i(6424),h=i(1986),p=i(5279),d=i(9307),g=function(){function e(){this._programId=null,this._back=null,this._gear=null,this._touchManager=new d.TouchManager,this._deviceToScreen=new n.CubismMatrix44,this._viewMatrix=new s.CubismViewMatrix}return e.prototype.initialize=function(){var e=l.canvas.width,t=l.canvas.height,i=e/t,r=-i,a=i,o=u.ViewLogicalLeft,n=u.ViewLogicalRight;if(this._viewMatrix.setScreenRect(r,a,o,n),this._viewMatrix.scale(u.ViewScale,u.ViewScale),this._deviceToScreen.loadIdentity(),e>t){var s=Math.abs(a-r);this._deviceToScreen.scaleRelative(s/e,-s/e)}else{var c=Math.abs(n-o);this._deviceToScreen.scaleRelative(c/t,-c/t)}this._deviceToScreen.translateRelative(.5*-e,.5*-t),this._viewMatrix.setMaxScale(u.ViewMaxScale),this._viewMatrix.setMinScale(u.ViewMinScale),this._viewMatrix.setMaxScreenRect(u.ViewLogicalMaxLeft,u.ViewLogicalMaxRight,u.ViewLogicalMaxBottom,u.ViewLogicalMaxTop)},e.prototype.release=function(){this._viewMatrix=null,this._touchManager=null,this._deviceToScreen=null,this._gear.release(),this._gear=null,this._back.release(),this._back=null,l.gl.deleteProgram(this._programId),this._programId=null},e.prototype.render=function(){l.gl.useProgram(this._programId),this._back&&this._back.render(this._programId),this._gear&&this._gear.render(this._programId),l.gl.flush();var e=c.LAppLive2DManager.getInstance();e.setViewMatrix(this._viewMatrix),e.onUpdate()},e.prototype.initializeSprite=function(){var e=this,t=l.canvas.width,i=l.canvas.height,r=l.LAppDelegate.getInstance().getTextureManager(),a=u.ResourcesPath,o="";o=u.BackImageName,r.createTextureFromPngFile(a+o,!1,(function(r){var a=.5*t,o=.5*i,n=2*r.width,s=.95*i;e._back=new p.LAppSprite(a,o,n,s,r.id)})),o=u.GearImageName,r.createTextureFromPngFile(a+o,!1,(function(r){var a=t-.5*r.width,o=i-.5*r.height,n=r.width,s=r.height;e._gear=new p.LAppSprite(a,o,n,s,r.id)})),null==this._programId&&(this._programId=l.LAppDelegate.getInstance().createShader())},e.prototype.onTouchesBegan=function(e,t){this._touchManager.touchesBegan(e,t)},e.prototype.onTouchesMoved=function(e,t){var i=this.transformViewX(this._touchManager.getX()),r=this.transformViewY(this._touchManager.getY());this._touchManager.touchesMoved(e,t),c.LAppLive2DManager.getInstance().onDrag(i,r)},e.prototype.onTouchesEnded=function(e,t){var i=c.LAppLive2DManager.getInstance();i.onDrag(0,0);var r=this._deviceToScreen.transformX(this._touchManager.getX()),a=this._deviceToScreen.transformY(this._touchManager.getY());u.DebugTouchLogEnable&&h.LAppPal.printMessage("[APP]touchesEnded x: ".concat(r," y: ").concat(a)),i.onTap(r,a)},e.prototype.transformViewX=function(e){var t=this._deviceToScreen.transformX(e);return this._viewMatrix.invertTransformX(t)},e.prototype.transformViewY=function(e){var t=this._deviceToScreen.transformY(e);return this._viewMatrix.invertTransformY(t)},e.prototype.transformScreenX=function(e){return this._deviceToScreen.transformX(e)},e.prototype.transformScreenY=function(e){return this._deviceToScreen.transformY(e)},e}();t.LAppView=g},5364:function(e,t){"use strict";var i=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(a,o){function n(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,s)}u((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var i,r,a,o,n={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(u){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(n=0)),n;)try{if(i=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return n.label++,{value:s[1],done:!1};case 5:n.label++,r=s[1],s=[0];continue;case 7:s=n.ops.pop(),n.trys.pop();continue;default:if(!((a=(a=n.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){n=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){n.label=s[1];break}if(6===s[0]&&n.label<a[1]){n.label=a[1],a=s;break}if(a&&n.label<a[2]){n.label=a[2],n.ops.push(s);break}a[2]&&n.ops.pop(),n.trys.pop();continue}s=t.call(e,n)}catch(e){s=[6,e],r=0}finally{i=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ByteReader=t.WavFileInfo=t.LAppWavFileHandler=t.s_instance=void 0,t.s_instance=null;var a=function(){function e(){var e=this;this._loadFiletoBytes=function(t,i){e._byteReader._fileByte=t,e._byteReader._fileDataView=new DataView(e._byteReader._fileByte),e._byteReader._fileSize=i},this._pcmData=null,this._userTimeSeconds=0,this._lastRms=0,this._sampleOffset=0,this._wavFileInfo=new o,this._byteReader=new n}return e.getInstance=function(){return null==t.s_instance&&(t.s_instance=new e),t.s_instance},e.releaseInstance=function(){null!=t.s_instance&&(t.s_instance=void 0),t.s_instance=null},e.prototype.update=function(e){var t,i;if(null==this._pcmData||this._sampleOffset>=this._wavFileInfo._samplesPerChannel)return this._lastRms=0,!1;this._userTimeSeconds+=e,(t=Math.floor(this._userTimeSeconds*this._wavFileInfo._samplingRate))>this._wavFileInfo._samplesPerChannel&&(t=this._wavFileInfo._samplesPerChannel),i=0;for(var r=0;r<this._wavFileInfo._numberOfChannels;r++)for(var a=this._sampleOffset;a<t;a++){var o=this._pcmData[r][a];i+=o*o}return i=Math.sqrt(i/(this._wavFileInfo._numberOfChannels*(t-this._sampleOffset))),this._lastRms=i,this._sampleOffset=t,!0},e.prototype.start=function(e){this._sampleOffset=0,this._userTimeSeconds=0,this._lastRms=0},e.prototype.getRms=function(){return this._lastRms},e.prototype.loadWavFile=function(e){var t=this,a=!1;return null!=this._pcmData&&this.releasePcmData(),i(t,void 0,void 0,(function(){var o,n,s,u,l;return r(this,(function(c){switch(c.label){case 0:return o=this._byteReader,[4,i(t,void 0,void 0,(function(){return r(this,(function(t){return[2,fetch(e).then((function(e){return e.arrayBuffer()}))]}))}))];case 1:if(o._fileByte=c.sent(),this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=this._byteReader._fileByte.byteLength,this._byteReader._readOffset=0,null==this._byteReader._fileByte||this._byteReader._fileSize<4)return[2,!1];this._wavFileInfo._fileName=e;try{if(!this._byteReader.getCheckSignature("RIFF"))throw a=!1,new Error('Cannot find Signeture "RIFF".');if(this._byteReader.get32LittleEndian(),!this._byteReader.getCheckSignature("WAVE"))throw a=!1,new Error('Cannot find Signeture "WAVE".');if(!this._byteReader.getCheckSignature("fmt "))throw a=!1,new Error('Cannot find Signeture "fmt".');if(n=this._byteReader.get32LittleEndian(),1!=this._byteReader.get16LittleEndian())throw a=!1,new Error("File is not linear PCM.");for(this._wavFileInfo._numberOfChannels=this._byteReader.get16LittleEndian(),this._wavFileInfo._samplingRate=this._byteReader.get32LittleEndian(),this._byteReader.get32LittleEndian(),this._byteReader.get16LittleEndian(),this._wavFileInfo._bitsPerSample=this._byteReader.get16LittleEndian(),n>16&&(this._byteReader._readOffset+=n-16);!this._byteReader.getCheckSignature("data")&&this._byteReader._readOffset<this._byteReader._fileSize;)this._byteReader._readOffset+=this._byteReader.get32LittleEndian()+4;if(this._byteReader._readOffset>=this._byteReader._fileSize)throw a=!1,new Error('Cannot find "data" Chunk.');for(s=this._byteReader.get32LittleEndian(),this._wavFileInfo._samplesPerChannel=8*s/(this._wavFileInfo._bitsPerSample*this._wavFileInfo._numberOfChannels),this._pcmData=new Array(this._wavFileInfo._numberOfChannels),l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l]=new Float32Array(this._wavFileInfo._samplesPerChannel);for(u=0;u<this._wavFileInfo._samplesPerChannel;u++)for(l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l][u]=this.getPcmSample();a=!0}catch(e){console.log(e)}return[2]}}))})),a},e.prototype.getPcmSample=function(){var e;switch(this._wavFileInfo._bitsPerSample){case 8:e=this._byteReader.get8()-128,e<<=24;break;case 16:e=this._byteReader.get16LittleEndian()<<16;break;case 24:e=this._byteReader.get24LittleEndian()<<8;break;default:e=0}return e/2147483647},e.prototype.releasePcmData=function(){for(var e=0;e<this._wavFileInfo._numberOfChannels;e++)delete this._pcmData[e];delete this._pcmData,this._pcmData=null},e}();t.LAppWavFileHandler=a;var o=function(){this._fileName="",this._numberOfChannels=0,this._bitsPerSample=0,this._samplingRate=0,this._samplesPerChannel=0};t.WavFileInfo=o;var n=function(){function e(){this._fileByte=null,this._fileDataView=null,this._fileSize=0,this._readOffset=0}return e.prototype.get8=function(){var e=this._fileDataView.getUint8(this._readOffset);return this._readOffset++,e},e.prototype.get16LittleEndian=function(){var e=this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=2,e},e.prototype.get24LittleEndian=function(){var e=this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=3,e},e.prototype.get32LittleEndian=function(){var e=this._fileDataView.getUint8(this._readOffset+3)<<24|this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=4,e},e.prototype.getCheckSignature=function(e){var t=new Uint8Array(4),i=(new TextEncoder).encode(e);if(4!=e.length)return!1;for(var r=0;r<4;r++)t[r]=this.get8();return t[0]==i[0]&&t[1]==i[1]&&t[2]==i[2]&&t[3]==i[3]},e}();t.ByteReader=n},8519:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var n=i(7551),s=o(i(9556));window.onload=function(){0!=n.LAppDelegate.getInstance().initialize()&&n.LAppDelegate.getInstance().run()},window.onbeforeunload=function(){return n.LAppDelegate.releaseInstance()},window.onresize=function(){"auto"===s.CanvasSize&&n.LAppDelegate.getInstance().onResize()},window.startVoiceConversation=function(e,t){n.LAppDelegate.getInstance().startVoiceConversation(e,t)}},9307:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TouchManager=void 0;var i=function(){function e(){this._startX=0,this._startY=0,this._lastX=0,this._lastY=0,this._lastX1=0,this._lastY1=0,this._lastX2=0,this._lastY2=0,this._lastTouchDistance=0,this._deltaX=0,this._deltaY=0,this._scale=1,this._touchSingle=!1,this._flipAvailable=!1}return e.prototype.getCenterX=function(){return this._lastX},e.prototype.getCenterY=function(){return this._lastY},e.prototype.getDeltaX=function(){return this._deltaX},e.prototype.getDeltaY=function(){return this._deltaY},e.prototype.getStartX=function(){return this._startX},e.prototype.getStartY=function(){return this._startY},e.prototype.getScale=function(){return this._scale},e.prototype.getX=function(){return this._lastX},e.prototype.getY=function(){return this._lastY},e.prototype.getX1=function(){return this._lastX1},e.prototype.getY1=function(){return this._lastY1},e.prototype.getX2=function(){return this._lastX2},e.prototype.getY2=function(){return this._lastY2},e.prototype.isSingleTouch=function(){return this._touchSingle},e.prototype.isFlickAvailable=function(){return this._flipAvailable},e.prototype.disableFlick=function(){this._flipAvailable=!1},e.prototype.touchesBegan=function(e,t){this._lastX=e,this._lastY=t,this._startX=e,this._startY=t,this._lastTouchDistance=-1,this._flipAvailable=!0,this._touchSingle=!0},e.prototype.touchesMoved=function(e,t){this._lastX=e,this._lastY=t,this._lastTouchDistance=-1,this._touchSingle=!0},e.prototype.getFlickDistance=function(){return this.calculateDistance(this._startX,this._startY,this._lastX,this._lastY)},e.prototype.calculateDistance=function(e,t,i,r){return Math.sqrt((e-i)*(e-i)+(t-r)*(t-r))},e.prototype.calculateMovingAmount=function(e,t){if(e>0!=t>0)return 0;var i=e>0?1:-1,r=Math.abs(e),a=Math.abs(t);return i*(r<a?r:a)},e}();t.TouchManager=i},8966:function(e,t,i){const r=i(1760),a=i(4171);e.exports=class{mediaRecorder;stream;__data;async start(e={audio:!0,video:!1}){if("recording"===this.mediaRecorder?.state)return!0;const t=e||{audio:!0,video:!1};try{this.stream=await navigator.mediaDevices.getUserMedia(t),this.mediaRecorder=new MediaRecorder(this.stream),this.mediaRecorder.ondataavailable=e=>this.__data=e.data}catch(e){return console.error(e),!1}return this.mediaRecorder?.start(),!0}stop(){if("recording"!==this.mediaRecorder?.state)return!0;this.mediaRecorder.stop(),this.mediaRecorder.onstop=()=>{this.stream.getTracks().forEach((e=>e.stop())),this.mediaRecorder=void 0,this.stream=void 0}}async download(e=null,t=!1,i){if(this.__data)return await a(this.__data,t,e,i)}async getBlob(e=!1,t){if(this.__data)return await r(this.__data,e,t)}}},4171:function(e,t,i){const r=i(1760);e.exports=async function(e,t,i=null,a){const o=await r(e,t,a),n=document.createElement("a");n.href=window.URL.createObjectURL(o),n.download=i||`recording('${t?"32bit":"16bit"}).wav`,n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)}},4952:function(e,t,i){e.exports.WavRecorder=i(8966),e.exports.getWaveBlob=i(1760),e.exports.downloadWav=i(4171)},1760:function(e){function t(e,t,i){for(let r=0;r<e.length;++r)t[i+r]=e.charCodeAt(r)}function i(e,t,i){e=Math.floor(e),t[i+0]=255&e,t[i+1]=e>>8&255}function r(e,t,i){e=Math.floor(e),t[i+0]=255&e,t[i+1]=e>>8&255,t[i+2]=e>>16&255,t[i+3]=e>>24&255}function a(e){const t=new ArrayBuffer(4);return new Float32Array(t)[0]=e,0|new Uint32Array(t)[0]}e.exports=async function(e,o,n){const s=await async function(e,t){let i=e;i instanceof Blob||(i=new Blob([e]));const r=URL.createObjectURL(i),a=await fetch(r),o=await a.arrayBuffer(),n=new AudioContext(t);return await n.decodeAudioData(o)}(e,n),u=s.length,l=s.numberOfChannels,c=s.sampleRate,h=o?32:16,p=c*l*h/8,d=l*h/8,g=u*l*(h/8),m=new Uint8Array(44+g),_=g,f=28+(8+_);return t("RIFF",m,0),r(f,m,4),t("WAVE",m,8),t("fmt ",m,12),r(16,m,16),i(o?3:1,m,20),i(l,m,22),r(c,m,24),r(p,m,28),i(d,m,32),r(h,m,34),t("data",m,36),r(_,m,40),function(e,t,o,n){let s=0,u=0;const l=e.length,c=e.numberOfChannels;let h,p;for(s=0;s<l;++s)for(u=0;u<c;++u)if(h=e.getChannelData(u),16===n)p=32768*h[s],p<-32768?p=-32768:p>32767&&(p=32767),i(p,t,o),o+=2;else{if(32!==n)return void console.log("Invalid bit depth for PCM encoding.");p=a(h[s]),r(p,t,o),o+=4}}(s,m,44,h),new Blob([m],{type:"audio/wave"})}},7147:function(e,t,i){"use strict";i.r(t),i.d(t,{DOMException:function(){return I},Headers:function(){return g},Request:function(){return M},Response:function(){return S},fetch:function(){return x}});var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,a="URLSearchParams"in r,o="Symbol"in r&&"iterator"in Symbol,n="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(e){return!1}}(),s="FormData"in r,u="ArrayBuffer"in r;if(u)var l=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&l.indexOf(Object.prototype.toString.call(e))>-1};function h(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError('Invalid character in header field name: "'+e+'"');return e.toLowerCase()}function p(e){return"string"!=typeof e&&(e=String(e)),e}function d(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return o&&(t[Symbol.iterator]=function(){return t}),t}function g(e){this.map={},e instanceof g?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function m(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function _(e){return new Promise((function(t,i){e.onload=function(){t(e.result)},e.onerror=function(){i(e.error)}}))}function f(e){var t=new FileReader,i=_(t);return t.readAsArrayBuffer(e),i}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:n&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:s&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:a&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():u&&n&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):a&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n&&(this.blob=function(){var e=m(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?m(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(f)}),this.text=function(){var e,t,i,r=m(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,i=_(t=new FileReader),t.readAsText(e),i;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),i=new Array(t.length),r=0;r<t.length;r++)i[r]=String.fromCharCode(t[r]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(C)}),this.json=function(){return this.text().then(JSON.parse)},this}g.prototype.append=function(e,t){e=h(e),t=p(t);var i=this.map[e];this.map[e]=i?i+", "+t:t},g.prototype.delete=function(e){delete this.map[h(e)]},g.prototype.get=function(e){return e=h(e),this.has(e)?this.map[e]:null},g.prototype.has=function(e){return this.map.hasOwnProperty(h(e))},g.prototype.set=function(e,t){this.map[h(e)]=p(t)},g.prototype.forEach=function(e,t){for(var i in this.map)this.map.hasOwnProperty(i)&&e.call(t,this.map[i],i,this)},g.prototype.keys=function(){var e=[];return this.forEach((function(t,i){e.push(i)})),d(e)},g.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),d(e)},g.prototype.entries=function(){var e=[];return this.forEach((function(t,i){e.push([i,t])})),d(e)},o&&(g.prototype[Symbol.iterator]=g.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function M(e,t){if(!(this instanceof M))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var i,r,a=(t=t||{}).body;if(e instanceof M){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new g(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,a||null==e._bodyInit||(a=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new g(t.headers)),this.method=(r=(i=t.method||this.method||"GET").toUpperCase(),b.indexOf(r)>-1?r:i),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&a)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(a),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==t.cache&&"no-cache"!==t.cache)){var o=/([?&])_=[^&]*/;o.test(this.url)?this.url=this.url.replace(o,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function C(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var i=e.split("="),r=i.shift().replace(/\+/g," "),a=i.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(a))}})),t}function S(e,t){if(!(this instanceof S))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===t.statusText?"":""+t.statusText,this.headers=new g(t.headers),this.url=t.url||"",this._initBody(e)}M.prototype.clone=function(){return new M(this,{body:this._bodyInit})},v.call(M.prototype),v.call(S.prototype),S.prototype.clone=function(){return new S(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new g(this.headers),url:this.url})},S.error=function(){var e=new S(null,{status:0,statusText:""});return e.type="error",e};var P=[301,302,303,307,308];S.redirect=function(e,t){if(-1===P.indexOf(t))throw new RangeError("Invalid status code");return new S(null,{status:t,headers:{location:e}})};var I=r.DOMException;try{new I}catch(e){(I=function(e,t){this.message=e,this.name=t;var i=Error(e);this.stack=i.stack}).prototype=Object.create(Error.prototype),I.prototype.constructor=I}function x(e,t){return new Promise((function(i,a){var o=new M(e,t);if(o.signal&&o.signal.aborted)return a(new I("Aborted","AbortError"));var s=new XMLHttpRequest;function l(){s.abort()}s.onload=function(){var e,t,r={status:s.status,statusText:s.statusText,headers:(e=s.getAllResponseHeaders()||"",t=new g,e.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(e){return 0===e.indexOf("\n")?e.substr(1,e.length):e})).forEach((function(e){var i=e.split(":"),r=i.shift().trim();if(r){var a=i.join(":").trim();t.append(r,a)}})),t)};r.url="responseURL"in s?s.responseURL:r.headers.get("X-Request-URL");var a="response"in s?s.response:s.responseText;setTimeout((function(){i(new S(a,r))}),0)},s.onerror=function(){setTimeout((function(){a(new TypeError("Network request failed"))}),0)},s.ontimeout=function(){setTimeout((function(){a(new TypeError("Network request failed"))}),0)},s.onabort=function(){setTimeout((function(){a(new I("Aborted","AbortError"))}),0)},s.open(o.method,function(e){try{return""===e&&r.location.href?r.location.href:e}catch(t){return e}}(o.url),!0),"include"===o.credentials?s.withCredentials=!0:"omit"===o.credentials&&(s.withCredentials=!1),"responseType"in s&&(n?s.responseType="blob":u&&o.headers.get("Content-Type")&&-1!==o.headers.get("Content-Type").indexOf("application/octet-stream")&&(s.responseType="arraybuffer")),!t||"object"!=typeof t.headers||t.headers instanceof g?o.headers.forEach((function(e,t){s.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){s.setRequestHeader(e,p(t.headers[e]))})),o.signal&&(o.signal.addEventListener("abort",l),s.onreadystatechange=function(){4===s.readyState&&o.signal.removeEventListener("abort",l)}),s.send(void 0===o._bodyInit?null:o._bodyInit)}))}x.polyfill=!0,r.fetch||(r.fetch=x,r.Headers=g,r.Request=M,r.Response=S)}},t={};function i(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,i),o.exports}i.d=function(e,t){for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i(8519)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MUMsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyxtQkFBb0IsUUFBVSxHQUN6QyxDQUFFLE1BQVMsbUJBQW9CLFFBQVUsR0FDekMsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsdUJBQXdCLFFBQVUsR0FDN0MsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUyxtQkFBb0IsUUFBVSxHQUN6QyxDQUFFLE1BQVMsbUJBQW9CLFFBQVUsR0FDekMsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUyxtQkFBb0IsUUFBVSxHQUN6QyxDQUFFLE1BQVMsbUJBQW9CLFFBQVUsR0FDekMsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyx1QkFBd0IsUUFBVSxHQUM3QyxDQUFFLE1BQVMscUJBQXNCLFFBQVUsR0FDM0MsQ0FBRSxNQUFTLHVCQUF3QixRQUFVLEdBQzdDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLHVCQUF3QixRQUFVLEdBQzdDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLHNCQUF1QixRQUFVLEdBQzVDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxD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UUFBVSxHQUN6QyxDQUFFLE1BQVMscUJBQXNCLFFBQVUsR0FDM0MsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLHNCQUF1QixRQUFVLEdBQzVDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLHNCQUF1QixRQUFVLEdBQzVDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMscUJBQXNCLFFBQVUsR0FDM0MsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxtQkFBb0IsUUFBVSxHQUN6QyxDQUFFLE1BQVMsdUJBQXdCLFFBQVUsR0FDN0MsQ0FBRSxNQUFTLHNCQUF1QixRQUFVLEdBQzVDLENBQUUsTUFBUyx3QkFBeUIsUUFBVSxHQUM5QyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMscUJBQXNCLFFBQVUsR0FDM0MsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLHFCQUFzQixRQUFV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QUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMscUJBQXNCLFFBQVUsR0FDM0MsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyx1QkFBd0IsUUFBVSxHQUM3QyxDQUFFLE1BQVMsdUJBQXdCLFFBQVUsR0FDN0MsQ0FBRSxNQUFTLHNCQUF1QixRQUFVLEdBQzVDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLGtCQUFtQixRQUFVLEdBQ3hDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsbUJBQW9CLFFBQVUsR0FDekMsQ0FBRSxNQUFTLGtCQUFtQixRQUFVLEdBQ3hDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLHNCQUF1QixRQUFVLEdBQzVDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLHVCQUF3QixRQUFVLEdBQzdDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUywwQkFBMkIsUUFBVSxHQUNoRCxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxrQkFBbUIsUUFBVSxHQUN4QyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyx5QkFBMEIsUUFBVSxHQUMvQyxDQUFFLE1BQVMscUJBQXNCLFFBQVUsR0FDM0MsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsc0JBQXVCLFFBQVUsR0FDNUMsQ0FBRSxNQUFTLG9CQUFxQixRQUFVLEdBQzFDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLHFCQUFzQixRQUFVLEdBQzNDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyxxQkFBc0IsUUFBVSxHQUMzQyxDQUFFLE1BQVMsdUJBQXdCLFFBQVUsR0FDN0MsQ0FBRSxNQUFTLHNCQUF1QixRQUFVLEdBQzVDLENBQUUsTUFBUyxvQkFBcUIsUUFBVSxHQUMxQyxDQUFFLE1BQVMscUJBQXNCLFFBQVUsR0FDM0MsQ0FBRSxNQUFTLG1CQUFvQixRQUFVLEdBQ3pDLENBQUUsTUFBUyxzQkFBdUIsUUFBVSxHQUM1QyxDQUFFLE1BQVMsb0JBQXFCLFFBQVUsR0FDMUMsQ0FBRSxNQUFT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QUFFM3BELE9BQU8sR0FDdkQsRUNIMEI2MEQsRUFBb0IsSyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL2N1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9jdWJpc21mcmFtZXdvcmtjb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvY3ViaXNtbW9kZWxzZXR0aW5nanNvbi50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtYnJlYXRoLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21leWVibGluay50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtcG9zZS50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9pY3ViaXNtbW9kZWxzZXR0aW5nLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkbWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9saXZlMmRjdWJpc21mcmFtZXdvcmsudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tYXRoLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbWF0cml4NDQudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tb2RlbG1hdHJpeC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXRhcmdldHBvaW50LnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdmVjdG9yMi50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXZpZXdtYXRyaXgudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9jLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24udHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtdXNlcm1vZGVsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9hY3ViaXNtbW90aW9uLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbW90aW9uL2N1YmlzbW1vdGlvbmludGVybmFsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25qc29uLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25tYW5hZ2VyLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5LnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvcGh5c2ljcy9jdWJpc21waHlzaWNzLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2ludGVybmFsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2pzb24udHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcl93ZWJnbC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbW1hcC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXJlY3RmLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3Ntc3RyaW5nLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtdmVjdG9yLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3V0aWxzL2N1YmlzbWRlYnVnLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3V0aWxzL2N1YmlzbWpzb24udHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvdXRpbHMvY3ViaXNtanNvbmV4dGVuc2lvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXp1cmVhaS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFuZ3VhZ2V0b3ZvaWNlbWFwcGluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcGRlZmluZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcGRlbGVnYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwbGl2ZTJkbWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcG1vZGVsLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwcGFsLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwc3ByaXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwdGV4dHVyZW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHB2aWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwd2F2ZmlsZWhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvdWNobWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2VibS10by13YXYtY29udmVydGVyL1dhdlJlY29yZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJtLXRvLXdhdi1jb252ZXJ0ZXIvZG93bmxvYWRVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJtLXRvLXdhdi1jb252ZXJ0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYm0tdG8td2F2LWNvbnZlcnRlci93YXZCbG9iVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiBAYnJpZWYg44OR44Op44Oh44O844K/SUTjga7jg4fjg5Xjgqnjg6vjg4jlgKTjgpLkv53mjIHjgZnjgovlrprmlbA8YnI+XG4gKiAgICAgICAgIOODh+ODleOCqeODq+ODiOWApOOBruS7leanmOOBr+S7peS4i+OBruODnuODi+ODpeOCouODq+OBq+WfuuOBpeOBjzxicj5cbiAqICAgICAgICAgaHR0cHM6Ly9kb2NzLmxpdmUyZC5jb20vY3ViaXNtLWVkaXRvci1tYW51YWwvc3RhbmRhcmQtcGFyYW1ldG9yLWxpc3QvXG4gKi9cbmV4cG9ydCBjb25zdCBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQgPSBPYmplY3QuZnJlZXplPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KHtcbiAgLy8g44OR44O844OESURcbiAgSGl0QXJlYVByZWZpeDogJ0hpdEFyZWEnLFxuICBIaXRBcmVhSGVhZDogJ0hlYWQnLFxuICBIaXRBcmVhQm9keTogJ0JvZHknLFxuICBQYXJ0c0lkQ29yZTogJ1BhcnRzMDFDb3JlJyxcbiAgUGFydHNBcm1QcmVmaXg6ICdQYXJ0czAxQXJtXycsXG4gIFBhcnRzQXJtTFByZWZpeDogJ1BhcnRzMDFBcm1MXycsXG4gIFBhcnRzQXJtUlByZWZpeDogJ1BhcnRzMDFBcm1SXycsXG4gIC8vIOODkeODqeODoeODvOOCv0lEXG4gIFBhcmFtQW5nbGVYOiAnUGFyYW1BbmdsZVgnLFxuICBQYXJhbUFuZ2xlWTogJ1BhcmFtQW5nbGVZJyxcbiAgUGFyYW1BbmdsZVo6ICdQYXJhbUFuZ2xlWicsXG4gIFBhcmFtRXllTE9wZW46ICdQYXJhbUV5ZUxPcGVuJyxcbiAgUGFyYW1FeWVMU21pbGU6ICdQYXJhbUV5ZUxTbWlsZScsXG4gIFBhcmFtRXllUk9wZW46ICdQYXJhbUV5ZVJPcGVuJyxcbiAgUGFyYW1FeWVSU21pbGU6ICdQYXJhbUV5ZVJTbWlsZScsXG4gIFBhcmFtRXllQmFsbFg6ICdQYXJhbUV5ZUJhbGxYJyxcbiAgUGFyYW1FeWVCYWxsWTogJ1BhcmFtRXllQmFsbFknLFxuICBQYXJhbUV5ZUJhbGxGb3JtOiAnUGFyYW1FeWVCYWxsRm9ybScsXG4gIFBhcmFtQnJvd0xZOiAnUGFyYW1Ccm93TFknLFxuICBQYXJhbUJyb3dSWTogJ1BhcmFtQnJvd1JZJyxcbiAgUGFyYW1Ccm93TFg6ICdQYXJhbUJyb3dMWCcsXG4gIFBhcmFtQnJvd1JYOiAnUGFyYW1Ccm93UlgnLFxuICBQYXJhbUJyb3dMQW5nbGU6ICdQYXJhbUJyb3dMQW5nbGUnLFxuICBQYXJhbUJyb3dSQW5nbGU6ICdQYXJhbUJyb3dSQW5nbGUnLFxuICBQYXJhbUJyb3dMRm9ybTogJ1BhcmFtQnJvd0xGb3JtJyxcbiAgUGFyYW1Ccm93UkZvcm06ICdQYXJhbUJyb3dSRm9ybScsXG4gIFBhcmFtTW91dGhGb3JtOiAnUGFyYW1Nb3V0aEZvcm0nLFxuICBQYXJhbU1vdXRoT3Blblk6ICdQYXJhbU1vdXRoT3BlblknLFxuICBQYXJhbUNoZWVrOiAnUGFyYW1DaGVlaycsXG4gIFBhcmFtQm9keUFuZ2xlWDogJ1BhcmFtQm9keUFuZ2xlWCcsXG4gIFBhcmFtQm9keUFuZ2xlWTogJ1BhcmFtQm9keUFuZ2xlWScsXG4gIFBhcmFtQm9keUFuZ2xlWjogJ1BhcmFtQm9keUFuZ2xlWicsXG4gIFBhcmFtQnJlYXRoOiAnUGFyYW1CcmVhdGgnLFxuICBQYXJhbUFybUxBOiAnUGFyYW1Bcm1MQScsXG4gIFBhcmFtQXJtUkE6ICdQYXJhbUFybVJBJyxcbiAgUGFyYW1Bcm1MQjogJ1BhcmFtQXJtTEInLFxuICBQYXJhbUFybVJCOiAnUGFyYW1Bcm1SQicsXG4gIFBhcmFtSGFuZEw6ICdQYXJhbUhhbmRMJyxcbiAgUGFyYW1IYW5kUjogJ1BhcmFtSGFuZFInLFxuICBQYXJhbUhhaXJGcm9udDogJ1BhcmFtSGFpckZyb250JyxcbiAgUGFyYW1IYWlyU2lkZTogJ1BhcmFtSGFpclNpZGUnLFxuICBQYXJhbUhhaXJCYWNrOiAnUGFyYW1IYWlyQmFjaycsXG4gIFBhcmFtSGFpckZsdWZmeTogJ1BhcmFtSGFpckZsdWZmeScsXG4gIFBhcmFtU2hvdWxkZXJZOiAnUGFyYW1TaG91bGRlclknLFxuICBQYXJhbUJ1c3RYOiAnUGFyYW1CdXN0WCcsXG4gIFBhcmFtQnVzdFk6ICdQYXJhbUJ1c3RZJyxcbiAgUGFyYW1CYXNlWDogJ1BhcmFtQmFzZVgnLFxuICBQYXJhbUJhc2VZOiAnUGFyYW1CYXNlWScsXG4gIFBhcmFtTk9ORTogJ05PTkU6Jyxcbn0pO1xuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFCb2R5ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuSGl0QXJlYUJvZHk7XG4gIGV4cG9ydCBjb25zdCBIaXRBcmVhSGVhZCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLkhpdEFyZWFIZWFkO1xuICBleHBvcnQgY29uc3QgSGl0QXJlYVByZWZpeCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLkhpdEFyZWFQcmVmaXg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVYO1xuICBleHBvcnQgY29uc3QgUGFyYW1BbmdsZVkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQW5nbGVaID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVo7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybUxBID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Bcm1MQTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtTEIgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFybUxCO1xuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1SQSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQXJtUkE7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybVJCID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Bcm1SQjtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQmFzZVggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJhc2VYO1xuICBleHBvcnQgY29uc3QgUGFyYW1CYXNlWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQmFzZVk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVogPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVo7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyZWF0aCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJlYXRoO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TEFuZ2xlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TEFuZ2xlO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TEZvcm0gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dMRm9ybTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TFg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd0xZO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkFuZ2xlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93UkFuZ2xlO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkZvcm0gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dSRm9ybTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93Ulg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd1JZO1xuICBleHBvcnQgY29uc3QgUGFyYW1CdXN0WCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnVzdFg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJ1c3RZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CdXN0WTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQ2hlZWsgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUNoZWVrO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsRm9ybSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbEZvcm07XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllQmFsbFkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxZO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVMT3BlbiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllTE9wZW47XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUxTbWlsZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllTFNtaWxlO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVST3BlbiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllUk9wZW47XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZVJTbWlsZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllUlNtaWxlO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyQmFjayA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFpckJhY2s7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJGbHVmZnkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhaXJGbHVmZnk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJGcm9udCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFpckZyb250O1xuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyU2lkZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFpclNpZGU7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhbmRMID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYW5kTDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFuZFIgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhbmRSO1xuICBleHBvcnQgY29uc3QgUGFyYW1Nb3V0aEZvcm0gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbU1vdXRoRm9ybTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTW91dGhPcGVuWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtTW91dGhPcGVuWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTk9ORSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtTk9ORTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtU2hvdWxkZXJZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1TaG91bGRlclk7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybUxQcmVmaXggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJ0c0FybUxQcmVmaXg7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybVByZWZpeCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcnRzQXJtUHJlZml4O1xuICBleHBvcnQgY29uc3QgUGFydHNBcm1SUHJlZml4ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFydHNBcm1SUHJlZml4O1xuICBleHBvcnQgY29uc3QgUGFydHNJZENvcmUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJ0c0lkQ29yZTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICDjg63jgrDlh7rlipvplqLmlbDjga7oqK3lrppcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8tLS0tLS0tLS0tIOODreOCsOWHuuWKm+ODrOODmeODqyDpgbjmip7poIXnm64g5a6a576pIC0tLS0tLS0tLS1cbi8vIOips+e0sOODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfVkVSQk9TRSA9IDA7XG4vLyDjg4fjg5Djg4PjgrDjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0RFQlVHID0gMTtcbi8vIEluZm/jg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0lORk8gPSAyO1xuLy8g6K2m5ZGK44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9XQVJOSU5HID0gMztcbi8vIOOCqOODqeODvOODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfRVJST1IgPSA0O1xuLy8g44Ot44Kw5Ye65Yqb44Kq44OV6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9PRkYgPSA1O1xuXG4vKipcbiAqIOODreOCsOWHuuWKm+ODrOODmeODq+ioreWumuOAglxuICpcbiAqIOW8t+WItueahOOBq+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuWkieOBiOOCi+aZguOBq+Wumue+qeOCkuacieWKueOBq+OBmeOCi+OAglxuICogQ1NNX0xPR19MRVZFTF9WRVJCT1NFIO+9niBDU01fTE9HX0xFVkVMX09GRiDjgpLpgbjmip7jgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUw6IG51bWJlciA9IENTTV9MT0dfTEVWRUxfVkVSQk9TRTtcbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IElDdWJpc21Nb2RlbFNldHRpbmcgfSBmcm9tICcuL2ljdWJpc21tb2RlbHNldHRpbmcnO1xuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IGNzbU1hcCwgaXRlcmF0b3IgfSBmcm9tICcuL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiwgVmFsdWUgfSBmcm9tICcuL3V0aWxzL2N1YmlzbWpzb24nO1xuXG4vKipcbiAqIE1vZGVsM0pzb27jga7jgq3jg7zmloflrZfliJdcbiAqL1xuXG4vLyBKU09OIEtleXNcbmNvbnN0IFZlcnNpb24gPSAnVmVyc2lvbic7XG5jb25zdCBGaWxlUmVmZXJlbmNlcyA9ICdGaWxlUmVmZXJlbmNlcyc7XG5jb25zdCBHcm91cHMgPSAnR3JvdXBzJztcbmNvbnN0IExheW91dCA9ICdMYXlvdXQnO1xuY29uc3QgSGl0QXJlYXMgPSAnSGl0QXJlYXMnO1xuXG5jb25zdCBNb2MgPSAnTW9jJztcbmNvbnN0IFRleHR1cmVzID0gJ1RleHR1cmVzJztcbmNvbnN0IFBoeXNpY3MgPSAnUGh5c2ljcyc7XG5jb25zdCBQb3NlID0gJ1Bvc2UnO1xuY29uc3QgRXhwcmVzc2lvbnMgPSAnRXhwcmVzc2lvbnMnO1xuY29uc3QgTW90aW9ucyA9ICdNb3Rpb25zJztcblxuY29uc3QgVXNlckRhdGEgPSAnVXNlckRhdGEnO1xuY29uc3QgTmFtZSA9ICdOYW1lJztcbmNvbnN0IEZpbGVQYXRoID0gJ0ZpbGUnO1xuY29uc3QgSWQgPSAnSWQnO1xuY29uc3QgSWRzID0gJ0lkcyc7XG5jb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcblxuLy8gTW90aW9uc1xuY29uc3QgSWRsZSA9ICdJZGxlJztcbmNvbnN0IFRhcEJvZHkgPSAnVGFwQm9keSc7XG5jb25zdCBQaW5jaEluID0gJ1BpbmNoSW4nO1xuY29uc3QgUGluY2hPdXQgPSAnUGluY2hPdXQnO1xuY29uc3QgU2hha2UgPSAnU2hha2UnO1xuY29uc3QgRmxpY2tIZWFkID0gJ0ZsaWNrSGVhZCc7XG5jb25zdCBQYXJhbWV0ZXIgPSAnUGFyYW1ldGVyJztcblxuY29uc3QgU291bmRQYXRoID0gJ1NvdW5kJztcbmNvbnN0IEZhZGVJblRpbWUgPSAnRmFkZUluVGltZSc7XG5jb25zdCBGYWRlT3V0VGltZSA9ICdGYWRlT3V0VGltZSc7XG5cbi8vIExheW91dFxuY29uc3QgQ2VudGVyWCA9ICdDZW50ZXJYJztcbmNvbnN0IENlbnRlclkgPSAnQ2VudGVyWSc7XG5jb25zdCBYID0gJ1gnO1xuY29uc3QgWSA9ICdZJztcbmNvbnN0IFdpZHRoID0gJ1dpZHRoJztcbmNvbnN0IEhlaWdodCA9ICdIZWlnaHQnO1xuXG5jb25zdCBMaXBTeW5jID0gJ0xpcFN5bmMnO1xuY29uc3QgRXllQmxpbmsgPSAnRXllQmxpbmsnO1xuXG5jb25zdCBJbml0UGFyYW1ldGVyID0gJ2luaXRfcGFyYW0nO1xuY29uc3QgSW5pdFBhcnRzVmlzaWJsZSA9ICdpbml0X3BhcnRzX3Zpc2libGUnO1xuY29uc3QgVmFsID0gJ3ZhbCc7XG5cbmVudW0gRnJlcXVlc3ROb2RlIHtcbiAgRnJlcXVlc3ROb2RlX0dyb3VwcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKVxuICBGcmVxdWVzdE5vZGVfTW9jLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhNb2MpXG4gIEZyZXF1ZXN0Tm9kZV9Nb3Rpb25zLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhNb3Rpb25zKVxuICBGcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25zKVxuICBGcmVxdWVzdE5vZGVfVGV4dHVyZXMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKFRleHR1cmVzKVxuICBGcmVxdWVzdE5vZGVfUGh5c2ljcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljcylcbiAgRnJlcXVlc3ROb2RlX1Bvc2UsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2UpXG4gIEZyZXF1ZXN0Tm9kZV9IaXRBcmVhcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoSGl0QXJlYXMpXG59XG5cbi8qKlxuICogTW9kZWwzSnNvbuODkeODvOOCteODvFxuICpcbiAqIG1vZGVsMy5qc29u44OV44Kh44Kk44Or44KS44OR44O844K544GX44Gm5YCk44KS5Y+W5b6X44GZ44KLXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFNldHRpbmdKc29uIGV4dGVuZHMgSUN1YmlzbU1vZGVsU2V0dGluZyB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAgICBNb2RlbDNKc29u44KS44OQ44Kk44OI6YWN5YiX44Go44GX44Gm6Kqt44G/6L6844KT44Gg44OH44O844K/44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAgTW9kZWwzSnNvbuOBruODh+ODvOOCv+OCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG5cbiAgICBpZiAodGhpcy5fanNvbikge1xuICAgICAgdGhpcy5fanNvblZhbHVlID0gbmV3IGNzbVZlY3RvcjxWYWx1ZT4oKTtcblxuICAgICAgLy8g6aCG55Wq44GvZW51bSBGcmVxdWVzdE5vZGXjgajkuIDoh7TjgZXjgZvjgotcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayh0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEdyb3VwcykpO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1vYylcbiAgICAgICk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTW90aW9ucylcbiAgICAgICk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbnMpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRleHR1cmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NlKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayh0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEhpdEFyZWFzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XG5cbiAgICB0aGlzLl9qc29uVmFsdWUgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbUpzb27jgqrjg5bjgrjjgqfjgq/jg4jjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiBDdWJpc21Kc29uXG4gICAqL1xuICBwdWJsaWMgR2V0SnNvbigpOiBDdWJpc21Kc29uIHtcbiAgICByZXR1cm4gdGhpcy5fanNvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbEZpbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb2RlbEZpbGUoKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW9jKS5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgYzkvb/nlKjjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICog44OG44Kv44K544OB44Oj44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0VGV4dHVyZUNvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RUZXh0dXJlRmlsZXMoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1RleHR1cmVzKS5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44GM6YWN572u44GV44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44GM6YWN572u44GV44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0VGV4dHVyZURpcmVjdG9yeSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHRleHR1cmVQYXRoID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoMClcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcblxuICAgIGNvbnN0IHBhdGhBcnJheSA9IHRleHR1cmVQYXRoLnNwbGl0KCcvJyk7XG4gICAgLy8g5pyA5b6M44Gu6KaB57Sg44Gv44OG44Kv44K544OB44Oj5ZCN44Gq44Gu44Gn5LiN6KaBXG4gICAgY29uc3QgYXJyYXlMZW5ndGggPSBwYXRoQXJyYXkubGVuZ3RoIC0gMTtcbiAgICBsZXQgdGV4dHVyZURpcmVjdG9yeVN0ciA9ICcnO1xuXG4gICAgLy8g5YiG5Ymy44GX44Gf44OR44K544KS57WQ5ZCIXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUxlbmd0aDsgaSsrKSB7XG4gICAgICB0ZXh0dXJlRGlyZWN0b3J5U3RyICs9IHBhdGhBcnJheVtpXTtcbiAgICAgIGlmIChpIDwgYXJyYXlMZW5ndGggLSAxKSB7XG4gICAgICAgIHRleHR1cmVEaXJlY3RvcnlTdHIgKz0gJy8nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0ZXh0dXJlRGlyZWN0b3J5U3RyO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0VGV4dHVyZUZpbGVOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1RleHR1cmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRIaXRBcmVhc0NvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RIaXRBcmVhcygpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfSGl0QXJlYXMpLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JROOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44GuaW5kZXhcbiAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JRFxuICAgKi9cbiAgcHVibGljIGdldEhpdEFyZWFJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfSGl0QXJlYXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn+WQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0SGl0QXJlYU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfSGl0QXJlYXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRQaHlzaWNzRmlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdFBoeXNpY3NGaWxlKCkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUGh5c2ljcykuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE5YiH44KK5pu/44GI6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OR44O844OE5YiH44KK5pu/44GI6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0UG9zZUZpbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RQb3NlRmlsZSgpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1Bvc2UpLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsFxuICAgKi9cbiAgcHVibGljIGdldEV4cHJlc3Npb25Db3VudCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0RXhwcmVzc2lvbkZpbGUoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zKS5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44KS6K2Y5Yil44GZ44KL5ZCN5YmN77yI5Yil5ZCN77yJ44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDooajmg4Xjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRFeHByZXNzaW9uTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVQYXRoKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkdyb3VwQ291bnQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwcygpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldEtleXMoKVxuICAgICAgLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkdyb3VwTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwcygpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldEtleXMoKVxuICAgICAgLmF0KGluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjgavlkKvjgb7jgozjgovjg6Ljg7zjgrfjg6fjg7Pjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Db3VudChncm91cE5hbWU6IHN0cmluZyk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog44Kw44Or44O844OX5ZCN44Go44Kk44Oz44OH44OD44Kv44K55YCk44GL44KJ44Oi44O844K344On44Oz44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCAgICAg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBOYW1lKGdyb3VwTmFtZSkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVQYXRoKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+OCteOCpuODs+ODieODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uU291bmRGaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Tb3VuZEZpbGUoZ3JvdXBOYW1lLCBpbmRleCkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNvdW5kUGF0aClcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkZhZGVJbihncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgcmV0dXJuIC0xLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PntYLkuobmmYLjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25GYWRlT3V0KGdyb3VwTmFtZSwgaW5kZXgpKSB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jg5XjgqHjgqTjg6vlkI3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jg5XjgqHjgqTjg6vlkI1cbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YUZpbGUoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdFVzZXJEYXRhRmlsZSgpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Os44Kk44Ki44Km44OI5oOF5aCx44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBvdXRMYXlvdXRNYXAgY3NtTWFw44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEByZXR1cm4gdHJ1ZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXRMYXlvdXRNYXAob3V0TGF5b3V0TWFwOiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogYm9vbGVhbiB7XG4gICAgLy8g5a2Y5Zyo44GX44Gq44GE6KaB57Sg44Gr44Ki44Kv44K744K544GZ44KL44Go44Ko44Op44O844Gr44Gq44KL44Gf44KBVmFsdWXjgYxudWxs44Gu5aC05ZCI44GvbnVsbOOCkuS7o+WFpeOBmeOCi1xuICAgIGNvbnN0IG1hcDogY3NtTWFwPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTGF5b3V0KVxuICAgICAgLmdldE1hcCgpO1xuXG4gICAgaWYgKG1hcCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHJldCA9IGZhbHNlO1xuXG4gICAgZm9yIChcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSBtYXAuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbChtYXAuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBvdXRMYXlvdXRNYXAuc2V0VmFsdWUoaXRlLnB0cigpLmZpcnN0LCBpdGUucHRyKCkuc2Vjb25kLnRvRmxvYXQoKSk7XG4gICAgICByZXQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBudW0gPSAwO1xuICAgIGZvciAoXG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICBpKytcbiAgICApIHtcbiAgICAgIGNvbnN0IHJlZkk6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcbiAgICAgIGlmIChyZWZJLmlzTnVsbCgpIHx8IHJlZkkuaXNFcnJvcigpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IEV5ZUJsaW5rKSB7XG4gICAgICAgIG51bSA9IHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhJZHMpLmdldFZlY3RvcigpLmdldFNpemUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga5JROOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SURcbiAgICovXG4gIHB1YmxpYyBnZXRFeWVCbGlua1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgIGkrK1xuICAgICkge1xuICAgICAgY29uc3QgcmVmSTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgaWYgKHJlZkkuaXNOdWxsKCkgfHwgcmVmSS5pc0Vycm9yKCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWZJLmdldFZhbHVlQnlTdHJpbmcoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmspIHtcbiAgICAgICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICByZWZJLmdldFZhbHVlQnlTdHJpbmcoSWRzKS5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpLmdldFJhd1N0cmluZygpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsFxuICAgKi9cbiAgcHVibGljIGdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TGlwU3luY1BhcmFtZXRlcnMoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgbGV0IG51bSA9IDA7XG4gICAgZm9yIChcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgIGkrK1xuICAgICkge1xuICAgICAgY29uc3QgcmVmSTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgaWYgKHJlZkkuaXNOdWxsKCkgfHwgcmVmSS5pc0Vycm9yKCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWZJLmdldFZhbHVlQnlTdHJpbmcoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gTGlwU3luYykge1xuICAgICAgICBudW0gPSByZWZJLmdldFZhbHVlQnlTdHJpbmcoSWRzKS5nZXRWZWN0b3IoKS5nZXRTaXplKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudW07XG4gIH1cblxuICAvKipcbiAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKi9cbiAgcHVibGljIGdldExpcFN5bmNQYXJhbWV0ZXJJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TGlwU3luY1BhcmFtZXRlcnMoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgIGkrK1xuICAgICkge1xuICAgICAgY29uc3QgcmVmSTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgaWYgKHJlZkkuaXNOdWxsKCkgfHwgcmVmSS5pc0Vycm9yKCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWZJLmdldFZhbHVlQnlTdHJpbmcoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gTGlwU3luYykge1xuICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgIHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhJZHMpLmdldFZhbHVlQnlJbmRleChpbmRleCkuZ2V0UmF3U3RyaW5nKClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vZGVsRmlsZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vYyk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0VGV4dHVyZUZpbGVzKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdEhpdEFyZWFzKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfSGl0QXJlYXMpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdFBoeXNpY3NGaWxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUGh5c2ljcyk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg53jg7zjgrroqK3lrprjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0UG9zZUZpbGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Qb3NlKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RFeHByZXNzaW9uRmlsZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChcbiAgICAgIEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnNcbiAgICApO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvbkdyb3VwcygpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSAg44Kw44Or44O844OX5ZCNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uU291bmRGaWxlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291bmRQYXRoKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+ODleOCp+ODvOODieOCpOODs+aZgumWk+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RNb3Rpb25GYWRlSW4oZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+ODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RNb3Rpb25GYWRlT3V0KGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogVXNlckRhdGHjga7jg5XjgqHjgqTjg6vlkI3jgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0VXNlckRhdGFGaWxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnm67jgbHjgaHjgavlr77lv5zku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzKCk6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNOdWxsKCkgfHxcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNFcnJvcigpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgICsraVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpXG4gICAgICAgICAgLmdldFJhd1N0cmluZygpID09IEV5ZUJsaW5rXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+WvvuW/nOS7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmlzTnVsbCgpIHx8XG4gICAgICB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmlzRXJyb3IoKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgKytpXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKCkgPT0gTGlwU3luY1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIF9qc29uOiBDdWJpc21Kc29uO1xuICBwcml2YXRlIF9qc29uVmFsdWU6IGNzbVZlY3RvcjxWYWx1ZT47XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vZGVsc2V0dGluZ2pzb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gPSAkLkN1YmlzbU1vZGVsU2V0dGluZ0pzb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gPSAkLkN1YmlzbU1vZGVsU2V0dGluZ0pzb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuXG4vKipcbiAqIOWRvOWQuOapn+iDvVxuICpcbiAqIOWRvOWQuOapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtQnJlYXRoIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogQ3ViaXNtQnJlYXRoIHtcbiAgICByZXR1cm4gbmV3IEN1YmlzbUJyZWF0aCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxuICAgKiBAcGFyYW0gaW5zdGFuY2Ug5a++6LGh44GuQ3ViaXNtQnJlYXRoXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtQnJlYXRoKTogdm9pZCB7XG4gICAgaWYgKGluc3RhbmNlICE9IG51bGwpIHtcbiAgICAgIGluc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5ZG85ZC444Gu44OR44Op44Oh44O844K/44Gu57SQ44Gl44GRXG4gICAqIEBwYXJhbSBicmVhdGhQYXJhbWV0ZXJzIOWRvOWQuOOCkue0kOOBpeOBkeOBn+OBhOODkeODqeODoeODvOOCv+OBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlcnMoYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+KTogdm9pZCB7XG4gICAgdGhpcy5fYnJlYXRoUGFyYW1ldGVycyA9IGJyZWF0aFBhcmFtZXRlcnM7XG4gIH1cblxuICAvKipcbiAgICog5ZG85ZC444Gr57SQ44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5ZG85ZC444Gr57SQ44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVycygpOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT4ge1xuICAgIHJldHVybiB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2N1cnJlbnRUaW1lICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICBjb25zdCB0OiBudW1iZXIgPSB0aGlzLl9jdXJyZW50VGltZSAqIDIuMCAqIDMuMTQxNTk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIGNvbnN0IGRhdGE6IEJyZWF0aFBhcmFtZXRlckRhdGEgPSB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzLmF0KGkpO1xuXG4gICAgICBtb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgIGRhdGEucGFyYW1ldGVySWQsXG4gICAgICAgIGRhdGEub2Zmc2V0ICsgZGF0YS5wZWFrICogTWF0aC5zaW4odCAvIGRhdGEuY3ljbGUpLFxuICAgICAgICBkYXRhLndlaWdodFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY3VycmVudFRpbWUgPSAwLjA7XG4gIH1cblxuICBfYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+OyAvLyDlkbzlkLjjgavjgbLjgoLjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcbiAgX2N1cnJlbnRUaW1lOiBudW1iZXI7IC8vIOepjeeul+aZgumWk1vnp5JdXG59XG5cbi8qKlxuICog5ZG85ZC444Gu44OR44Op44Oh44O844K/5oOF5aCxXG4gKi9cbmV4cG9ydCBjbGFzcyBCcmVhdGhQYXJhbWV0ZXJEYXRhIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcGFyYW0gb2Zmc2V0ICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7jgqrjg5Xjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHBlYWsgICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXG4gICAqIEBwYXJhbSBjeWNsZSAgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruWRqOacn1xuICAgKiBAcGFyYW0gd2VpZ2h0ICAgICAgICDjg5Hjg6njg6Hjg7zjgr/jgbjjga7ph43jgb9cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhcmFtZXRlcklkPzogQ3ViaXNtSWRIYW5kbGUsXG4gICAgb2Zmc2V0PzogbnVtYmVyLFxuICAgIHBlYWs/OiBudW1iZXIsXG4gICAgY3ljbGU/OiBudW1iZXIsXG4gICAgd2VpZ2h0PzogbnVtYmVyXG4gICkge1xuICAgIHRoaXMucGFyYW1ldGVySWQgPSBwYXJhbWV0ZXJJZCA9PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1ldGVySWQ7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgPT0gdW5kZWZpbmVkID8gMC4wIDogb2Zmc2V0O1xuICAgIHRoaXMucGVhayA9IHBlYWsgPT0gdW5kZWZpbmVkID8gMC4wIDogcGVhaztcbiAgICB0aGlzLmN5Y2xlID0gY3ljbGUgPT0gdW5kZWZpbmVkID8gMC4wIDogY3ljbGU7XG4gICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQgPT0gdW5kZWZpbmVkID8gMC4wIDogd2VpZ2h0O1xuICB9XG5cbiAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxcXG4gIG9mZnNldDogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7jgqrjg5Xjgrvjg4Pjg4hcbiAgcGVhazogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7pq5jjgZVcbiAgY3ljbGU6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXG4gIHdlaWdodDogbnVtYmVyOyAvLyDjg5Hjg6njg6Hjg7zjgr/jgbjjga7ph43jgb9cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtYnJlYXRoJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gJC5CcmVhdGhQYXJhbWV0ZXJEYXRhO1xuICBleHBvcnQgdHlwZSBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gJC5CcmVhdGhQYXJhbWV0ZXJEYXRhO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtQnJlYXRoID0gJC5DdWJpc21CcmVhdGg7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUJyZWF0aCA9ICQuQ3ViaXNtQnJlYXRoO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgSUN1YmlzbU1vZGVsU2V0dGluZyB9IGZyb20gJy4uL2ljdWJpc21tb2RlbHNldHRpbmcnO1xuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcblxuLyoqXG4gKiDoh6rli5Xjgb7jgbDjgZ/jgY3mqZ/og71cbiAqXG4gKiDoh6rli5Xjgb7jgbDjgZ/jgY3mqZ/og73jgpLmj5DkvpvjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUV5ZUJsaW5rIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi1xuICAgKiBAcGFyYW0gbW9kZWxTZXR0aW5nIOODouODh+ODq+OBruioreWumuaDheWgsVxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAbm90ZSDlvJXmlbDjgYxOVUxM44Gu5aC05ZCI44CB44OR44Op44Oh44O844K/SUTjgYzoqK3lrprjgZXjgozjgabjgYTjgarjgYTnqbrjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxuICAgIG1vZGVsU2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZyA9IG51bGxcbiAgKTogQ3ViaXNtRXllQmxpbmsge1xuICAgIHJldHVybiBuZXcgQ3ViaXNtRXllQmxpbmsobW9kZWxTZXR0aW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7noLTmo4RcbiAgICogQHBhcmFtIGV5ZUJsaW5rIOWvvuixoeOBrkN1YmlzbUV5ZUJsaW5rXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShleWVCbGluazogQ3ViaXNtRXllQmxpbmspOiB2b2lkIHtcbiAgICBpZiAoZXllQmxpbmsgIT0gbnVsbCkge1xuICAgICAgZXllQmxpbmsgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgb7jgbDjgZ/jgY3jga7plpPpmpTjga7oqK3lrppcbiAgICogQHBhcmFtIGJsaW5raW5nSW50ZXJ2YWwg44G+44Gw44Gf44GN44Gu6ZaT6ZqU44Gu5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRCbGlua2luZ0ludGVydmFsKGJsaW5raW5nSW50ZXJ2YWw6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzID0gYmxpbmtpbmdJbnRlcnZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgb7jgbDjgZ/jgY3jga7jg6Ljg7zjgrfjg6fjg7Pjga7oqbPntLDoqK3lrppcbiAgICogQHBhcmFtIGNsb3NpbmcgICDjgb7jgbbjgZ/jgpLplonjgZjjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgKiBAcGFyYW0gY2xvc2VkICAgIOOBvuOBtuOBn+OCkumWieOBmOOBpuOBhOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gICAqIEBwYXJhbSBvcGVuaW5nICAg44G+44G244Gf44KS6ZaL44GP5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRCbGlua2luZ1NldHRpbmcoXG4gICAgY2xvc2luZzogbnVtYmVyLFxuICAgIGNsb3NlZDogbnVtYmVyLFxuICAgIG9wZW5pbmc6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcyA9IGNsb3Npbmc7XG4gICAgdGhpcy5fY2xvc2VkU2Vjb25kcyA9IGNsb3NlZDtcbiAgICB0aGlzLl9vcGVuaW5nU2Vjb25kcyA9IG9wZW5pbmc7XG4gIH1cblxuICAvKipcbiAgICog44G+44Gw44Gf44GN44GV44Gb44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4jjga7oqK3lrppcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkcyDjg5Hjg6njg6Hjg7zjgr/jga5JROOBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlcklkcyhwYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4pOiB2b2lkIHtcbiAgICB0aGlzLl9wYXJhbWV0ZXJJZHMgPSBwYXJhbWV0ZXJJZHM7XG4gIH1cblxuICAvKipcbiAgICog44G+44Gw44Gf44GN44GV44Gb44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlcklkcygpOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+IHtcbiAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVySWRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuICAgIGxldCBwYXJhbWV0ZXJWYWx1ZTogbnVtYmVyO1xuICAgIGxldCB0ID0gMC4wO1xuXG4gICAgc3dpdGNoICh0aGlzLl9ibGlua2luZ1N0YXRlKSB7XG4gICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3Npbmc6XG4gICAgICAgIHQgPVxuICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cbiAgICAgICAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcztcblxuICAgICAgICBpZiAodCA+PSAxLjApIHtcbiAgICAgICAgICB0ID0gMS4wO1xuICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zZWQ7XG4gICAgICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSAxLjAgLSB0O1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zZWQ6XG4gICAgICAgIHQgPVxuICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cbiAgICAgICAgICB0aGlzLl9jbG9zZWRTZWNvbmRzO1xuXG4gICAgICAgIGlmICh0ID49IDEuMCkge1xuICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9PcGVuaW5nO1xuICAgICAgICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtZXRlclZhbHVlID0gMC4wO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9PcGVuaW5nOlxuICAgICAgICB0ID1cbiAgICAgICAgICAodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgdGhpcy5fb3BlbmluZ1NlY29uZHM7XG5cbiAgICAgICAgaWYgKHQgPj0gMS4wKSB7XG4gICAgICAgICAgdCA9IDEuMDtcbiAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfSW50ZXJ2YWw7XG4gICAgICAgICAgdGhpcy5fbmV4dEJsaW5raW5nVGltZSA9IHRoaXMuZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtZXRlclZhbHVlID0gdDtcblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfSW50ZXJ2YWw6XG4gICAgICAgIGlmICh0aGlzLl9uZXh0QmxpbmtpbmdUaW1lIDwgdGhpcy5fdXNlclRpbWVTZWNvbmRzKSB7XG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3Npbmc7XG4gICAgICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSAxLjA7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX0ZpcnN0OlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0ludGVydmFsO1xuICAgICAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gdGhpcy5kZXRlcm1pbk5leHRCbGlua2luZ1RpbWluZygpO1xuXG4gICAgICAgIHBhcmFtZXRlclZhbHVlID0gMS4wO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoIUN1YmlzbUV5ZUJsaW5rLkNsb3NlSWZaZXJvKSB7XG4gICAgICBwYXJhbWV0ZXJWYWx1ZSA9IC1wYXJhbWV0ZXJWYWx1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcmFtZXRlcklkcy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX3BhcmFtZXRlcklkcy5hdChpKSwgcGFyYW1ldGVyVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIG1vZGVsU2V0dGluZyDjg6Ljg4fjg6vjga7oqK3lrprmg4XloLFcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihtb2RlbFNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcpIHtcbiAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfRmlyc3Q7XG4gICAgdGhpcy5fbmV4dEJsaW5raW5nVGltZSA9IDAuMDtcbiAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgPSA0LjA7XG4gICAgdGhpcy5fY2xvc2luZ1NlY29uZHMgPSAwLjE7XG4gICAgdGhpcy5fY2xvc2VkU2Vjb25kcyA9IDAuMDU7XG4gICAgdGhpcy5fb3BlbmluZ1NlY29uZHMgPSAwLjE1O1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuXG4gICAgaWYgKG1vZGVsU2V0dGluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOyArK2kpIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlcklkcy5wdXNoQmFjayhtb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZChpKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOasoeOBrueerOOBjeOBruOCv+OCpOODn+ODs+OCsOOBruaxuuWumlxuICAgKlxuICAgKiBAcmV0dXJuIOasoeOBruOBvuOBsOOBn+OBjeOCkuihjOOBhuaZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmcoKTogbnVtYmVyIHtcbiAgICBjb25zdCByOiBudW1iZXIgPSBNYXRoLnJhbmRvbSgpO1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKyByICogKDIuMCAqIHRoaXMuX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzIC0gMS4wKVxuICAgICk7XG4gIH1cblxuICBfYmxpbmtpbmdTdGF0ZTogbnVtYmVyOyAvLyDnj77lnKjjga7nirbmhYtcbiAgX3BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g5pON5L2c5a++6LGh44Gu44OR44Op44Oh44O844K/44GuSUTjga7jg6rjgrnjg4hcbiAgX25leHRCbGlua2luZ1RpbWU6IG51bWJlcjsgLy8g5qyh44Gu44G+44Gw44Gf44GN44Gu5pmC5Yi7W+enkl1cbiAgX3N0YXRlU3RhcnRUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDnj77lnKjjga7nirbmhYvjgYzplovlp4vjgZfjgZ/mmYLliLtb56eSXVxuICBfYmxpbmtpbmdJbnRlcnZhbFNlY29uZHM6IG51bWJlcjsgLy8g44G+44Gw44Gf44GN44Gu6ZaT6ZqUW+enkl1cbiAgX2Nsb3NpbmdTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBtuOBn+OCkumWieOBmOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gIF9jbG9zZWRTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBtuOBn+OCkumWieOBmOOBpuOBhOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gIF9vcGVuaW5nU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbbjgZ/jgpLplovjgY/li5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG5cbiAgLyoqXG4gICAqIElE44Gn5oyH5a6a44GV44KM44Gf55uu44Gu44OR44Op44Oh44O844K/44GM44CBMOOBruOBqOOBjeOBq+mWieOBmOOCi+OBquOCiSB0cnVlIOOAgTHjga7mmYLjgavplonjgZjjgovjgarjgokgZmFsc2Ug44CCXG4gICAqL1xuICBzdGF0aWMgcmVhZG9ubHkgQ2xvc2VJZlplcm86IGJvb2xlYW4gPSB0cnVlO1xufVxuXG4vKipcbiAqIOOBvuOBsOOBn+OBjeOBrueKtuaFi1xuICpcbiAqIOOBvuOBsOOBn+OBjeOBrueKtuaFi+OCkuihqOOBmeWIl+aMmeWei1xuICovXG5leHBvcnQgZW51bSBFeWVTdGF0ZSB7XG4gIEV5ZVN0YXRlX0ZpcnN0ID0gMCwgLy8g5Yid5pyf54q25oWLXG4gIEV5ZVN0YXRlX0ludGVydmFsLCAvLyDjgb7jgbDjgZ/jgY3jgZfjgabjgYTjgarjgYTnirbmhYtcbiAgRXllU3RhdGVfQ2xvc2luZywgLy8g44G+44G244Gf44GM6ZaJ44GY44Gm44GE44GP6YCU5Lit44Gu54q25oWLXG4gIEV5ZVN0YXRlX0Nsb3NlZCwgLy8g44G+44G244Gf44GM6ZaJ44GY44Gm44GE44KL54q25oWLXG4gIEV5ZVN0YXRlX09wZW5pbmcsIC8vIOOBvuOBtuOBn+OBjOmWi+OBhOOBpuOBhOOBj+mAlOS4reOBrueKtuaFi1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21leWVibGluayc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtRXllQmxpbmsgPSAkLkN1YmlzbUV5ZUJsaW5rO1xuICBleHBvcnQgdHlwZSBDdWJpc21FeWVCbGluayA9ICQuQ3ViaXNtRXllQmxpbms7XG4gIGV4cG9ydCBjb25zdCBFeWVTdGF0ZSA9ICQuRXllU3RhdGU7XG4gIGV4cG9ydCB0eXBlIEV5ZVN0YXRlID0gJC5FeWVTdGF0ZTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtVmVjdG9yLCBpdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUpzb24sIFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5cbmNvbnN0IEVwc2lsb24gPSAwLjAwMTtcbmNvbnN0IERlZmF1bHRGYWRlSW5TZWNvbmRzID0gMC41O1xuXG4vLyBQb3NlLmpzb27jga7jgr/jgrBcbmNvbnN0IEZhZGVJbiA9ICdGYWRlSW5UaW1lJztcbmNvbnN0IExpbmsgPSAnTGluayc7XG5jb25zdCBHcm91cHMgPSAnR3JvdXBzJztcbmNvbnN0IElkID0gJ0lkJztcblxuLyoqXG4gKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrppcbiAqXG4gKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7nrqHnkIbjgajoqK3lrprjgpLooYzjgYbjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBvc2Uge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAqIEBwYXJhbSBwb3NlM2pzb24gcG9zZTMuanNvbuOBruODh+ODvOOCv1xuICAgKiBAcGFyYW0gc2l6ZSBwb3NlMy5qc29u44Gu44OH44O844K/44Gu44K144Kk44K6W2J5dGVdXG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShwb3NlM2pzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21Qb3NlIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVBvc2UgPSBuZXcgQ3ViaXNtUG9zZSgpO1xuICAgIGNvbnN0IGpzb246IEN1YmlzbUpzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShwb3NlM2pzb24sIHNpemUpO1xuICAgIGNvbnN0IHJvb3Q6IFZhbHVlID0ganNvbi5nZXRSb290KCk7XG5cbiAgICAvLyDjg5Xjgqfjg7zjg4nmmYLplpPjga7mjIflrppcbiAgICBpZiAoIXJvb3QuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW4pLmlzTnVsbCgpKSB7XG4gICAgICByZXQuX2ZhZGVUaW1lU2Vjb25kcyA9IHJvb3RcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluKVxuICAgICAgICAudG9GbG9hdChEZWZhdWx0RmFkZUluU2Vjb25kcyk7XG5cbiAgICAgIGlmIChyZXQuX2ZhZGVUaW1lU2Vjb25kcyA8PSAwLjApIHtcbiAgICAgICAgcmV0Ll9mYWRlVGltZVNlY29uZHMgPSBEZWZhdWx0RmFkZUluU2Vjb25kcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg5Hjg7zjg4TjgrDjg6vjg7zjg5dcbiAgICBjb25zdCBwb3NlTGlzdEluZm86IFZhbHVlID0gcm9vdC5nZXRWYWx1ZUJ5U3RyaW5nKEdyb3Vwcyk7XG4gICAgY29uc3QgcG9zZUNvdW50OiBudW1iZXIgPSBwb3NlTGlzdEluZm8uZ2V0U2l6ZSgpO1xuXG4gICAgZm9yIChsZXQgcG9zZUluZGV4ID0gMDsgcG9zZUluZGV4IDwgcG9zZUNvdW50OyArK3Bvc2VJbmRleCkge1xuICAgICAgY29uc3QgaWRMaXN0SW5mbzogVmFsdWUgPSBwb3NlTGlzdEluZm8uZ2V0VmFsdWVCeUluZGV4KHBvc2VJbmRleCk7XG4gICAgICBjb25zdCBpZENvdW50OiBudW1iZXIgPSBpZExpc3RJbmZvLmdldFNpemUoKTtcbiAgICAgIGxldCBncm91cENvdW50ID0gMDtcblxuICAgICAgZm9yIChsZXQgZ3JvdXBJbmRleCA9IDA7IGdyb3VwSW5kZXggPCBpZENvdW50OyArK2dyb3VwSW5kZXgpIHtcbiAgICAgICAgY29uc3QgcGFydEluZm86IFZhbHVlID0gaWRMaXN0SW5mby5nZXRWYWx1ZUJ5SW5kZXgoZ3JvdXBJbmRleCk7XG4gICAgICAgIGNvbnN0IHBhcnREYXRhOiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUgPVxuICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgIHBhcnRJbmZvLmdldFZhbHVlQnlTdHJpbmcoSWQpLmdldFJhd1N0cmluZygpXG4gICAgICAgICAgKTtcblxuICAgICAgICBwYXJ0RGF0YS5wYXJ0SWQgPSBwYXJhbWV0ZXJJZDtcblxuICAgICAgICAvLyDjg6rjg7Pjgq/jgZnjgovjg5Hjg7zjg4Tjga7oqK3lrppcbiAgICAgICAgaWYgKCFwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKExpbmspLmlzTnVsbCgpKSB7XG4gICAgICAgICAgY29uc3QgbGlua0xpc3RJbmZvOiBWYWx1ZSA9IHBhcnRJbmZvLmdldFZhbHVlQnlTdHJpbmcoTGluayk7XG4gICAgICAgICAgY29uc3QgbGlua0NvdW50OiBudW1iZXIgPSBsaW5rTGlzdEluZm8uZ2V0U2l6ZSgpO1xuXG4gICAgICAgICAgZm9yIChsZXQgbGlua0luZGV4ID0gMDsgbGlua0luZGV4IDwgbGlua0NvdW50OyArK2xpbmtJbmRleCkge1xuICAgICAgICAgICAgY29uc3QgbGlua1BhcnQ6IFBhcnREYXRhID0gbmV3IFBhcnREYXRhKCk7XG4gICAgICAgICAgICBjb25zdCBsaW5rSWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgICAgICBsaW5rTGlzdEluZm8uZ2V0VmFsdWVCeUluZGV4KGxpbmtJbmRleCkuZ2V0U3RyaW5nKClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGxpbmtQYXJ0LnBhcnRJZCA9IGxpbmtJZDtcblxuICAgICAgICAgICAgcGFydERhdGEubGluay5wdXNoQmFjayhsaW5rUGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0Ll9wYXJ0R3JvdXBzLnB1c2hCYWNrKHBhcnREYXRhLmNsb25lKCkpO1xuXG4gICAgICAgICsrZ3JvdXBDb3VudDtcbiAgICAgIH1cblxuICAgICAgcmV0Ll9wYXJ0R3JvdXBDb3VudHMucHVzaEJhY2soZ3JvdXBDb3VudCk7XG4gICAgfVxuXG4gICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xuICAgKiBAcGFyYW0gcG9zZSDlr77osaHjga5DdWJpc21Qb3NlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShwb3NlOiBDdWJpc21Qb3NlKTogdm9pZCB7XG4gICAgaWYgKHBvc2UgIT0gbnVsbCkge1xuICAgICAgcG9zZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIOWJjeWbnuOBruODouODh+ODq+OBqOWQjOOBmOOBp+OBquOBhOWgtOWQiOOBr+WIneacn+WMluOBjOW/heimgVxuICAgIGlmIChtb2RlbCAhPSB0aGlzLl9sYXN0TW9kZWwpIHtcbiAgICAgIC8vIOODkeODqeODoeODvOOCv+OCpOODs+ODh+ODg+OCr+OCueOBruWIneacn+WMllxuICAgICAgdGhpcy5yZXNldChtb2RlbCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbGFzdE1vZGVsID0gbW9kZWw7XG5cbiAgICAvLyDoqK3lrprjgYvjgonmmYLplpPjgpLlpInmm7TjgZnjgovjgajjgIHntYzpgY7mmYLplpPjgYzjg57jgqTjg4rjgrnjgavjgarjgovkuovjgYzjgYLjgovjga7jgafjgIHntYzpgY7mmYLplpMw44Go44GX44Gm5a++5b+cXG4gICAgaWYgKGRlbHRhVGltZVNlY29uZHMgPCAwLjApIHtcbiAgICAgIGRlbHRhVGltZVNlY29uZHMgPSAwLjA7XG4gICAgfVxuXG4gICAgbGV0IGJlZ2luSW5kZXggPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGNvbnN0IHBhcnRHcm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuYXQoaSk7XG5cbiAgICAgIHRoaXMuZG9GYWRlKG1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzLCBiZWdpbkluZGV4LCBwYXJ0R3JvdXBDb3VudCk7XG5cbiAgICAgIGJlZ2luSW5kZXggKz0gcGFydEdyb3VwQ291bnQ7XG4gICAgfVxuXG4gICAgdGhpcy5jb3B5UGFydE9wYWNpdGllcyhtb2RlbCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo56S644KS5Yid5pyf5YyWXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQG5vdGUg5LiN6YCP5piO5bqm44Gu5Yid5pyf5YCk44GMMOOBp+OBquOBhOODkeODqeODoeODvOOCv+OBr+OAgeS4jemAj+aYjuW6puOCku+8keOBq+ioreWumuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlc2V0KG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIGxldCBiZWdpbkluZGV4ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFydEdyb3VwQ291bnRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBjb25zdCBncm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuYXQoaSk7XG5cbiAgICAgIGZvciAobGV0IGo6IG51bWJlciA9IGJlZ2luSW5kZXg7IGogPCBiZWdpbkluZGV4ICsgZ3JvdXBDb3VudDsgKytqKSB7XG4gICAgICAgIHRoaXMuX3BhcnRHcm91cHMuYXQoaikuaW5pdGlhbGl6ZShtb2RlbCk7XG5cbiAgICAgICAgY29uc3QgcGFydHNJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5wYXJ0SW5kZXg7XG4gICAgICAgIGNvbnN0IHBhcmFtSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaikucGFyYW1ldGVySW5kZXg7XG5cbiAgICAgICAgaWYgKHBhcnRzSW5kZXggPCAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgaiA9PSBiZWdpbkluZGV4ID8gMS4wIDogMC4wKTtcbiAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtSW5kZXgsIGogPT0gYmVnaW5JbmRleCA/IDEuMCA6IDAuMCk7XG5cbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLmxpbmsuZ2V0U2l6ZSgpOyArK2spIHtcbiAgICAgICAgICB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLmxpbmsuYXQoaykuaW5pdGlhbGl6ZShtb2RlbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYmVnaW5JbmRleCArPSBncm91cENvdW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgpLjgrPjg5Tjg7xcbiAgICpcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKi9cbiAgcHVibGljIGNvcHlQYXJ0T3BhY2l0aWVzKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIGZvciAoXG4gICAgICBsZXQgZ3JvdXBJbmRleCA9IDA7XG4gICAgICBncm91cEluZGV4IDwgdGhpcy5fcGFydEdyb3Vwcy5nZXRTaXplKCk7XG4gICAgICArK2dyb3VwSW5kZXhcbiAgICApIHtcbiAgICAgIGNvbnN0IHBhcnREYXRhOiBQYXJ0RGF0YSA9IHRoaXMuX3BhcnRHcm91cHMuYXQoZ3JvdXBJbmRleCk7XG5cbiAgICAgIGlmIChwYXJ0RGF0YS5saW5rLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlOyAvLyDpgKPli5XjgZnjgovjg5Hjg6njg6Hjg7zjgr/jga/jgarjgYRcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFydEluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpLnBhcnRJbmRleDtcbiAgICAgIGNvbnN0IG9wYWNpdHk6IG51bWJlciA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXgpO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgbGlua0luZGV4ID0gMDtcbiAgICAgICAgbGlua0luZGV4IDwgcGFydERhdGEubGluay5nZXRTaXplKCk7XG4gICAgICAgICsrbGlua0luZGV4XG4gICAgICApIHtcbiAgICAgICAgY29uc3QgbGlua1BhcnQ6IFBhcnREYXRhID0gcGFydERhdGEubGluay5hdChsaW5rSW5kZXgpO1xuICAgICAgICBjb25zdCBsaW5rUGFydEluZGV4OiBudW1iZXIgPSBsaW5rUGFydC5wYXJ0SW5kZXg7XG5cbiAgICAgICAgaWYgKGxpbmtQYXJ0SW5kZXggPCAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgobGlua1BhcnRJbmRleCwgb3BhY2l0eSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBruODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuOAglxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqIEBwYXJhbSBiZWdpbkluZGV4IOODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuODkeODvOODhOOCsOODq+ODvOODl+OBruWFiOmgreOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gcGFydEdyb3VwQ291bnQg44OV44Kn44O844OJ5pON5L2c44KS6KGM44GG44OR44O844OE44Kw44Or44O844OX44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZG9GYWRlKFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgYmVnaW5JbmRleDogbnVtYmVyLFxuICAgIHBhcnRHcm91cENvdW50OiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgbGV0IHZpc2libGVQYXJ0SW5kZXggPSAtMTtcbiAgICBsZXQgbmV3T3BhY2l0eSA9IDEuMDtcblxuICAgIGNvbnN0IHBoaSA9IDAuNTtcbiAgICBjb25zdCBiYWNrT3BhY2l0eVRocmVzaG9sZCA9IDAuMTU7XG5cbiAgICAvLyDnj77lnKjjgIHooajnpLrnirbmhYvjgavjgarjgaPjgabjgYTjgovjg5Hjg7zjg4TjgpLlj5blvpdcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBiZWdpbkluZGV4OyBpIDwgYmVnaW5JbmRleCArIHBhcnRHcm91cENvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHBhcnRJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJ0SW5kZXg7XG4gICAgICBjb25zdCBwYXJhbUluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcmFtZXRlckluZGV4O1xuXG4gICAgICBpZiAobW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtSW5kZXgpID4gRXBzaWxvbikge1xuICAgICAgICBpZiAodmlzaWJsZVBhcnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2aXNpYmxlUGFydEluZGV4ID0gaTtcbiAgICAgICAgbmV3T3BhY2l0eSA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXgpO1xuXG4gICAgICAgIC8vIOaWsOOBl+OBhOS4jemAj+aYjuW6puOCkuioiOeul1xuICAgICAgICBuZXdPcGFjaXR5ICs9IGRlbHRhVGltZVNlY29uZHMgLyB0aGlzLl9mYWRlVGltZVNlY29uZHM7XG5cbiAgICAgICAgaWYgKG5ld09wYWNpdHkgPiAxLjApIHtcbiAgICAgICAgICBuZXdPcGFjaXR5ID0gMS4wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPCAwKSB7XG4gICAgICB2aXNpYmxlUGFydEluZGV4ID0gMDtcbiAgICAgIG5ld09wYWNpdHkgPSAxLjA7XG4gICAgfVxuXG4gICAgLy8g6KGo56S644OR44O844OE44CB6Z2e6KGo56S644OR44O844OE44Gu5LiN6YCP5piO5bqm44KS6Kit5a6a44GZ44KLXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gYmVnaW5JbmRleDsgaSA8IGJlZ2luSW5kZXggKyBwYXJ0R3JvdXBDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwYXJ0c0luZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcnRJbmRleDtcblxuICAgICAgLy8g6KGo56S644OR44O844OE44Gu6Kit5a6aXG4gICAgICBpZiAodmlzaWJsZVBhcnRJbmRleCA9PSBpKSB7XG4gICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4LCBuZXdPcGFjaXR5KTsgLy8g5YWI44Gr6Kit5a6aXG4gICAgICB9XG4gICAgICAvLyDpnZ7ooajnpLrjg5Hjg7zjg4Tjga7oqK3lrppcbiAgICAgIGVsc2Uge1xuICAgICAgICBsZXQgb3BhY2l0eTogbnVtYmVyID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgpO1xuICAgICAgICBsZXQgYTE6IG51bWJlcjsgLy8g6KiI566X44Gr44KI44Gj44Gm5rGC44KB44KJ44KM44KL5LiN6YCP5piO5bqmXG5cbiAgICAgICAgaWYgKG5ld09wYWNpdHkgPCBwaGkpIHtcbiAgICAgICAgICBhMSA9IChuZXdPcGFjaXR5ICogKHBoaSAtIDEpKSAvIHBoaSArIDEuMDsgLy8gKDAsMSksKHBoaSxwaGkp44KS6YCa44KL55u057ea5byPXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYTEgPSAoKDEgLSBuZXdPcGFjaXR5KSAqIHBoaSkgLyAoMS4wIC0gcGhpKTsgLy8gKDEsMCksKHBoaSxwaGkp44KS6YCa44KL55u057ea5byPXG4gICAgICAgIH1cblxuICAgICAgICAvLyDog4zmma/jga7opovjgYjjgovlibLlkIjjgpLliLbpmZDjgZnjgovloLTlkIhcbiAgICAgICAgY29uc3QgYmFja09wYWNpdHk6IG51bWJlciA9ICgxLjAgLSBhMSkgKiAoMS4wIC0gbmV3T3BhY2l0eSk7XG5cbiAgICAgICAgaWYgKGJhY2tPcGFjaXR5ID4gYmFja09wYWNpdHlUaHJlc2hvbGQpIHtcbiAgICAgICAgICBhMSA9IDEuMCAtIGJhY2tPcGFjaXR5VGhyZXNob2xkIC8gKDEuMCAtIG5ld09wYWNpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wYWNpdHkgPiBhMSkge1xuICAgICAgICAgIG9wYWNpdHkgPSBhMTsgLy8g6KiI566X44Gu5LiN6YCP5piO5bqm44KI44KK44KC5aSn44GN44GR44KM44Gw77yI5r+D44GR44KM44Gw77yJ5LiN6YCP5piO5bqm44KS5LiK44GS44KLXG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgb3BhY2l0eSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2ZhZGVUaW1lU2Vjb25kcyA9IERlZmF1bHRGYWRlSW5TZWNvbmRzO1xuICAgIHRoaXMuX2xhc3RNb2RlbCA9IG51bGw7XG4gICAgdGhpcy5fcGFydEdyb3VwcyA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XG4gICAgdGhpcy5fcGFydEdyb3VwQ291bnRzID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XG4gIH1cblxuICBfcGFydEdyb3VwczogY3NtVmVjdG9yPFBhcnREYXRhPjsgLy8g44OR44O844OE44Kw44Or44O844OXXG4gIF9wYXJ0R3JvdXBDb3VudHM6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDjgZ3jgozjgZ7jgozjga7jg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lgIvmlbBcbiAgX2ZhZGVUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4nmmYLplpNb56eSXVxuICBfbGFzdE1vZGVsOiBDdWJpc21Nb2RlbDsgLy8g5YmN5Zue5pON5L2c44GX44Gf44Oi44OH44OrXG59XG5cbi8qKlxuICog44OR44O844OE44Gr44G+44Gk44KP44KL44OH44O844K/44KS566h55CGXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJ0RGF0YSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKHY/OiBQYXJ0RGF0YSkge1xuICAgIHRoaXMucGFyYW1ldGVySW5kZXggPSAwO1xuICAgIHRoaXMucGFydEluZGV4ID0gMDtcbiAgICB0aGlzLmxpbmsgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xuXG4gICAgaWYgKHYgIT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnBhcnRJZCA9IHYucGFydElkO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHYubGluay5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwodi5saW5rLmVuZCgpKTtcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5saW5rLnB1c2hCYWNrKGl0ZS5wdHIoKS5jbG9uZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIGFzc2lnbm1lbnQodjogUGFydERhdGEpOiBQYXJ0RGF0YSB7XG4gICAgdGhpcy5wYXJ0SWQgPSB2LnBhcnRJZDtcblxuICAgIGZvciAoXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHYubGluay5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHYubGluay5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIHRoaXMubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5Yid5pyf5YyWXG4gICAqIEBwYXJhbSBtb2RlbCDliJ3mnJ/ljJbjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIHRoaXMucGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleCh0aGlzLnBhcnRJZCk7XG4gICAgdGhpcy5wYXJ0SW5kZXggPSBtb2RlbC5nZXRQYXJ0SW5kZXgodGhpcy5wYXJ0SWQpO1xuXG4gICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHRoaXMucGFyYW1ldGVySW5kZXgsIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCquODluOCuOOCp+OCr+ODiOOBruOCs+ODlOODvOOCkueUn+aIkOOBmeOCi1xuICAgKi9cbiAgcHVibGljIGNsb25lKCk6IFBhcnREYXRhIHtcbiAgICBjb25zdCBjbG9uZVBhcnREYXRhOiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xuXG4gICAgY2xvbmVQYXJ0RGF0YS5wYXJ0SWQgPSB0aGlzLnBhcnRJZDtcbiAgICBjbG9uZVBhcnREYXRhLnBhcmFtZXRlckluZGV4ID0gdGhpcy5wYXJhbWV0ZXJJbmRleDtcbiAgICBjbG9uZVBhcnREYXRhLnBhcnRJbmRleCA9IHRoaXMucGFydEluZGV4O1xuICAgIGNsb25lUGFydERhdGEubGluayA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8UGFydERhdGE+ID0gdGhpcy5saW5rLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5saW5rLmVuZCgpKTtcbiAgICAgIGl0ZS5pbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgY2xvbmVQYXJ0RGF0YS5saW5rLnB1c2hCYWNrKGl0ZS5wdHIoKS5jbG9uZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVQYXJ0RGF0YTtcbiAgfVxuXG4gIHBhcnRJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODvOODhElEXG4gIHBhcmFtZXRlckluZGV4OiBudW1iZXI7IC8vIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICBwYXJ0SW5kZXg6IG51bWJlcjsgLy8g44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIGxpbms6IGNzbVZlY3RvcjxQYXJ0RGF0YT47IC8vIOmAo+WLleOBmeOCi+ODkeODqeODoeODvOOCv1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21wb3NlJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Qb3NlID0gJC5DdWJpc21Qb3NlO1xuICBleHBvcnQgdHlwZSBDdWJpc21Qb3NlID0gJC5DdWJpc21Qb3NlO1xuICBleHBvcnQgY29uc3QgUGFydERhdGEgPSAkLlBhcnREYXRhO1xuICBleHBvcnQgdHlwZSBQYXJ0RGF0YSA9ICQuUGFydERhdGE7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgY3NtTWFwIH0gZnJvbSAnLi90eXBlL2NzbW1hcCc7XG5cbi8qKlxuICog44Oi44OH44Or6Kit5a6a5oOF5aCx44KS5Y+W44KK5omx44GG6Zai5pWw44KS5a6j6KiA44GX44Gf57SU57KL5Luu5oOz44Kv44Op44K544CCXG4gKlxuICog44GT44Gu44Kv44Op44K544KS57aZ5om/44GZ44KL44GT44Go44Gn44CB44Oi44OH44Or6Kit5a6a5oOF5aCx44KS5Y+W44KK5omx44GG44Kv44Op44K544Gr44Gq44KL44CCXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJQ3ViaXNtTW9kZWxTZXR0aW5nIHtcbiAgLyoqXG4gICAqIE1vY+ODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIE1vY+ODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vZGVsRmlsZU5hbWUoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgYzkvb/nlKjjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICog44OG44Kv44K544OB44Oj44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0VGV4dHVyZUNvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44GM6YWN572u44GV44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44GM6YWN572u44GV44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0VGV4dHVyZURpcmVjdG9yeSgpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0VGV4dHVyZUZpbGVOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEhpdEFyZWFzQ291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JROOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44GuaW5kZXhcbiAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JRFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEhpdEFyZWFJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGU7XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn+WQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGl0QXJlYU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog54mp55CG5ryU566X6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g54mp55CG5ryU566X6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0UGh5c2ljc0ZpbGVOYW1lKCk6IHN0cmluZztcblxuICAvKipcbiAgICog44OR44O844OE5YiH44KK5pu/44GI6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OR44O844OE5YiH44KK5pu/44GI6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0UG9zZUZpbGVOYW1lKCk6IHN0cmluZztcblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXhwcmVzc2lvbkNvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44KS6K2Y5Yil44GZ44KL5ZCN5YmN77yI5Yil5ZCN77yJ44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDooajmg4Xjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRFeHByZXNzaW9uTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEV4cHJlc3Npb25GaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Hcm91cENvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Hcm91cE5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gr5ZCr44G+44KM44KL44Oi44O844K344On44Oz44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uQ291bnQoZ3JvdXBOYW1lOiBzdHJpbmcpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOOCsOODq+ODvOODl+WQjeOBqOOCpOODs+ODh+ODg+OCr+OCueWApOOBi+OCieODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXggICAgIOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkZpbGVOYW1lKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOOCteOCpuODs+ODieODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvblNvdW5kRmlsZU5hbWUoXG4gICAgZ3JvdXBOYW1lOiBzdHJpbmcsXG4gICAgaW5kZXg6IG51bWJlclxuICApOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+aZguOBruODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUoXG4gICAgZ3JvdXBOYW1lOiBzdHJpbmcsXG4gICAgaW5kZXg6IG51bWJlclxuICApOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+e1guS6huaZguOBruODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKFxuICAgIGdyb3VwTmFtZTogc3RyaW5nLFxuICAgIGluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jg5XjgqHjgqTjg6vlkI3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jg5XjgqHjgqTjg6vlkI1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRVc2VyRGF0YUZpbGUoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIG91dExheW91dE1hcCBjc21NYXDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQHJldHVybiB0cnVlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldExheW91dE1hcChvdXRMYXlvdXRNYXA6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GuSUTjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGU7XG5cbiAgLyoqXG4gICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SURcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRMaXBTeW5jUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9pY3ViaXNtbW9kZWxzZXR0aW5nJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gJC5JQ3ViaXNtTW9kZWxTZXR0aW5nO1xuICBleHBvcnQgdHlwZSBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gJC5JQ3ViaXNtTW9kZWxTZXR0aW5nO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuXG4vKipcbiAqIOODkeODqeODoeODvOOCv+WQjeODu+ODkeODvOODhOWQjeODu0RyYXdhYmxl5ZCN44KS5L+d5oyBXG4gKlxuICog44OR44Op44Oh44O844K/5ZCN44O744OR44O844OE5ZCN44O7RHJhd2FibGXlkI3jgpLkv53mjIHjgZnjgovjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUlkIHtcbiAgLyoqXG4gICAqIElE5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKCk6IGNzbVN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcgfCBjc21TdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5faWQgPSBuZXcgY3NtU3RyaW5nKGlkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9pZCA9IGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIGlk44KS5q+U6LyDXG4gICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXG4gICAqIEByZXR1cm4g5ZCM44GY44Gq44KJ44GwdHJ1ZSznlbDjgarjgaPjgabjgYTjgozjgbBmYWxzZeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGlzRXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIGMgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjKTtcbiAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pZC5pc0VxdWFsKGMucyk7XG4gICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgQ3ViaXNtSWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pZC5pc0VxdWFsKGMuX2lkLnMpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogaWTjgpLmr5TovINcbiAgICogQHBhcmFtIGMg5q+U6LyD44GZ44KLaWRcbiAgICogQHJldHVybiDlkIzjgZjjgarjgonjgbB0cnVlLOeVsOOBquOBo+OBpuOBhOOCjOOBsGZhbHNl44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgaXNOb3RFcXVhbChjOiBzdHJpbmcgfCBjc21TdHJpbmcgfCBDdWJpc21JZCk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YgYyA9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuICF0aGlzLl9pZC5pc0VxdWFsKGMpO1xuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xuICAgICAgcmV0dXJuICF0aGlzLl9pZC5pc0VxdWFsKGMucyk7XG4gICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgQ3ViaXNtSWQpIHtcbiAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBfaWQ6IGNzbVN0cmluZzsgLy8gSUTlkI1cbn1cblxuZXhwb3J0IGRlY2xhcmUgdHlwZSBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUlkO1xuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21pZCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtSWQgPSAkLkN1YmlzbUlkO1xuICBleHBvcnQgdHlwZSBDdWJpc21JZCA9ICQuQ3ViaXNtSWQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUlkSGFuZGxlID0gJC5DdWJpc21JZEhhbmRsZTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUlkIH0gZnJvbSAnLi9jdWJpc21pZCc7XG5cbi8qKlxuICogSUTlkI3jga7nrqHnkIZcbiAqXG4gKiBJROWQjeOCkueuoeeQhuOBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtSWRNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2lkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWQ+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2lkcy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgdGhpcy5faWRzLnNldChpLCB2b2lkIDApO1xuICAgIH1cbiAgICB0aGlzLl9pZHMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIElE5ZCN44KS44Oq44K544OI44GL44KJ55m76YyyXG4gICAqXG4gICAqIEBwYXJhbSBpZHMgSUTlkI3jg6rjgrnjg4hcbiAgICogQHBhcmFtIGNvdW50IElE44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0ZXJJZHMoaWRzOiBzdHJpbmdbXSB8IGNzbVN0cmluZ1tdKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJJZChpZHNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJROWQjeOCkueZu+mMslxuICAgKlxuICAgKiBAcGFyYW0gaWQgSUTlkI1cbiAgICovXG4gIHB1YmxpYyByZWdpc3RlcklkKGlkOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBDdWJpc21JZCB7XG4gICAgbGV0IHJlc3VsdDogQ3ViaXNtSWQgPSBudWxsO1xuXG4gICAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBpZCkge1xuICAgICAgaWYgKChyZXN1bHQgPSB0aGlzLmZpbmRJZChpZCkpICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gbmV3IEN1YmlzbUlkKGlkKTtcbiAgICAgIHRoaXMuX2lkcy5wdXNoQmFjayhyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcklkKGlkLnMpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgYvjgolJROOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gaWQgSUTlkI1cbiAgICovXG4gIHB1YmxpYyBnZXRJZChpZDogY3NtU3RyaW5nIHwgc3RyaW5nKTogQ3ViaXNtSWQge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVySWQoaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIElE5ZCN44GL44KJSUTjga7norroqo1cbiAgICpcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3QoaWQ6IGNzbVN0cmluZyB8IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRJZChpZCkgIT0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaXNFeGlzdChpZC5zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROWQjeOBi+OCiUlE44KS5qSc57Si44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBpZCBJROWQjVxuICAgKiBAcmV0dXJuIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44CC44Gq44GR44KM44GwTlVMTOOAglxuICAgKi9cbiAgcHJpdmF0ZSBmaW5kSWQoaWQ6IHN0cmluZyk6IEN1YmlzbUlkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2lkcy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgaWYgKHRoaXMuX2lkcy5hdChpKS5nZXRTdHJpbmcoKS5pc0VxdWFsKGlkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWRzLmF0KGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBfaWRzOiBjc21WZWN0b3I8Q3ViaXNtSWQ+OyAvLyDnmbvpjLLjgZXjgozjgabjgYTjgotJROOBruODquOCueODiFxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21pZG1hbmFnZXInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUlkTWFuYWdlciA9ICQuQ3ViaXNtSWRNYW5hZ2VyO1xuICBleHBvcnQgdHlwZSBDdWJpc21JZE1hbmFnZXIgPSAkLkN1YmlzbUlkTWFuYWdlcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkTWFuYWdlciB9IGZyb20gJy4vaWQvY3ViaXNtaWRtYW5hZ2VyJztcbmltcG9ydCB7IEN1YmlzbVJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXInO1xuaW1wb3J0IHtcbiAgQ1NNX0FTU0VSVCxcbiAgQ3ViaXNtTG9nSW5mbyxcbiAgQ3ViaXNtTG9nV2FybmluZyxcbn0gZnJvbSAnLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gJy4vdXRpbHMvY3ViaXNtanNvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJ0b2Qoczogc3RyaW5nLCBlbmRQdHI6IHN0cmluZ1tdKTogbnVtYmVyIHtcbiAgbGV0IGluZGV4ID0gMDtcbiAgZm9yIChsZXQgaSA9IDE7IDsgaSsrKSB7XG4gICAgY29uc3QgdGVzdEM6IHN0cmluZyA9IHMuc2xpY2UoaSAtIDEsIGkpO1xuXG4gICAgLy8g5oyH5pWw44O744Oe44Kk44OK44K544Gu5Y+v6IO95oCn44GM44GC44KL44Gu44Gn44K544Kt44OD44OX44GZ44KLXG4gICAgaWYgKHRlc3RDID09ICdlJyB8fCB0ZXN0QyA9PSAnLScgfHwgdGVzdEMgPT0gJ0UnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIOaWh+Wtl+WIl+OBruevhOWbsuOCkuW6g+OBkuOBpuOBhOOBj1xuXG4gICAgY29uc3QgdGVzdDogc3RyaW5nID0gcy5zdWJzdHJpbmcoMCwgaSk7XG4gICAgY29uc3QgbnVtYmVyID0gTnVtYmVyKHRlc3QpO1xuICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICAvLyDmlbDlgKTjgajjgZfjgaboqo3orZjjgafjgY3jgarjgY/jgarjgaPjgZ/jga7jgafntYLkuoZcbiAgICAgIGJyZWFrO1xuICAgIH0gLy8g5pyA5b6M44Gr5pWw5YCk44Go44GX44Gm44Gn44GN44GfaW5kZXjjgpLmoLzntI3jgZfjgabjgYrjgY9cblxuICAgIGluZGV4ID0gaTtcbiAgfVxuICBsZXQgZCA9IHBhcnNlRmxvYXQocyk7IC8vIOODkeODvOOCueOBl+OBn+aVsOWApFxuXG4gIGlmIChpc05hTihkKSkge1xuICAgIC8vIOaVsOWApOOBqOOBl+OBpuiqjeitmOOBp+OBjeOBquOBj+OBquOBo+OBn+OBruOBp+e1guS6hlxuICAgIGQgPSBOYU47XG4gIH1cblxuICBlbmRQdHJbMF0gPSBzLnNsaWNlKGluZGV4KTsgLy8g5b6M57aa44Gu5paH5a2X5YiXXG4gIHJldHVybiBkO1xufVxuXG4vLyDjg5XjgqHjgqTjg6vjgrnjgrPjg7zjg5fjga7lpInmlbDjgpLliJ3mnJ/ljJZcblxubGV0IHNfaXNTdGFydGVkID0gZmFsc2U7XG5sZXQgc19pc0luaXRpYWxpemVkID0gZmFsc2U7XG5sZXQgc19vcHRpb246IE9wdGlvbiA9IG51bGw7XG5sZXQgc19jdWJpc21JZE1hbmFnZXI6IEN1YmlzbUlkTWFuYWdlciA9IG51bGw7XG5cbi8qKlxuICogRnJhbWV3b3Jr5YaF44Gn5L2/44GG5a6a5pWw44Gu5a6j6KiAXG4gKi9cbmV4cG9ydCBjb25zdCBDb25zdGFudCA9IE9iamVjdC5mcmVlemU8UmVjb3JkPHN0cmluZywgbnVtYmVyPj4oe1xuICB2ZXJ0ZXhPZmZzZXQ6IDAsIC8vIOODoeODg+OCt+ODpemggueCueOBruOCquODleOCu+ODg+ODiOWApFxuICB2ZXJ0ZXhTdGVwOiAyLCAvLyDjg6Hjg4Pjgrfjg6XpoILngrnjga7jgrnjg4bjg4Pjg5flgKRcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gY3NtRGVsZXRlPFQ+KGFkZHJlc3M6IFQpOiB2b2lkIHtcbiAgaWYgKCFhZGRyZXNzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYWRkcmVzcyA9IHZvaWQgMDtcbn1cblxuLyoqXG4gKiBMaXZlMkQgQ3ViaXNtIFNESyBPcmlnaW5hbCBXb3JrZmxvdyBTREvjga7jgqjjg7Pjg4jjg6rjg53jgqTjg7Pjg4hcbiAqIOWIqeeUqOmWi+Wni+aZguOBr0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCnjgpLlkbzjgbPjgIFDdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgp44Gn57WC5LqG44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICogQ3ViaXNtIEZyYW1ld29ya+OBrkFQSeOCkuS9v+eUqOWPr+iDveOBq+OBmeOCi+OAglxuICAgKiAgQVBJ44KS5a6f6KGM44GZ44KL5YmN44Gr5b+F44Ga44GT44Gu6Zai5pWw44KS5a6f6KGM44GZ44KL44GT44Go44CCXG4gICAqICDkuIDluqbmupblgpnjgYzlrozkuobjgZfjgabku6XpmY3jga/jgIHlho3jgbPlrp/ooYzjgZfjgabjgoLlhoXpg6jlh6bnkIbjgYzjgrnjgq3jg4Pjg5fjgZXjgozjgb7jgZnjgIJcbiAgICpcbiAgICogQHBhcmFtICAgIG9wdGlvbiAgICAgIE9wdGlvbuOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKlxuICAgKiBAcmV0dXJuICAg5rqW5YKZ5Yem55CG44GM5a6M5LqG44GX44Gf44KJdHJ1ZeOBjOi/lOOCiuOBvuOBmeOAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdGFydFVwKG9wdGlvbjogT3B0aW9uID0gbnVsbCk6IGJvb2xlYW4ge1xuICAgIGlmIChzX2lzU3RhcnRlZCkge1xuICAgICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLnN0YXJ0VXAoKSBpcyBhbHJlYWR5IGRvbmUuJyk7XG4gICAgICByZXR1cm4gc19pc1N0YXJ0ZWQ7XG4gICAgfVxuXG4gICAgc19vcHRpb24gPSBvcHRpb247XG5cbiAgICBpZiAoc19vcHRpb24gIT0gbnVsbCkge1xuICAgICAgTGl2ZTJEQ3ViaXNtQ29yZS5Mb2dnaW5nLmNzbVNldExvZ0Z1bmN0aW9uKHNfb3B0aW9uLmxvZ0Z1bmN0aW9uKTtcbiAgICB9XG5cbiAgICBzX2lzU3RhcnRlZCA9IHRydWU7XG5cbiAgICAvLyBMaXZlMkQgQ3ViaXNtIENvcmXjg5Djg7zjgrjjg6fjg7Pmg4XloLHjgpLooajnpLpcbiAgICBpZiAoc19pc1N0YXJ0ZWQpIHtcbiAgICAgIGNvbnN0IHZlcnNpb246IG51bWJlciA9IExpdmUyREN1YmlzbUNvcmUuVmVyc2lvbi5jc21HZXRWZXJzaW9uKCk7XG4gICAgICBjb25zdCBtYWpvcjogbnVtYmVyID0gKHZlcnNpb24gJiAweGZmMDAwMDAwKSA+PiAyNDtcbiAgICAgIGNvbnN0IG1pbm9yOiBudW1iZXIgPSAodmVyc2lvbiAmIDB4MDBmZjAwMDApID4+IDE2O1xuICAgICAgY29uc3QgcGF0Y2g6IG51bWJlciA9IHZlcnNpb24gJiAweDAwMDBmZmZmO1xuICAgICAgY29uc3QgdmVyc2lvbk51bWJlcjogbnVtYmVyID0gdmVyc2lvbjtcblxuICAgICAgQ3ViaXNtTG9nSW5mbyhcbiAgICAgICAgYExpdmUyRCBDdWJpc20gQ29yZSB2ZXJzaW9uOiB7MH0uezF9LnsyfSAoezN9KWAsXG4gICAgICAgICgnMDAnICsgbWFqb3IpLnNsaWNlKC0yKSxcbiAgICAgICAgKCcwMCcgKyBtaW5vcikuc2xpY2UoLTIpLFxuICAgICAgICAoJzAwMDAnICsgcGF0Y2gpLnNsaWNlKC00KSxcbiAgICAgICAgdmVyc2lvbk51bWJlclxuICAgICAgKTtcbiAgICB9XG5cbiAgICBDdWJpc21Mb2dJbmZvKCdDdWJpc21GcmFtZXdvcmsuc3RhcnRVcCgpIGlzIGNvbXBsZXRlLicpO1xuXG4gICAgcmV0dXJuIHNfaXNTdGFydGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0VXAoKeOBp+WIneacn+WMluOBl+OBn0N1YmlzbUZyYW1ld29ya+OBruWQhOODkeODqeODoeODvOOCv+OCkuOCr+ODquOCouOBl+OBvuOBmeOAglxuICAgKiBEaXNwb3NlKCnjgZfjgZ9DdWJpc21GcmFtZXdvcmvjgpLlho3liKnnlKjjgZnjgovpmpvjgavliKnnlKjjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY2xlYW5VcCgpOiB2b2lkIHtcbiAgICBzX2lzU3RhcnRlZCA9IGZhbHNlO1xuICAgIHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHNfb3B0aW9uID0gbnVsbDtcbiAgICBzX2N1YmlzbUlkTWFuYWdlciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaXNtIEZyYW1ld29ya+WGheOBruODquOCveODvOOCueOCkuWIneacn+WMluOBl+OBpuODouODh+ODq+OCkuihqOekuuWPr+iDveOBqueKtuaFi+OBq+OBl+OBvuOBmeOAgjxicj5cbiAgICogICAgIOWGjeW6pkluaXRpYWxpemUoKeOBmeOCi+OBq+OBr+WFiOOBq0Rpc3Bvc2UoKeOCkuWun+ihjOOBmeOCi+W/heimgeOBjOOBguOCiuOBvuOBmeOAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIENTTV9BU1NFUlQoc19pc1N0YXJ0ZWQpO1xuICAgIGlmICghc19pc1N0YXJ0ZWQpIHtcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoJ0N1YmlzbUZyYW1ld29yayBpcyBub3Qgc3RhcnRlZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAtLS0gc19pc0luaXRpYWxpemVk44Gr44KI44KL6YCj57aa5Yid5pyf5YyW44Ks44O844OJIC0tLVxuICAgIC8vIOmAo+e2muOBl+OBpuODquOCveODvOOCueeiuuS/neOBjOihjOOCj+OCjOOBquOBhOOCiOOBhuOBq+OBmeOCi+OAglxuICAgIC8vIOWGjeW6pkluaXRpYWxpemUoKeOBmeOCi+OBq+OBr+WFiOOBq0Rpc3Bvc2UoKeOCkuWun+ihjOOBmeOCi+W/heimgeOBjOOBguOCi+OAglxuICAgIGlmIChzX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoXG4gICAgICAgICdDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgpIHNraXBwZWQsIGFscmVhZHkgaW5pdGlhbGl6ZWQuJ1xuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLy0tLS0gc3RhdGljIOWIneacn+WMliAtLS0tXG4gICAgVmFsdWUuc3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKTtcblxuICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbmV3IEN1YmlzbUlkTWFuYWdlcigpO1xuXG4gICAgc19pc0luaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCkgaXMgY29tcGxldGUuJyk7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaXNtIEZyYW1ld29ya+WGheOBruWFqOOBpuOBruODquOCveODvOOCueOCkuino+aUvuOBl+OBvuOBmeOAglxuICAgKiAgICAgIOOBn+OBoOOBl+OAgeWklumDqOOBp+eiuuS/neOBleOCjOOBn+ODquOCveODvOOCueOBq+OBpOOBhOOBpuOBr+ino+aUvuOBl+OBvuOBm+OCk+OAglxuICAgKiAgICAgIOWklumDqOOBp+mBqeWIh+OBq+egtOajhOOBmeOCi+W/heimgeOBjOOBguOCiuOBvuOBmeOAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIENTTV9BU1NFUlQoc19pc1N0YXJ0ZWQpO1xuICAgIGlmICghc19pc1N0YXJ0ZWQpIHtcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoJ0N1YmlzbUZyYW1ld29yayBpcyBub3Qgc3RhcnRlZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAtLS0gc19pc0luaXRpYWxpemVk44Gr44KI44KL5pyq5Yid5pyf5YyW6Kej5pS+44Ks44O844OJIC0tLVxuICAgIC8vIGRpc3Bvc2UoKeOBmeOCi+OBq+OBr+WFiOOBq2luaXRpYWxpemUoKeOCkuWun+ihjOOBmeOCi+W/heimgeOBjOOBguOCi+OAglxuICAgIGlmICghc19pc0luaXRpYWxpemVkKSB7XG4gICAgICAvLyBmYWxzZS4uLuODquOCveODvOOCueacqueiuuS/neOBruWgtOWQiFxuICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKSBza2lwcGVkLCBub3QgaW5pdGlhbGl6ZWQuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgVmFsdWUuc3RhdGljUmVsZWFzZU5vdEZvckNsaWVudENhbGwoKTtcblxuICAgIHNfY3ViaXNtSWRNYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICBzX2N1YmlzbUlkTWFuYWdlciA9IG51bGw7XG5cbiAgICAvLyDjg6zjg7Pjg4Djg6njga7pnZnnmoTjg6rjgr3jg7zjgrnvvIjjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6Dku5bvvInjgpLop6PmlL7jgZnjgotcbiAgICBDdWJpc21SZW5kZXJlci5zdGF0aWNSZWxlYXNlKCk7XG5cbiAgICBzX2lzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5kaXNwb3NlKCkgaXMgY29tcGxldGUuJyk7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaXNtIEZyYW1ld29ya+OBrkFQSeOCkuS9v+eUqOOBmeOCi+a6luWCmeOBjOWujOS6huOBl+OBn+OBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJuIEFQSeOCkuS9v+eUqOOBmeOCi+a6luWCmeOBjOWujOS6huOBl+OBpuOBhOOCjOOBsHRydWXjgYzov5Tjgorjgb7jgZnjgIJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNTdGFydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzX2lzU3RhcnRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr44Gu44Oq44K944O844K55Yid5pyf5YyW44GM44GZ44Gn44Gr6KGM44KP44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gICAqIEByZXR1cm4g44Oq44K944O844K556K65L+d44GM5a6M5LqG44GX44Gm44GE44KM44GwdHJ1ZeOBjOi/lOOCiuOBvuOBmVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0luaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzX2lzSW5pdGlhbGl6ZWQ7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBBUEnjgavjg5DjgqTjg7Pjg4njgZfjgZ/jg63jgrDplqLmlbDjgpLlrp/ooYzjgZnjgotcbiAgICpcbiAgICogQHByYXJhbSBtZXNzYWdlIOODreOCsOODoeODg+OCu+ODvOOCuFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjb3JlTG9nRnVuY3Rpb24obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gUmV0dXJuIGlmIGxvZ2dpbmcgbm90IHBvc3NpYmxlLlxuICAgIGlmICghTGl2ZTJEQ3ViaXNtQ29yZS5Mb2dnaW5nLmNzbUdldExvZ0Z1bmN0aW9uKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtR2V0TG9nRnVuY3Rpb24oKShtZXNzYWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjga7lgKTjgpLov5TjgZnjgIJcbiAgICpcbiAgICogQHJldHVybiAg54++5Zyo44Gu44Ot44Kw5Ye65Yqb44Os44OZ44Or6Kit5a6a44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldExvZ2dpbmdMZXZlbCgpOiBMb2dMZXZlbCB7XG4gICAgaWYgKHNfb3B0aW9uICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBzX29wdGlvbi5sb2dnaW5nTGV2ZWw7XG4gICAgfVxuICAgIHJldHVybiBMb2dMZXZlbC5Mb2dMZXZlbF9PZmY7XG4gIH1cblxuICAvKipcbiAgICogSUTjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiBDdWJpc21NYW5hZ2Vy44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldElkTWFuYWdlcigpOiBDdWJpc21JZE1hbmFnZXIge1xuICAgIHJldHVybiBzX2N1YmlzbUlkTWFuYWdlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDpnZnnmoTjgq/jg6njgrnjgajjgZfjgabkvb/nlKjjgZnjgotcbiAgICog44Kk44Oz44K544K/44Oz44K55YyW44GV44Gb44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cbn1cblxuZXhwb3J0IGNsYXNzIE9wdGlvbiB7XG4gIGxvZ0Z1bmN0aW9uOiBMaXZlMkRDdWJpc21Db3JlLmNzbUxvZ0Z1bmN0aW9uOyAvLyDjg63jgrDlh7rlipvjga7plqLmlbDjgqrjg5bjgrjjgqfjgq/jg4hcbiAgbG9nZ2luZ0xldmVsOiBMb2dMZXZlbDsgLy8g44Ot44Kw5Ye65Yqb44Os44OZ44Or44Gu6Kit5a6aXG59XG5cbi8qKlxuICog44Ot44Kw5Ye65Yqb44Gu44Os44OZ44OrXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgTG9nTGV2ZWxfVmVyYm9zZSA9IDAsIC8vIOips+e0sOODreOCsFxuICBMb2dMZXZlbF9EZWJ1ZywgLy8g44OH44OQ44OD44Kw44Ot44KwXG4gIExvZ0xldmVsX0luZm8sIC8vIEluZm/jg63jgrBcbiAgTG9nTGV2ZWxfV2FybmluZywgLy8g6K2m5ZGK44Ot44KwXG4gIExvZ0xldmVsX0Vycm9yLCAvLyDjgqjjg6njg7zjg63jgrBcbiAgTG9nTGV2ZWxfT2ZmLCAvLyDjg63jgrDlh7rlipvnhKHlirlcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDb25zdGFudCA9ICQuQ29uc3RhbnQ7XG4gIGV4cG9ydCBjb25zdCBjc21EZWxldGUgPSAkLmNzbURlbGV0ZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUZyYW1ld29yayA9ICQuQ3ViaXNtRnJhbWV3b3JrO1xuICBleHBvcnQgdHlwZSBDdWJpc21GcmFtZXdvcmsgPSAkLkN1YmlzbUZyYW1ld29yaztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuL2N1YmlzbXZlY3RvcjInO1xuXG4vKipcbiAqIOaVsOWApOioiOeul+OBquOBqeOBq+S9v+eUqOOBmeOCi+ODpuODvOODhuOCo+ODquODhuOCo+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTWF0aCB7XG4gIHN0YXRpYyByZWFkb25seSBFcHNpbG9uOiBudW1iZXIgPSAwLjAwMDAxO1xuXG4gIC8qKlxuICAgKiDnrKzkuIDlvJXmlbDjga7lgKTjgpLmnIDlsI/lgKTjgajmnIDlpKflgKTjga7nr4Tlm7Ljgavlj47jgoHjgZ/lgKTjgpLov5TjgZlcbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIOWPjuOCgeOCieOCjOOCi+WApFxuICAgKiBAcGFyYW0gbWluICAg56+E5Zuy44Gu5pyA5bCP5YCkXG4gICAqIEBwYXJhbSBtYXggICDnr4Tlm7Ljga7mnIDlpKflgKRcbiAgICogQHJldHVybiDmnIDlsI/lgKTjgajmnIDlpKflgKTjga7nr4Tlm7Ljgavlj47jgoHjgZ/lgKRcbiAgICovXG4gIHN0YXRpYyByYW5nZSh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh2YWx1ZSA8IG1pbikge1xuICAgICAgdmFsdWUgPSBtaW47XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+IG1heCkge1xuICAgICAgdmFsdWUgPSBtYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCteOCpOODs+mWouaVsOOBruWApOOCkuaxguOCgeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCDop5LluqblgKTvvIjjg6njgrjjgqLjg7PvvIlcbiAgICogQHJldHVybiDjgrXjgqTjg7PplqLmlbBzaW4oeCnjga7lgKRcbiAgICovXG4gIHN0YXRpYyBzaW4oeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zaW4oeCk7XG4gIH1cblxuICAvKipcbiAgICog44Kz44K144Kk44Oz6Zai5pWw44Gu5YCk44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IOinkuW6puWApCjjg6njgrjjgqLjg7MpXG4gICAqIEByZXR1cm4g44Kz44K144Kk44Oz6Zai5pWwY29zKHgp44Gu5YCkXG4gICAqL1xuICBzdGF0aWMgY29zKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguY29zKHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWApOOBrue1tuWvvuWApOOCkuaxguOCgeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCDntbblr77lgKTjgpLmsYLjgoHjgovlgKRcbiAgICogQHJldHVybiDlgKTjga7ntbblr77lgKRcbiAgICovXG4gIHN0YXRpYyBhYnMoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCk7XG4gIH1cblxuICAvKipcbiAgICog5bmz5pa55qC5KOODq+ODvOODiCnjgpLmsYLjgoHjgotcbiAgICogQHBhcmFtIHggLT4g5bmz5pa55qC544KS5rGC44KB44KL5YCkXG4gICAqIEByZXR1cm4g5YCk44Gu5bmz5pa55qC5XG4gICAqL1xuICBzdGF0aWMgc3FydCh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCk7XG4gIH1cblxuICAvKipcbiAgICog56uL5pa55qC544KS5rGC44KB44KLXG4gICAqIEBwYXJhbSB4IC0+IOeri+aWueagueOCkuaxguOCgeOCi+WApFxuICAgKiBAcmV0dXJuIOWApOOBrueri+aWueaguVxuICAgKi9cbiAgc3RhdGljIGNicnQoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgbGV0IGN4OiBudW1iZXIgPSB4O1xuICAgIGNvbnN0IGlzTmVnYXRpdmVOdW1iZXI6IGJvb2xlYW4gPSBjeCA8IDA7XG5cbiAgICBpZiAoaXNOZWdhdGl2ZU51bWJlcikge1xuICAgICAgY3ggPSAtY3g7XG4gICAgfVxuXG4gICAgbGV0IHJldDogbnVtYmVyO1xuICAgIGlmIChjeCA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHJldCA9IEluZmluaXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQgPSBNYXRoLmV4cChNYXRoLmxvZyhjeCkgLyAzKTtcbiAgICAgIHJldCA9IChjeCAvIChyZXQgKiByZXQpICsgMiAqIHJldCkgLyAzO1xuICAgIH1cbiAgICByZXR1cm4gaXNOZWdhdGl2ZU51bWJlciA/IC1yZXQgOiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Kk44O844K444Oz44Kw5Yem55CG44GV44KM44Gf44K144Kk44Oz44KS5rGC44KB44KLXG4gICAqIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOaZguOBruOCpOODvOOCuOODs+OCsOOBq+WIqeeUqOOBp+OBjeOCi1xuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUg44Kk44O844K444Oz44Kw44KS6KGM44GG5YCkXG4gICAqIEByZXR1cm4g44Kk44O844K444Oz44Kw5Yem55CG44GV44KM44Gf44K144Kk44Oz5YCkXG4gICAqL1xuICBzdGF0aWMgZ2V0RWFzaW5nU2luZSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodmFsdWUgPCAwLjApIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+IDEuMCkge1xuICAgICAgcmV0dXJuIDEuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gMC41IC0gMC41ICogdGhpcy5jb3ModmFsdWUgKiBNYXRoLlBJKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlpKfjgY3jgYTmlrnjga7lgKTjgpLov5TjgZlcbiAgICpcbiAgICogQHBhcmFtIGxlZnQg5bem6L6644Gu5YCkXG4gICAqIEBwYXJhbSByaWdodCDlj7Povrrjga7lgKRcbiAgICogQHJldHVybiDlpKfjgY3jgYTmlrnjga7lgKRcbiAgICovXG4gIHN0YXRpYyBtYXgobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbGVmdCA+IHJpZ2h0ID8gbGVmdCA6IHJpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOWwj+OBleOBhOaWueOBruWApOOCkui/lOOBmVxuICAgKlxuICAgKiBAcGFyYW0gbGVmdCAg5bem6L6644Gu5YCkXG4gICAqIEBwYXJhbSByaWdodCDlj7Povrrjga7lgKRcbiAgICogQHJldHVybiDlsI/jgZXjgYTmlrnjga7lgKRcbiAgICovXG4gIHN0YXRpYyBtaW4obGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbGVmdCA+IHJpZ2h0ID8gcmlnaHQgOiBsZWZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIOinkuW6puWApOOCkuODqeOCuOOCouODs+WApOOBq+WkieaPm+OBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZGVncmVlcyAgIOinkuW6puWApFxuICAgKiBAcmV0dXJuIOinkuW6puWApOOBi+OCieWkieaPm+OBl+OBn+ODqeOCuOOCouODs+WApFxuICAgKi9cbiAgc3RhdGljIGRlZ3JlZXNUb1JhZGlhbihkZWdyZWVzOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAoZGVncmVlcyAvIDE4MC4wKSAqIE1hdGguUEk7XG4gIH1cblxuICAvKipcbiAgICog44Op44K444Ki44Oz5YCk44KS6KeS5bqm5YCk44Gr5aSJ5o+b44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSByYWRpYW4gICAg44Op44K444Ki44Oz5YCkXG4gICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5aSJ5o+b44GX44Gf6KeS5bqm5YCkXG4gICAqL1xuICBzdGF0aWMgcmFkaWFuVG9EZWdyZWVzKHJhZGlhbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHJhZGlhbiAqIDE4MC4wKSAvIE1hdGguUEk7XG4gIH1cblxuICAvKipcbiAgICog77yS44Gk44Gu44OZ44Kv44OI44Or44GL44KJ44Op44K444Ki44Oz5YCk44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSBmcm9tICDlp4vngrnjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHRvICAgIOe1gueCueODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIOODqeOCuOOCouODs+WApOOBi+OCieaxguOCgeOBn+aWueWQkeODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIGRpcmVjdGlvblRvUmFkaWFuKGZyb206IEN1YmlzbVZlY3RvcjIsIHRvOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICBjb25zdCBxMTogbnVtYmVyID0gTWF0aC5hdGFuMih0by55LCB0by54KTtcbiAgICBjb25zdCBxMjogbnVtYmVyID0gTWF0aC5hdGFuMihmcm9tLnksIGZyb20ueCk7XG5cbiAgICBsZXQgcmV0OiBudW1iZXIgPSBxMSAtIHEyO1xuXG4gICAgd2hpbGUgKHJldCA8IC1NYXRoLlBJKSB7XG4gICAgICByZXQgKz0gTWF0aC5QSSAqIDIuMDtcbiAgICB9XG5cbiAgICB3aGlsZSAocmV0ID4gTWF0aC5QSSkge1xuICAgICAgcmV0IC09IE1hdGguUEkgKiAyLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDvvJLjgaTjga7jg5njgq/jg4jjg6vjgYvjgonop5LluqblgKTjgpLmsYLjgoHjgotcbiAgICpcbiAgICogQHBhcmFtIGZyb20gIOWni+eCueODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0gdG8gICAg57WC54K544OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4g6KeS5bqm5YCk44GL44KJ5rGC44KB44Gf5pa55ZCR44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgZGlyZWN0aW9uVG9EZWdyZWVzKGZyb206IEN1YmlzbVZlY3RvcjIsIHRvOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICBjb25zdCByYWRpYW46IG51bWJlciA9IHRoaXMuZGlyZWN0aW9uVG9SYWRpYW4oZnJvbSwgdG8pO1xuICAgIGxldCBkZWdyZWU6IG51bWJlciA9IHRoaXMucmFkaWFuVG9EZWdyZWVzKHJhZGlhbik7XG5cbiAgICBpZiAodG8ueCAtIGZyb20ueCA+IDAuMCkge1xuICAgICAgZGVncmVlID0gLWRlZ3JlZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVncmVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODqeOCuOOCouODs+WApOOCkuaWueWQkeODmeOCr+ODiOODq+OBq+WkieaPm+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gdG90YWxBbmdsZSAgICDjg6njgrjjgqLjg7PlgKRcbiAgICogQHJldHVybiDjg6njgrjjgqLjg7PlgKTjgYvjgonlpInmj5vjgZfjgZ/mlrnlkJHjg5njgq/jg4jjg6tcbiAgICovXG5cbiAgc3RhdGljIHJhZGlhblRvRGlyZWN0aW9uKHRvdGFsQW5nbGU6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XG5cbiAgICByZXQueCA9IHRoaXMuc2luKHRvdGFsQW5nbGUpO1xuICAgIHJldC55ID0gdGhpcy5jb3ModG90YWxBbmdsZSk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOS4ieasoeaWueeoi+W8j+OBruS4ieasoemgheOBruS/guaVsOOBjDDjgavjgarjgaPjgZ/jgajjgY3jgavoo5zmrKDnmoTjgavkuozmrKHmlrnnqIvlvI/jga7op6PjgpLjgoLjgajjgoHjgovjgIJcbiAgICogYSAqIHheMiArIGIgKiB4ICsgYyA9IDBcbiAgICpcbiAgICogQHBhcmFtICAgYSAtPiDkuozmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgYiAtPiDkuIDmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgYyAtPiDlrprmlbDpoIXjga7lgKRcbiAgICogQHJldHVybiAg5LqM5qyh5pa556iL5byP44Gu6KejXG4gICAqL1xuICBzdGF0aWMgcXVhZHJhdGljRXF1YXRpb24oYTogbnVtYmVyLCBiOiBudW1iZXIsIGM6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuYWJzKGEpIDwgQ3ViaXNtTWF0aC5FcHNpbG9uKSB7XG4gICAgICBpZiAodGhpcy5hYnMoYikgPCBDdWJpc21NYXRoLkVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIC1jO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC1jIC8gYjtcbiAgICB9XG5cbiAgICByZXR1cm4gLShiICsgdGhpcy5zcXJ0KGIgKiBiIC0gNC4wICogYSAqIGMpKSAvICgyLjAgKiBhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqvjg6vjg4Djg47jga7lhazlvI/jgavjgojjgaPjgabjg5njgrjjgqfjga505YCk44Gr6Kmy5b2T44GZ44KL77yT5qyh5pa556iL5byP44Gu6Kej44KS5rGC44KB44KL44CCXG4gICAqIOmHjeino+OBq+OBquOBo+OBn+OBqOOBjeOBq+OBrzAuMO+9njEuMOOBruWApOOBq+OBquOCi+ino+OCkui/lOOBmeOAglxuICAgKlxuICAgKiBhICogeF4zICsgYiAqIHheMiArIGMgKiB4ICsgZCA9IDBcbiAgICpcbiAgICogQHBhcmFtICAgYSAtPiDkuInmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgYiAtPiDkuozmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgYyAtPiDkuIDmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgZCAtPiDlrprmlbDpoIXjga7lgKRcbiAgICogQHJldHVybiAgMC4w772eMS4w44Gu6ZaT44Gr44GC44KL6KejXG4gICAqL1xuICBzdGF0aWMgY2FyZGFub0FsZ29yaXRobUZvckJlemllcihcbiAgICBhOiBudW1iZXIsXG4gICAgYjogbnVtYmVyLFxuICAgIGM6IG51bWJlcixcbiAgICBkOiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5zcXJ0KGEpIDwgQ3ViaXNtTWF0aC5FcHNpbG9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYW5nZSh0aGlzLnF1YWRyYXRpY0VxdWF0aW9uKGIsIGMsIGQpLCAwLjAsIDEuMCk7XG4gICAgfVxuXG4gICAgY29uc3QgYmE6IG51bWJlciA9IGIgLyBhO1xuICAgIGNvbnN0IGNhOiBudW1iZXIgPSBjIC8gYTtcbiAgICBjb25zdCBkYTogbnVtYmVyID0gZCAvIGE7XG5cbiAgICBjb25zdCBwOiBudW1iZXIgPSAoMy4wICogY2EgLSBiYSAqIGJhKSAvIDMuMDtcbiAgICBjb25zdCBwMzogbnVtYmVyID0gcCAvIDMuMDtcbiAgICBjb25zdCBxOiBudW1iZXIgPSAoMi4wICogYmEgKiBiYSAqIGJhIC0gOS4wICogYmEgKiBjYSArIDI3LjAgKiBkYSkgLyAyNy4wO1xuICAgIGNvbnN0IHEyOiBudW1iZXIgPSBxIC8gMi4wO1xuICAgIGNvbnN0IGRpc2NyaW1pbmFudDogbnVtYmVyID0gcTIgKiBxMiArIHAzICogcDMgKiBwMztcblxuICAgIGNvbnN0IGNlbnRlciA9IDAuNTtcbiAgICBjb25zdCB0aHJlc2hvbGQ6IG51bWJlciA9IGNlbnRlciArIDAuMDE7XG5cbiAgICBpZiAoZGlzY3JpbWluYW50IDwgMC4wKSB7XG4gICAgICBjb25zdCBtcDM6IG51bWJlciA9IC1wIC8gMy4wO1xuICAgICAgY29uc3QgbXAzMzogbnVtYmVyID0gbXAzICogbXAzICogbXAzO1xuICAgICAgY29uc3QgcjogbnVtYmVyID0gdGhpcy5zcXJ0KG1wMzMpO1xuICAgICAgY29uc3QgdDogbnVtYmVyID0gLXEgLyAoMi4wICogcik7XG4gICAgICBjb25zdCBjb3NwaGk6IG51bWJlciA9IHRoaXMucmFuZ2UodCwgLTEuMCwgMS4wKTtcbiAgICAgIGNvbnN0IHBoaTogbnVtYmVyID0gTWF0aC5hY29zKGNvc3BoaSk7XG4gICAgICBjb25zdCBjcnRyOiBudW1iZXIgPSB0aGlzLmNicnQocik7XG4gICAgICBjb25zdCB0MTogbnVtYmVyID0gMi4wICogY3J0cjtcblxuICAgICAgY29uc3Qgcm9vdDE6IG51bWJlciA9IHQxICogdGhpcy5jb3MocGhpIC8gMy4wKSAtIGJhIC8gMy4wO1xuICAgICAgaWYgKHRoaXMuYWJzKHJvb3QxIC0gY2VudGVyKSA8IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MSwgMC4wLCAxLjApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByb290MjogbnVtYmVyID1cbiAgICAgICAgdDEgKiB0aGlzLmNvcygocGhpICsgMi4wICogTWF0aC5QSSkgLyAzLjApIC0gYmEgLyAzLjA7XG4gICAgICBpZiAodGhpcy5hYnMocm9vdDIgLSBjZW50ZXIpIDwgdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QyLCAwLjAsIDEuMCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJvb3QzOiBudW1iZXIgPVxuICAgICAgICB0MSAqIHRoaXMuY29zKChwaGkgKyA0LjAgKiBNYXRoLlBJKSAvIDMuMCkgLSBiYSAvIDMuMDtcbiAgICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QzLCAwLjAsIDEuMCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2NyaW1pbmFudCA9PSAwLjApIHtcbiAgICAgIGxldCB1MTogbnVtYmVyO1xuICAgICAgaWYgKHEyIDwgMC4wKSB7XG4gICAgICAgIHUxID0gdGhpcy5jYnJ0KC1xMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1MSA9IC10aGlzLmNicnQocTIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByb290MTogbnVtYmVyID0gMi4wICogdTEgLSBiYSAvIDMuMDtcbiAgICAgIGlmICh0aGlzLmFicyhyb290MSAtIGNlbnRlcikgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDEsIDAuMCwgMS4wKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm9vdDI6IG51bWJlciA9IC11MSAtIGJhIC8gMy4wO1xuICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDIsIDAuMCwgMS4wKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZDogbnVtYmVyID0gdGhpcy5zcXJ0KGRpc2NyaW1pbmFudCk7XG4gICAgY29uc3QgdTE6IG51bWJlciA9IHRoaXMuY2JydChzZCAtIHEyKTtcbiAgICBjb25zdCB2MTogbnVtYmVyID0gdGhpcy5jYnJ0KHNkICsgcTIpO1xuICAgIGNvbnN0IHJvb3QxOiBudW1iZXIgPSB1MSAtIHYxIC0gYmEgLyAzLjA7XG4gICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDEsIDAuMCwgMS4wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tYXRoJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21NYXRoID0gJC5DdWJpc21NYXRoO1xuICBleHBvcnQgdHlwZSBDdWJpc21NYXRoID0gJC5DdWJpc21NYXRoO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiA0eDTjga7ooYzliJdcbiAqXG4gKiA0eDTooYzliJfjga7kvr/liKnjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1hdHJpeDQ0IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3RyID0gbmV3IEZsb2F0MzJBcnJheSgxNik7IC8vIDQgKiA044Gu44K144Kk44K6XG4gICAgdGhpcy5sb2FkSWRlbnRpdHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj5fjgZHlj5bjgaPjgZ/vvJLjgaTjga7ooYzliJfjga7kuZfnrpfjgpLooYzjgYbjgIJcbiAgICpcbiAgICogQHBhcmFtIGEg6KGM5YiXYVxuICAgKiBAcGFyYW0gYiDooYzliJdiXG4gICAqIEByZXR1cm4g5LmX566X57WQ5p6c44Gu6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIG11bHRpcGx5KFxuICAgIGE6IEZsb2F0MzJBcnJheSxcbiAgICBiOiBGbG9hdDMyQXJyYXksXG4gICAgZHN0OiBGbG9hdDMyQXJyYXlcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgYzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLFxuICAgICAgMC4wLFxuICAgIF0pO1xuXG4gICAgY29uc3QgbiA9IDQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyArK2opIHtcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuOyArK2spIHtcbiAgICAgICAgICBjW2ogKyBpICogNF0gKz0gYVtrICsgaSAqIDRdICogYltqICsgayAqIDRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBkc3RbaV0gPSBjW2ldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDljZjkvY3ooYzliJfjgavliJ3mnJ/ljJbjgZnjgotcbiAgICovXG4gIHB1YmxpYyBsb2FkSWRlbnRpdHkoKTogdm9pZCB7XG4gICAgY29uc3QgYzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgdGhpcy5zZXRNYXRyaXgoYyk7XG4gIH1cblxuICAvKipcbiAgICog6KGM5YiX44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB0ciAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xuICAgKi9cbiAgcHVibGljIHNldE1hdHJpeCh0cjogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICB0aGlzLl90cltpXSA9IHRyW2ldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDooYzliJfjgpLmta7li5XlsI/mlbDngrnmlbDjga7phY3liJfjgaflj5blvpdcbiAgICpcbiAgICogQHJldHVybiAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xuICAgKi9cbiAgcHVibGljIGdldEFycmF5KCk6IEZsb2F0MzJBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7mi6HlpKfnjofjgpLlj5blvpdcbiAgICogQHJldHVybiBY6Lu444Gu5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NhbGVYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFnou7jjga7mi6HlpKfnjofjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiBZ6Lu444Gu5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NhbGVZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzVdO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7np7vli5Xph4/jgpLlj5blvpdcbiAgICogQHJldHVybiBY6Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgZ2V0VHJhbnNsYXRlWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90clsxMl07XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruenu+WLlemHj+OCkuWPluW+l1xuICAgKiBAcmV0dXJuIFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyBnZXRUcmFuc2xhdGVZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzEzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBY6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6KiI566XXG4gICAqXG4gICAqIEBwYXJhbSBzcmMgWOi7uOOBruWApFxuICAgKiBAcmV0dXJuIOePvuWcqOOBruihjOWIl+OBp+ioiOeul+OBleOCjOOBn1jou7jjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHJbMF0gKiBzcmMgKyB0aGlzLl90clsxMl07XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruWApOOCkuePvuWcqOOBruihjOWIl+OBp+ioiOeul1xuICAgKlxuICAgKiBAcGFyYW0gc3JjIFnou7jjga7lgKRcbiAgICogQHJldHVybiDnj77lnKjjga7ooYzliJfjgafoqIjnrpfjgZXjgozjgZ9Z6Lu444Gu5YCkXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzVdICogc3JjICsgdGhpcy5fdHJbMTNdO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafpgIboqIjnrpdcbiAgICovXG4gIHB1YmxpYyBpbnZlcnRUcmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHNyYyAtIHRoaXMuX3RyWzEyXSkgLyB0aGlzLl90clswXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6YCG6KiI566XXG4gICAqL1xuICBwdWJsaWMgaW52ZXJ0VHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIChzcmMgLSB0aGlzLl90clsxM10pIC8gdGhpcy5fdHJbNV07XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5L2N572u44KS6LW354K544Gr44GX44Gm56e75YuVXG4gICAqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkui1t+eCueOBq+OBl+OBpuebuOWvvueahOOBq+enu+WLleOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXG4gICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGVSZWxhdGl2ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICBdKTtcblxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMSwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLnp7vli5VcbiAgICpcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cbiAgICogQHBhcmFtIHkgeei7uOOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIHRyYW5zbGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RyWzEyXSA9IHg7XG4gICAgdGhpcy5fdHJbMTNdID0geTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjga5Y6Lu444Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGVYKHg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RyWzEyXSA9IHg7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44GuWei7uOOBruS9jee9ruOCkuaMh+WumuOBl+OBn+S9jee9ruOBuOenu+WLleOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geSBZ6Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgdHJhbnNsYXRlWSh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl90clsxM10gPSB5O1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruaLoeWkp+eOh+OCkuebuOWvvueahOOBq+ioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5ouh5aSn546HXG4gICAqIEBwYXJhbSB5IFnou7jjga7mi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBzY2FsZVJlbGF0aXZlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgdHIxOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIHgsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICB5LFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruaLoeWkp+eOh+OCkuaMh+WumuOBl+OBn+WAjeeOh+OBq+ioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5ouh5aSn546HXG4gICAqIEBwYXJhbSB5IFnou7jjga7mi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBzY2FsZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RyWzBdID0geDtcbiAgICB0aGlzLl90cls1XSA9IHk7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44Gr6KGM5YiX44KS5LmX566XXG4gICAqXG4gICAqIEBwYXJhbSBtIOihjOWIl1xuICAgKi9cbiAgcHVibGljIG11bHRpcGx5QnlNYXRyaXgobTogQ3ViaXNtTWF0cml4NDQpOiB2b2lkIHtcbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseShtLmdldEFycmF5KCksIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gIH1cblxuICAvKipcbiAgICog44Kq44OW44K444Kn44Kv44OI44Gu44Kz44OU44O844KS55Sf5oiQ44GZ44KLXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogQ3ViaXNtTWF0cml4NDQge1xuICAgIGNvbnN0IGNsb25lTWF0cml4OiBDdWJpc21NYXRyaXg0NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ci5sZW5ndGg7IGkrKykge1xuICAgICAgY2xvbmVNYXRyaXguX3RyW2ldID0gdGhpcy5fdHJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lTWF0cml4O1xuICB9XG5cbiAgcHJvdGVjdGVkIF90cjogRmxvYXQzMkFycmF5OyAvLyA0eDTooYzliJfjg4fjg7zjgr9cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbWF0cml4NDQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1hdHJpeDQ0ID0gJC5DdWJpc21NYXRyaXg0NDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTWF0cml4NDQgPSAkLkN1YmlzbU1hdHJpeDQ0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY3NtTWFwLCBpdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IEN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnLi9jdWJpc21tYXRyaXg0NCc7XG5cbi8qKlxuICog44Oi44OH44Or5bqn5qiZ6Kit5a6a55So44GuNHg06KGM5YiXXG4gKlxuICog44Oi44OH44Or5bqn5qiZ6Kit5a6a55So44GuNHg06KGM5YiX44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbE1hdHJpeCBleHRlbmRzIEN1YmlzbU1hdHJpeDQ0IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKlxuICAgKiBAcGFyYW0gdyDmqKrluYVcbiAgICogQHBhcmFtIGgg57im5bmFXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih3PzogbnVtYmVyLCBoPzogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3dpZHRoID0gdyAhPT0gdW5kZWZpbmVkID8gdyA6IDAuMDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoICE9PSB1bmRlZmluZWQgPyBoIDogMC4wO1xuXG4gICAgdGhpcy5zZXRIZWlnaHQoMi4wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmqKrluYXjgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHcg5qiq5bmFXG4gICAqL1xuICBwdWJsaWMgc2V0V2lkdGgodzogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3Qgc2NhbGVYOiBudW1iZXIgPSB3IC8gdGhpcy5fd2lkdGg7XG4gICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPSBzY2FsZVg7XG4gICAgdGhpcy5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gIH1cblxuICAvKipcbiAgICog57im5bmF44KS6Kit5a6aXG4gICAqIEBwYXJhbSBoIOe4puW5hVxuICAgKi9cbiAgcHVibGljIHNldEhlaWdodChoOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9IGggLyB0aGlzLl9oZWlnaHQ7XG4gICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPSBzY2FsZVg7XG4gICAgdGhpcy5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gIH1cblxuICAvKipcbiAgICog5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHkgWei7uOOBruS9jee9rlxuICAgKi9cbiAgcHVibGljIHNldFBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy50cmFuc2xhdGUoeCwgeSk7XG4gIH1cblxuICAvKipcbiAgICog5Lit5b+D5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7kuK3lv4PkvY3nva5cbiAgICogQHBhcmFtIHkgWei7uOOBruS4reW/g+S9jee9rlxuICAgKlxuICAgKiBAbm90ZSB3aWR0aOOBi2hlaWdodOOCkuioreWumuOBl+OBn+OBguOBqOOBp+OBquOBhOOBqOOAgeaLoeWkp+eOh+OBjOato+OBl+OBj+WPluW+l+OBp+OBjeOBquOBhOOBn+OCgeOBmuOCjOOCi+OAglxuICAgKi9cbiAgcHVibGljIHNldENlbnRlclBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy5jZW50ZXJYKHgpO1xuICAgIHRoaXMuY2VudGVyWSh5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuIrovrrjga7kvY3nva7jgpLoqK3lrprjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHkg5LiK6L6644GuWei7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIHRvcCh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNldFkoeSk7XG4gIH1cblxuICAvKipcbiAgICog5LiL6L6644Gu5L2N572u44KS6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB5IOS4i+i+uuOBrlnou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBib3R0b20oeTogbnVtYmVyKSB7XG4gICAgY29uc3QgaDogbnVtYmVyID0gdGhpcy5faGVpZ2h0ICogdGhpcy5nZXRTY2FsZVkoKTtcblxuICAgIHRoaXMudHJhbnNsYXRlWSh5IC0gaCk7XG4gIH1cblxuICAvKipcbiAgICog5bem6L6644Gu5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IOW3pui+uuOBrljou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBsZWZ0KHg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2V0WCh4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj7Povrrjga7kvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHgg5Y+z6L6644GuWOi7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIHJpZ2h0KHg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHcgPSB0aGlzLl93aWR0aCAqIHRoaXMuZ2V0U2NhbGVYKCk7XG5cbiAgICB0aGlzLnRyYW5zbGF0ZVgoeCAtIHcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7kuK3lv4PkvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruS4reW/g+S9jee9rlxuICAgKi9cbiAgcHVibGljIGNlbnRlclgoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgdyA9IHRoaXMuX3dpZHRoICogdGhpcy5nZXRTY2FsZVgoKTtcblxuICAgIHRoaXMudHJhbnNsYXRlWCh4IC0gdyAvIDIuMCk7XG4gIH1cblxuICAvKipcbiAgICogWOi7uOOBruS9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgc2V0WCh4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnRyYW5zbGF0ZVgoeCk7XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruS4reW/g+S9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geSBZ6Lu444Gu5Lit5b+D5L2N572uXG4gICAqL1xuICBwdWJsaWMgY2VudGVyWSh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBoOiBudW1iZXIgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xuXG4gICAgdGhpcy50cmFuc2xhdGVZKHkgLSBoIC8gMi4wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu5L2N572u44KS6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB5IFnou7jjga7kvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXRZKHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMudHJhbnNsYXRlWSh5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYvjgonkvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIGxheW91dCDjg6zjgqTjgqLjgqbjg4jmg4XloLFcbiAgICovXG4gIHB1YmxpYyBzZXR1cEZyb21MYXlvdXQobGF5b3V0OiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogdm9pZCB7XG4gICAgY29uc3Qga2V5V2lkdGggPSAnd2lkdGgnO1xuICAgIGNvbnN0IGtleUhlaWdodCA9ICdoZWlnaHQnO1xuICAgIGNvbnN0IGtleVggPSAneCc7XG4gICAgY29uc3Qga2V5WSA9ICd5JztcbiAgICBjb25zdCBrZXlDZW50ZXJYID0gJ2NlbnRlcl94JztcbiAgICBjb25zdCBrZXlDZW50ZXJZID0gJ2NlbnRlcl95JztcbiAgICBjb25zdCBrZXlUb3AgPSAndG9wJztcbiAgICBjb25zdCBrZXlCb3R0b20gPSAnYm90dG9tJztcbiAgICBjb25zdCBrZXlMZWZ0ID0gJ2xlZnQnO1xuICAgIGNvbnN0IGtleVJpZ2h0ID0gJ3JpZ2h0JztcblxuICAgIGZvciAoXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgbnVtYmVyPiA9IGxheW91dC5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKGxheW91dC5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgIGlmIChrZXkgPT0ga2V5V2lkdGgpIHtcbiAgICAgICAgdGhpcy5zZXRXaWR0aCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5zZXRIZWlnaHQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgbnVtYmVyPiA9IGxheW91dC5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKGxheW91dC5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgIGlmIChrZXkgPT0ga2V5WCkge1xuICAgICAgICB0aGlzLnNldFgodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5WSkge1xuICAgICAgICB0aGlzLnNldFkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5Q2VudGVyWCkge1xuICAgICAgICB0aGlzLmNlbnRlclgodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5Q2VudGVyWSkge1xuICAgICAgICB0aGlzLmNlbnRlclkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5VG9wKSB7XG4gICAgICAgIHRoaXMudG9wKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUJvdHRvbSkge1xuICAgICAgICB0aGlzLmJvdHRvbSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlMZWZ0KSB7XG4gICAgICAgIHRoaXMubGVmdCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlSaWdodCkge1xuICAgICAgICB0aGlzLnJpZ2h0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF93aWR0aDogbnVtYmVyOyAvLyDmqKrluYVcbiAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7IC8vIOe4puW5hVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbG1hdHJpeCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxNYXRyaXggPSAkLkN1YmlzbU1vZGVsTWF0cml4O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbE1hdHJpeCA9ICQuQ3ViaXNtTW9kZWxNYXRyaXg7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRoIH0gZnJvbSAnLi9jdWJpc21tYXRoJztcblxuY29uc3QgRnJhbWVSYXRlID0gMzA7XG5jb25zdCBFcHNpbG9uID0gMC4wMTtcblxuLyoqXG4gKiDpoZTjga7lkJHjgY3jga7liLblvqHmqZ/og71cbiAqXG4gKiDpoZTjga7lkJHjgY3jga7liLblvqHmqZ/og73jgpLmj5DkvpvjgZnjgovjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVRhcmdldFBvaW50IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2ZhY2VUYXJnZXRYID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VUYXJnZXRZID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VYID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VZID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VWWCA9IDAuMDtcbiAgICB0aGlzLl9mYWNlVlkgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDlh6bnkIZcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8g44OH44Or44K/5pmC6ZaT44KS5Yqg566X44GZ44KLXG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICAvLyDpppbjgpLkuK3lpK7jgYvjgonlt6blj7PjgavmjK/jgovjgajjgY3jga7lubPlnYfnmoTjgarpgJ/jgZXjga8g56eS6YCf5bqm44CC5Yqg6YCf44O75rib6YCf44KS6ICD5oWu44GX44Gm44CB44Gd44Gu77yS5YCN44KS5pyA6auY6YCf5bqm44Go44GZ44KLXG4gICAgLy8g6aGU44Gu5oyv44KK5YW35ZCI44KS44CB5Lit5aSu77yIMC4w77yJ44GL44KJ44CB5bem5Y+z44Gv77yIKy0xLjDvvInjgajjgZnjgotcbiAgICBjb25zdCBmYWNlUGFyYW1NYXhWOiBudW1iZXIgPSA0MC4wIC8gMTAuMDsgLy8gNy4156eS6ZaT44GrNDDliIbnp7vli5UoNS4zL3NjKVxuICAgIGNvbnN0IG1heFY6IG51bWJlciA9IChmYWNlUGFyYW1NYXhWICogMS4wKSAvIEZyYW1lUmF0ZTsgLy8gMWZyYW1l44GC44Gf44KK44Gr5aSJ5YyW44Gn44GN44KL6YCf5bqm44Gu5LiK6ZmQXG5cbiAgICBpZiAodGhpcy5fbGFzdFRpbWVTZWNvbmRzID09IDAuMCkge1xuICAgICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlbHRhVGltZVdlaWdodDogbnVtYmVyID1cbiAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9sYXN0VGltZVNlY29uZHMpICogRnJhbWVSYXRlO1xuICAgIHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcblxuICAgIC8vIOacgOmrmOmAn+W6puOBq+OBquOCi+OBvuOBp+OBruaZgumWk+OCklxuICAgIGNvbnN0IHRpbWVUb01heFNwZWVkID0gMC4xNTtcbiAgICBjb25zdCBmcmFtZVRvTWF4U3BlZWQ6IG51bWJlciA9IHRpbWVUb01heFNwZWVkICogRnJhbWVSYXRlOyAvLyBzZWMgKiBmcmFtZS9zZWNcbiAgICBjb25zdCBtYXhBOiBudW1iZXIgPSAoZGVsdGFUaW1lV2VpZ2h0ICogbWF4VikgLyBmcmFtZVRvTWF4U3BlZWQ7IC8vIDFmcmFtZeOBguOBn+OCiuOBruWKoOmAn+W6plxuXG4gICAgLy8g55uu5oyH44GZ5ZCR44GN44Gv44CB77yIZHgsIGR577yJ5pa55ZCR44Gu44OZ44Kv44OI44Or44Go44Gq44KLXG4gICAgY29uc3QgZHg6IG51bWJlciA9IHRoaXMuX2ZhY2VUYXJnZXRYIC0gdGhpcy5fZmFjZVg7XG4gICAgY29uc3QgZHk6IG51bWJlciA9IHRoaXMuX2ZhY2VUYXJnZXRZIC0gdGhpcy5fZmFjZVk7XG5cbiAgICBpZiAoQ3ViaXNtTWF0aC5hYnMoZHgpIDw9IEVwc2lsb24gJiYgQ3ViaXNtTWF0aC5hYnMoZHkpIDw9IEVwc2lsb24pIHtcbiAgICAgIHJldHVybjsgLy8g5aSJ5YyW44Gq44GXXG4gICAgfVxuXG4gICAgLy8g6YCf5bqm44Gu5pyA5aSn44KI44KK44KC5aSn44GN44GE5aC05ZCI44Gv44CB6YCf5bqm44KS6JC944Go44GZXG4gICAgY29uc3QgZDogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICAgIC8vIOmAsuihjOaWueWQkeOBruacgOWkp+mAn+W6puODmeOCr+ODiOODq1xuICAgIGNvbnN0IHZ4OiBudW1iZXIgPSAobWF4ViAqIGR4KSAvIGQ7XG4gICAgY29uc3Qgdnk6IG51bWJlciA9IChtYXhWICogZHkpIC8gZDtcblxuICAgIC8vIOePvuWcqOOBrumAn+W6puOBi+OCieOAgeaWsOimj+mAn+W6puOBuOOBruWkieWMlu+8iOWKoOmAn+W6pu+8ieOCkuaxguOCgeOCi1xuICAgIGxldCBheDogbnVtYmVyID0gdnggLSB0aGlzLl9mYWNlVlg7XG4gICAgbGV0IGF5OiBudW1iZXIgPSB2eSAtIHRoaXMuX2ZhY2VWWTtcblxuICAgIGNvbnN0IGE6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChheCAqIGF4ICsgYXkgKiBheSk7XG5cbiAgICAvLyDliqDpgJ/jga7jgajjgY1cbiAgICBpZiAoYSA8IC1tYXhBIHx8IGEgPiBtYXhBKSB7XG4gICAgICBheCAqPSBtYXhBIC8gYTtcbiAgICAgIGF5ICo9IG1heEEgLyBhO1xuICAgIH1cblxuICAgIC8vIOWKoOmAn+W6puOCkuWFg+OBrumAn+W6puOBq+i2s+OBl+OBpuOAgeaWsOmAn+W6puOBqOOBmeOCi1xuICAgIHRoaXMuX2ZhY2VWWCArPSBheDtcbiAgICB0aGlzLl9mYWNlVlkgKz0gYXk7XG5cbiAgICAvLyDnm67nmoTjga7mlrnlkJHjgavov5HjgaXjgYTjgZ/jgajjgY3jgIHmu5HjgonjgYvjgavmuJvpgJ/jgZnjgovjgZ/jgoHjga7lh6bnkIZcbiAgICAvLyDoqK3lrprjgZXjgozjgZ/liqDpgJ/luqbjgafmraLjgb7jgovkuovjga7lh7rmnaXjgovot53pm6LjgajpgJ/luqbjga7plqLkv4LjgYvjgolcbiAgICAvLyDnj77lnKjjgajjgorjgYbjgovmnIDpq5jpgJ/luqbjgpLoqIjnrpfjgZfjgIHjgZ3jgozku6XkuIrjga7mmYLjga/pgJ/luqbjgpLokL3jgajjgZlcbiAgICAvLyDigLvmnKzmnaXjgIHkurrplpPjga/nrYvlipvjgaflipvvvIjliqDpgJ/luqbvvInjgpLoqr/mlbTjgafjgY3jgovjgZ/jgoHjgIHjgojjgoroh6rnlLHluqbjgYzpq5jjgYTjgYzjgIHnsKHljZjjgarlh6bnkIbjgafmuIjjgb7jgZvjgabjgYTjgotcbiAgICB7XG4gICAgICAvLyDliqDpgJ/luqbjgIHpgJ/luqbjgIHot53pm6Ljga7plqLkv4LlvI/jgIJcbiAgICAgIC8vICAgICAgICAgICAgMiAgNiAgICAgICAgICAgMiAgICAgICAgICAgICAgIDNcbiAgICAgIC8vICAgICAgc3FydChhICB0ICArIDE2IGEgaCB0ICAtIDggYSBoKSAtIGEgdFxuICAgICAgLy8gdiA9IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgLy8gICAgICAgICAgICAgICAgIDQgdCAgLSAyXG4gICAgICAvLyAodD0xKVxuICAgICAgLy8gXHTmmYLliLt044Gv44CB44GC44KJ44GL44GY44KB5Yqg6YCf5bqm44CB6YCf5bqm44KSMS82MCjjg5Xjg6zjg7zjg6Djg6zjg7zjg4jjgIHljZjkvY3jgarjgZcp44GnXG4gICAgICAvLyBcdOiAg+OBiOOBpuOBhOOCi+OBruOBp+OAgXTvvJ3vvJHjgajjgZfjgabmtojjgZfjgabjgojjgYTvvIjigLvmnKrmpJzoqLzvvIlcblxuICAgICAgY29uc3QgbWF4VjogbnVtYmVyID1cbiAgICAgICAgMC41ICpcbiAgICAgICAgKEN1YmlzbU1hdGguc3FydChtYXhBICogbWF4QSArIDE2LjAgKiBtYXhBICogZCAtIDguMCAqIG1heEEgKiBkKSAtXG4gICAgICAgICAgbWF4QSk7XG4gICAgICBjb25zdCBjdXJWOiBudW1iZXIgPSBDdWJpc21NYXRoLnNxcnQoXG4gICAgICAgIHRoaXMuX2ZhY2VWWCAqIHRoaXMuX2ZhY2VWWCArIHRoaXMuX2ZhY2VWWSAqIHRoaXMuX2ZhY2VWWVxuICAgICAgKTtcblxuICAgICAgaWYgKGN1clYgPiBtYXhWKSB7XG4gICAgICAgIC8vIOePvuWcqOOBrumAn+W6piA+IOacgOmrmOmAn+W6puOBruOBqOOBjeOAgeacgOmrmOmAn+W6puOBvuOBp+a4m+mAn1xuICAgICAgICB0aGlzLl9mYWNlVlggKj0gbWF4ViAvIGN1clY7XG4gICAgICAgIHRoaXMuX2ZhY2VWWSAqPSBtYXhWIC8gY3VyVjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9mYWNlWCArPSB0aGlzLl9mYWNlVlg7XG4gICAgdGhpcy5fZmFjZVkgKz0gdGhpcy5fZmFjZVZZO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7poZTjga7lkJHjgY3jga7lgKTjgpLlj5blvpdcbiAgICpcbiAgICogQHJldHVybiBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgKi9cbiAgcHVibGljIGdldFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFjZVg7XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuIFnou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXG4gICAqL1xuICBwdWJsaWMgZ2V0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mYWNlWTtcbiAgfVxuXG4gIC8qKlxuICAgKiDpoZTjga7lkJHjgY3jga7nm67mqJnlgKTjgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcbiAgICogQHBhcmFtIHkgWei7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcbiAgICovXG4gIHB1YmxpYyBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWNlVGFyZ2V0WCA9IHg7XG4gICAgdGhpcy5fZmFjZVRhcmdldFkgPSB5O1xuICB9XG5cbiAgcHJpdmF0ZSBfZmFjZVRhcmdldFg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44GuWOebruaomeWApO+8iOOBk+OBruWApOOBq+i/keOBpeOBhOOBpuOBhOOBj++8iVxuICBwcml2YXRlIF9mYWNlVGFyZ2V0WTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga5Z55uu5qiZ5YCk77yI44GT44Gu5YCk44Gr6L+R44Gl44GE44Gm44GE44GP77yJXG4gIHByaXZhdGUgX2ZhY2VYOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjVjvvIgtMS4wIH4gMS4w77yJXG4gIHByaXZhdGUgX2ZhY2VZOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjVnvvIgtMS4wIH4gMS4w77yJXG4gIHByaXZhdGUgX2ZhY2VWWDogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga7lpInljJbpgJ/luqZYXG4gIHByaXZhdGUgX2ZhY2VWWTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga7lpInljJbpgJ/luqZZXG4gIHByaXZhdGUgX2xhc3RUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDmnIDlvozjga7lrp/ooYzmmYLplpNb56eSXVxuICBwcml2YXRlIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtdGFyZ2V0cG9pbnQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVRhcmdldFBvaW50ID0gJC5DdWJpc21UYXJnZXRQb2ludDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtVGFyZ2V0UG9pbnQgPSAkLkN1YmlzbVRhcmdldFBvaW50O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiAy5qyh5YWD44OZ44Kv44OI44Or5Z6LXG4gKlxuICogMuasoeWFg+ODmeOCr+ODiOODq+Wei+OBruapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVmVjdG9yMiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgeD86IG51bWJlciwgcHVibGljIHk/OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4ID09IHVuZGVmaW5lZCA/IDAuMCA6IHg7XG5cbiAgICB0aGlzLnkgPSB5ID09IHVuZGVmaW5lZCA/IDAuMCA6IHk7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu5Yqg566XXG4gICAqXG4gICAqIEBwYXJhbSB2ZWN0b3IyIOWKoOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgKiBAcmV0dXJuIOWKoOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBhZGQodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICByZXQueCA9IHRoaXMueCArIHZlY3RvcjIueDtcbiAgICByZXQueSA9IHRoaXMueSArIHZlY3RvcjIueTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBrua4m+eul1xuICAgKlxuICAgKiBAcGFyYW0gdmVjdG9yMiDmuJvnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcbiAgICogQHJldHVybiDmuJvnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAqL1xuICBwdWJsaWMgc3Vic3RyYWN0KHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggLSB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgLSB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpdcbiAgICpcbiAgICogQHBhcmFtIHZlY3RvcjIg5LmX566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAqIEByZXR1cm4g5LmX566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIG11bHRpcGx5KHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggKiB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgKiB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpco44K544Kr44Op44O8KVxuICAgKlxuICAgKiBAcGFyYW0gc2NhbGFyIOS5l+eul+OBmeOCi+OCueOCq+ODqeODvOWApFxuICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseUJ5U2NhbGVyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHkobmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpdcbiAgICpcbiAgICogQHBhcmFtIHZlY3RvcjIg6Zmk566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIGRpdmlzaW9uKHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggLyB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgLyB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpco44K544Kr44Op44O8KVxuICAgKlxuICAgKiBAcGFyYW0gc2NhbGFyIOmZpOeul+OBmeOCi+OCueOCq+ODqeODvOWApFxuICAgKiBAcmV0dXJuIOmZpOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBkaXZpc2lvbkJ5U2NhbGFyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuZGl2aXNpb24obmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7plbfjgZXjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7plbfjgZVcbiAgICovXG4gIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu6Led6Zui44Gu5Y+W5b6XXG4gICAqXG4gICAqIEBwYXJhbSBhIOeCuVxuICAgKiBAcmV0dXJuIOODmeOCr+ODiOODq+OBrui3nembolxuICAgKi9cbiAgcHVibGljIGdldERpc3RhbmNlV2l0aChhOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KFxuICAgICAgKHRoaXMueCAtIGEueCkgKiAodGhpcy54IC0gYS54KSArICh0aGlzLnkgLSBhLnkpICogKHRoaXMueSAtIGEueSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODieODg+ODiOepjeOBruioiOeul1xuICAgKlxuICAgKiBAcGFyYW0gYSDlgKRcbiAgICogQHJldHVybiDntZDmnpxcbiAgICovXG4gIHB1YmxpYyBkb3QoYTogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueCAqIGEueCArIHRoaXMueSAqIGEueTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjga7pgannlKhcbiAgICovXG4gIHB1YmxpYyBub3JtYWxpemUoKTogdm9pZCB7XG4gICAgY29uc3QgbGVuZ3RoOiBudW1iZXIgPSBNYXRoLnBvdyh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnksIDAuNSk7XG5cbiAgICB0aGlzLnggPSB0aGlzLnggLyBsZW5ndGg7XG4gICAgdGhpcy55ID0gdGhpcy55IC8gbGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIOetieOBl+OBleOBrueiuuiqje+8iOetieOBl+OBhOOBi++8n++8iVxuICAgKlxuICAgKiDlgKTjgYznrYnjgZfjgYTjgYvvvJ9cbiAgICpcbiAgICogQHBhcmFtIHJocyDnorroqo3jgZnjgovlgKRcbiAgICogQHJldHVybiB0cnVlIOWApOOBr+etieOBl+OBhFxuICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBj+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXF1YWwocmhzOiBDdWJpc21WZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMueCA9PSByaHMueCAmJiB0aGlzLnkgPT0gcmhzLnk7XG4gIH1cblxuICAvKipcbiAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GP44Gq44GE44GL77yf77yJXG4gICAqXG4gICAqIOWApOOBjOetieOBl+OBj+OBquOBhOOBi++8n1xuICAgKlxuICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxuICAgKiBAcmV0dXJuIHRydWUg5YCk44Gv562J44GX44GP44Gq44GEXG4gICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GEXG4gICAqL1xuICBwdWJsaWMgaXNOb3RFcXVhbChyaHM6IEN1YmlzbVZlY3RvcjIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuaXNFcXVhbChyaHMpO1xuICB9XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXZlY3RvcjInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVZlY3RvcjIgPSAkLkN1YmlzbVZlY3RvcjI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVZlY3RvcjIgPSAkLkN1YmlzbVZlY3RvcjI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4vY3ViaXNtbWF0cml4NDQnO1xuXG4vKipcbiAqIOOCq+ODoeODqeOBruS9jee9ruWkieabtOOBq+S9v+OBhuOBqOS+v+WIqeOBqjR4NOihjOWIl1xuICpcbiAqIOOCq+ODoeODqeOBruS9jee9ruWkieabtOOBq+S9v+OBhuOBqOS+v+WIqeOBqjR4NOihjOWIl+OBruOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVmlld01hdHJpeCBleHRlbmRzIEN1YmlzbU1hdHJpeDQ0IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc2NyZWVuTGVmdCA9IDAuMDtcbiAgICB0aGlzLl9zY3JlZW5SaWdodCA9IDAuMDtcbiAgICB0aGlzLl9zY3JlZW5Ub3AgPSAwLjA7XG4gICAgdGhpcy5fc2NyZWVuQm90dG9tID0gMC4wO1xuICAgIHRoaXMuX21heExlZnQgPSAwLjA7XG4gICAgdGhpcy5fbWF4UmlnaHQgPSAwLjA7XG4gICAgdGhpcy5fbWF4VG9wID0gMC4wO1xuICAgIHRoaXMuX21heEJvdHRvbSA9IDAuMDtcbiAgICB0aGlzLl9tYXhTY2FsZSA9IDAuMDtcbiAgICB0aGlzLl9taW5TY2FsZSA9IDAuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnp7vli5XjgpLoqr/mlbRcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xuICAgKiBAcGFyYW0geSBZ6Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgYWRqdXN0VHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3RyWzBdICogdGhpcy5fbWF4TGVmdCArICh0aGlzLl90clsxMl0gKyB4KSA+IHRoaXMuX3NjcmVlbkxlZnQpIHtcbiAgICAgIHggPSB0aGlzLl9zY3JlZW5MZWZ0IC0gdGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhMZWZ0IC0gdGhpcy5fdHJbMTJdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl90clswXSAqIHRoaXMuX21heFJpZ2h0ICsgKHRoaXMuX3RyWzEyXSArIHgpIDwgdGhpcy5fc2NyZWVuUmlnaHQpIHtcbiAgICAgIHggPSB0aGlzLl9zY3JlZW5SaWdodCAtIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4UmlnaHQgLSB0aGlzLl90clsxMl07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RyWzVdICogdGhpcy5fbWF4VG9wICsgKHRoaXMuX3RyWzEzXSArIHkpIDwgdGhpcy5fc2NyZWVuVG9wKSB7XG4gICAgICB5ID0gdGhpcy5fc2NyZWVuVG9wIC0gdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhUb3AgLSB0aGlzLl90clsxM107XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhCb3R0b20gKyAodGhpcy5fdHJbMTNdICsgeSkgPlxuICAgICAgdGhpcy5fc2NyZWVuQm90dG9tXG4gICAgKSB7XG4gICAgICB5ID0gdGhpcy5fc2NyZWVuQm90dG9tIC0gdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhCb3R0b20gLSB0aGlzLl90clsxM107XG4gICAgfVxuXG4gICAgY29uc3QgdHIxOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaLoeWkp+eOh+OCkuiqv+aVtFxuICAgKlxuICAgKiBAcGFyYW0gY3gg5ouh5aSn44KS6KGM44GGWOi7uOOBruS4reW/g+S9jee9rlxuICAgKiBAcGFyYW0gY3kg5ouh5aSn44KS6KGM44GGWei7uOOBruS4reW/g+S9jee9rlxuICAgKiBAcGFyYW0gc2NhbGUg5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgYWRqdXN0U2NhbGUoY3g6IG51bWJlciwgY3k6IG51bWJlciwgc2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG1heFNjYWxlOiBudW1iZXIgPSB0aGlzLmdldE1heFNjYWxlKCk7XG4gICAgY29uc3QgbWluU2NhbGU6IG51bWJlciA9IHRoaXMuZ2V0TWluU2NhbGUoKTtcblxuICAgIGNvbnN0IHRhcmdldFNjYWxlID0gc2NhbGUgKiB0aGlzLl90clswXTtcblxuICAgIGlmICh0YXJnZXRTY2FsZSA8IG1pblNjYWxlKSB7XG4gICAgICBpZiAodGhpcy5fdHJbMF0gPiAwLjApIHtcbiAgICAgICAgc2NhbGUgPSBtaW5TY2FsZSAvIHRoaXMuX3RyWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGFyZ2V0U2NhbGUgPiBtYXhTY2FsZSkge1xuICAgICAgaWYgKHRoaXMuX3RyWzBdID4gMC4wKSB7XG4gICAgICAgIHNjYWxlID0gbWF4U2NhbGUgLyB0aGlzLl90clswXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgY3gsXG4gICAgICBjeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICBdKTtcblxuICAgIGNvbnN0IHRyMjogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICBzY2FsZSxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIHNjYWxlLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgY29uc3QgdHIzOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIC1jeCxcbiAgICAgIC1jeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICBdKTtcblxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMywgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjIsIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+mkiueUn+OBruevhOWbsuOBruioreWumlxuICAgKlxuICAgKiBAcGFyYW0gbGVmdCAgICAgIOW3pui+uuOBrljou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHJpZ2h0ICAgICDlj7Povrrjga5Y6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSBib3R0b20gICAg5LiL6L6644GuWei7uOOBruS9jee9rlxuICAgKiBAcGFyYW0gdG9wICAgICAgIOS4iui+uuOBrlnou7jjga7kvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXRTY3JlZW5SZWN0KFxuICAgIGxlZnQ6IG51bWJlcixcbiAgICByaWdodDogbnVtYmVyLFxuICAgIGJvdHRvbTogbnVtYmVyLFxuICAgIHRvcDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX3NjcmVlbkxlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3NjcmVlblJpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5fc2NyZWVuQm90dG9tID0gYm90dG9tO1xuICAgIHRoaXMuX3NjcmVlblRvcCA9IHRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7Ljga7oqK3lrppcbiAgICogQHBhcmFtIGxlZnQgICAgICDlt6bovrrjga5Y6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSByaWdodCAgICAg5Y+z6L6644GuWOi7uOOBruS9jee9rlxuICAgKiBAcGFyYW0gYm90dG9tICAgIOS4i+i+uuOBrlnou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHRvcCAgICAgICDkuIrovrrjga5Z6Lu444Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgc2V0TWF4U2NyZWVuUmVjdChcbiAgICBsZWZ0OiBudW1iZXIsXG4gICAgcmlnaHQ6IG51bWJlcixcbiAgICBib3R0b206IG51bWJlcixcbiAgICB0b3A6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9tYXhMZWZ0ID0gbGVmdDtcbiAgICB0aGlzLl9tYXhSaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMuX21heFRvcCA9IHRvcDtcbiAgICB0aGlzLl9tYXhCb3R0b20gPSBib3R0b207XG4gIH1cblxuICAvKipcbiAgICog5pyA5aSn5ouh5aSn546H44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBtYXhTY2FsZSDmnIDlpKfmi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBzZXRNYXhTY2FsZShtYXhTY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbWF4U2NhbGUgPSBtYXhTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmnIDlsI/mi6HlpKfnjofjga7oqK3lrppcbiAgICogQHBhcmFtIG1pblNjYWxlIOacgOWwj+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIHNldE1pblNjYWxlKG1pblNjYWxlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9taW5TY2FsZSA9IG1pblNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOWkp+aLoeWkp+eOh+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOacgOWkp+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIGdldE1heFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heFNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOWwj+aLoeWkp+eOh+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOacgOWwj+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIGdldE1pblNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21pblNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOaLoeWkp+eOh+OBjOacgOWkp+OBq+OBquOBo+OBpuOBhOOCi+OBi+OCkueiuuiqjeOBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg5ouh5aSn546H44Gv5pyA5aSnXG4gICAqIEByZXR1cm4gZmFsc2Ug5ouh5aSn546H44Gv5pyA5aSn44Gn44Gv44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNNYXhTY2FsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTY2FsZVgoKSA+PSB0aGlzLl9tYXhTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmi6HlpKfnjofjgYzmnIDlsI/jgavjgarjgaPjgabjgYTjgovjgYvjgpLnorroqo3jgZnjgotcbiAgICpcbiAgICogQHJldHVybiB0cnVlIOaLoeWkp+eOh+OBr+acgOWwj1xuICAgKiBAcmV0dXJuIGZhbHNlIOaLoeWkp+eOh+OBr+acgOWwj+OBp+OBr+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzTWluU2NhbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2NhbGVYKCkgPD0gdGhpcy5fbWluU2NhbGU7XG4gIH1cblxuICAvKipcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5bem6L6644Gu77y46Lu45L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5bem6L6644GuWOi7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIGdldFNjcmVlbkxlZnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuTGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga7vvLjou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga5Y6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NyZWVuUmlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuUmlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5LiL6L6644GuWei7uOS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4i+i+uuOBrlnou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBnZXRTY3JlZW5Cb3R0b20oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuQm90dG9tO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4iui+uuOBrlnou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIrovrrjga5Z6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NyZWVuVG9wKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NjcmVlblRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5bem6L6644GuWOi7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heExlZnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4TGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj7Povrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5Y+z6L6644GuWOi7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heFJpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heFJpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOS4i+i+uuOBrlnou7jkvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHJldHVybiDkuIvovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0TWF4Qm90dG9tKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heEJvdHRvbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5LiK6L6644GuWei7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heFRvcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tYXhUb3A7XG4gIH1cblxuICBwcml2YXRlIF9zY3JlZW5MZWZ0OiBudW1iZXI7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruevhOWbsu+8iOW3pui+uljou7jkvY3nva7vvIlcbiAgcHJpdmF0ZSBfc2NyZWVuUmlnaHQ6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5Y+z6L66WOi7uOS9jee9ru+8iVxuICBwcml2YXRlIF9zY3JlZW5Ub3A6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9zY3JlZW5Cb3R0b206IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiL6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhMZWZ0OiBudW1iZXI7IC8vIOirlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsu+8iOW3pui+uljou7jkvY3nva7vvIlcbiAgcHJpdmF0ZSBfbWF4UmlnaHQ6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5Y+z6L66WOi7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhUb3A6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhCb3R0b206IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5LiL6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhTY2FsZTogbnVtYmVyOyAvLyDmi6HlpKfnjofjga7mnIDlpKflgKRcbiAgcHJpdmF0ZSBfbWluU2NhbGU6IG51bWJlcjsgLy8g5ouh5aSn546H44Gu5pyA5bCP5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXZpZXdtYXRyaXgnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVZpZXdNYXRyaXggPSAkLkN1YmlzbVZpZXdNYXRyaXg7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVZpZXdNYXRyaXggPSAkLkN1YmlzbVZpZXdNYXRyaXg7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuL2N1YmlzbW1vZGVsJztcblxuLyoqXG4gKiBNb2Pjg4fjg7zjgr/jga7nrqHnkIZcbiAqXG4gKiBNb2Pjg4fjg7zjgr/jga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vYyB7XG4gIC8qKlxuICAgKiBNb2Pjg4fjg7zjgr/jga7kvZzmiJBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKG1vY0J5dGVzOiBBcnJheUJ1ZmZlcik6IEN1YmlzbU1vYyB7XG4gICAgbGV0IGN1YmlzbU1vYzogQ3ViaXNtTW9jID0gbnVsbDtcbiAgICBjb25zdCBtb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jID1cbiAgICAgIExpdmUyREN1YmlzbUNvcmUuTW9jLmZyb21BcnJheUJ1ZmZlcihtb2NCeXRlcyk7XG5cbiAgICBpZiAobW9jKSB7XG4gICAgICBjdWJpc21Nb2MgPSBuZXcgQ3ViaXNtTW9jKG1vYyk7XG4gICAgICBjdWJpc21Nb2MuX21vY1ZlcnNpb24gPSBMaXZlMkRDdWJpc21Db3JlLlZlcnNpb24uY3NtR2V0TW9jVmVyc2lvbihcbiAgICAgICAgbW9jLFxuICAgICAgICBtb2NCeXRlc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3ViaXNtTW9jO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpFxuICAgKlxuICAgKiBNb2Pjg4fjg7zjgr/jgpLliYrpmaTjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vYzogQ3ViaXNtTW9jKTogdm9pZCB7XG4gICAgbW9jLl9tb2MuX3JlbGVhc2UoKTtcbiAgICBtb2MuX21vYyA9IG51bGw7XG4gICAgbW9jID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLkvZzmiJDjgZnjgotcbiAgICpcbiAgICogQHJldHVybiBNb2Pjg4fjg7zjgr/jgYvjgonkvZzmiJDjgZXjgozjgZ/jg6Ljg4fjg6tcbiAgICovXG4gIGNyZWF0ZU1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICBsZXQgY3ViaXNtTW9kZWw6IEN1YmlzbU1vZGVsID0gbnVsbDtcblxuICAgIGNvbnN0IG1vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbC5mcm9tTW9jKFxuICAgICAgdGhpcy5fbW9jXG4gICAgKTtcblxuICAgIGlmIChtb2RlbCkge1xuICAgICAgY3ViaXNtTW9kZWwgPSBuZXcgQ3ViaXNtTW9kZWwobW9kZWwpO1xuICAgICAgY3ViaXNtTW9kZWwuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICArK3RoaXMuX21vZGVsQ291bnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1YmlzbU1vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuWJiumZpOOBmeOCi1xuICAgKi9cbiAgZGVsZXRlTW9kZWwobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgaWYgKG1vZGVsICE9IG51bGwpIHtcbiAgICAgIG1vZGVsLnJlbGVhc2UoKTtcbiAgICAgIG1vZGVsID0gbnVsbDtcbiAgICAgIC0tdGhpcy5fbW9kZWxDb3VudDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKG1vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MpIHtcbiAgICB0aGlzLl9tb2MgPSBtb2M7XG4gICAgdGhpcy5fbW9kZWxDb3VudCA9IDA7XG4gICAgdGhpcy5fbW9jVmVyc2lvbiA9IDA7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsQ291bnQgPT0gMCk7XG5cbiAgICB0aGlzLl9tb2MuX3JlbGVhc2UoKTtcbiAgICB0aGlzLl9tb2MgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOaWsOOBri5tb2MzIFZlcnNpb27jgpLlj5blvpdcbiAgICovXG4gIHB1YmxpYyBnZXRMYXRlc3RNb2NWZXJzaW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVmVyc2lvbi5jc21HZXRMYXRlc3RNb2NWZXJzaW9uKCk7XG4gIH1cblxuICAvKipcbiAgICog6Kqt44G/6L6844KT44Gg44Oi44OH44Or44GuLm1vYzMgVmVyc2lvbuOCkuWPluW+l1xuICAgKi9cbiAgcHVibGljIGdldE1vY1ZlcnNpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9jVmVyc2lvbjtcbiAgfVxuXG4gIF9tb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jOyAvLyBNb2Pjg4fjg7zjgr9cbiAgX21vZGVsQ291bnQ6IG51bWJlcjsgLy8gTW9j44OH44O844K/44GL44KJ5L2c44KJ44KM44Gf44Oi44OH44Or44Gu5YCL5pWwXG4gIF9tb2NWZXJzaW9uOiBudW1iZXI7IC8vIOiqreOBv+i+vOOCk+OBoOODouODh+ODq+OBri5tb2MzIFZlcnNpb25cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9jJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2MgPSAkLkN1YmlzbU1vYztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9jID0gJC5DdWJpc21Nb2M7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQge1xuICBDdWJpc21CbGVuZE1vZGUsXG4gIEN1YmlzbVRleHR1cmVDb2xvcixcbn0gZnJvbSAnLi4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyJztcbmltcG9ydCB7IGNzbU1hcCB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IENTTV9BU1NFUlQgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5cbi8qKlxuICogU0RL5YG044GL44KJ5LiO44GI44KJ44KM44GfRHJhd2FibGXjga7kuZfnrpfoibLjg7vjgrnjgq/jg6rjg7zjg7PoibLkuIrmm7jjgY3jg5Xjg6njgrDjgahcbiAqIOOBneOBruiJsuOCkuS/neaMgeOBmeOCi+ani+mAoOS9k1xuICovXG5leHBvcnQgY2xhc3MgRHJhd2FibGVDb2xvckRhdGEge1xuICBpc092ZXJ3cml0dGVuID0gZmFsc2U7XG4gIENvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG59XG5cbi8qKlxuICog44Oi44OH44OrXG4gKlxuICogTW9j44OH44O844K/44GL44KJ55Sf5oiQ44GV44KM44KL44Oi44OH44Or44Gu44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbCB7XG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgLy8gVXBkYXRlIG1vZGVsXG4gICAgdGhpcy5fbW9kZWwudXBkYXRlKCk7XG5cbiAgICB0aGlzLl9tb2RlbC5kcmF3YWJsZXMucmVzZXREeW5hbWljRmxhZ3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgq3jg6Pjg7Pjg5Djgrnjga7luYXjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRDYW52YXNXaWR0aCgpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gMC4wO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLkNhbnZhc1dpZHRoIC8gdGhpcy5fbW9kZWwuY2FudmFzaW5mby5QaXhlbHNQZXJVbml0XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgq3jg6Pjg7Pjg5Djgrnjga7pq5jjgZXjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRDYW52YXNIZWlnaHQoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIDAuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5fbW9kZWwuY2FudmFzaW5mby5DYW52YXNIZWlnaHQgLyB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLlBpeGVsc1BlclVuaXRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OCkuS/neWtmOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNhdmVQYXJhbWV0ZXJzKCk6IHZvaWQge1xuICAgIGNvbnN0IHBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xuICAgIGNvbnN0IHNhdmVkUGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX3NhdmVkUGFyYW1ldGVycy5nZXRTaXplKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgIGlmIChpIDwgc2F2ZWRQYXJhbWV0ZXJDb3VudCkge1xuICAgICAgICB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuc2V0KGksIHRoaXMuX3BhcmFtZXRlclZhbHVlc1tpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zYXZlZFBhcmFtZXRlcnMucHVzaEJhY2sodGhpcy5fcGFyYW1ldGVyVmFsdWVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5LmX566X6Imy44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCBEcmF3YWJsZXPjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybnMg5oyH5a6a44GX44GfZHJhd2FibGXjga7kuZfnrpfoibIoUkdCQSlcbiAgICovXG4gIHB1YmxpYyBnZXRNdWx0aXBseUNvbG9yKGluZGV4OiBudW1iZXIpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgIC8vIERyYXdhYmxl44Go44Oi44OH44Or5YWo5L2T44Gu5LmX566X6Imy5LiK5pu444GN44OV44Op44Kw44GM44Gp44Gh44KJ44KCdHJ1ZeOBquWgtOWQiOOAgeODouODh+ODq+WFqOS9k+OBruS4iuabuOOBjeODleODqeOCsOOBjOWEquWFiOOBleOCjOOCi1xuICAgIGlmIChcbiAgICAgIHRoaXMuZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsTXVsdGlwbHlDb2xvcnMoKSB8fFxuICAgICAgdGhpcy5nZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVNdWx0aXBseUNvbG9ycyhpbmRleClcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMuYXQoaW5kZXgpLkNvbG9yO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9yID0gdGhpcy5nZXREcmF3YWJsZU11bHRpcGx5Q29sb3IoaW5kZXgpO1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjgq/jg6rjg7zjg7PoibLjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IERyYXdhYmxlc+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJucyDmjIflrprjgZfjgZ9kcmF3YWJsZeOBruOCueOCr+ODquODvOODs+iJsihSR0JBKVxuICAgKi9cbiAgcHVibGljIGdldFNjcmVlbkNvbG9yKGluZGV4OiBudW1iZXIpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgIC8vIERyYXdhYmxl44Go44Oi44OH44Or5YWo5L2T44Gu44K544Kv44Oq44O844Oz6Imy5LiK5pu444GN44OV44Op44Kw44GM44Gp44Gh44KJ44KCdHJ1ZeOBquWgtOWQiOOAgeODouODh+ODq+WFqOS9k+OBruS4iuabuOOBjeODleODqeOCsOOBjOWEquWFiOOBleOCjOOCi1xuICAgIGlmIChcbiAgICAgIHRoaXMuZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsU2NyZWVuQ29sb3JzKCkgfHxcbiAgICAgIHRoaXMuZ2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlU2NyZWVuQ29sb3JzKGluZGV4KVxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMuYXQoaW5kZXgpLkNvbG9yO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9yID0gdGhpcy5nZXREcmF3YWJsZVNjcmVlbkNvbG9yKGluZGV4KTtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICAvKipcbiAgICog5LmX566X6Imy44KS44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCBEcmF3YWJsZXPjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGNvbG9yIOioreWumuOBmeOCi+S5l+eul+iJsihDdWJpc21UZXh0dXJlQ29sb3IpXG4gICAqL1xuICBwdWJsaWMgc2V0TXVsdGlwbHlDb2xvckJ5VGV4dHVyZUNvbG9yKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgY29sb3I6IEN1YmlzbVRleHR1cmVDb2xvclxuICApIHtcbiAgICB0aGlzLnNldE11bHRpcGx5Q29sb3JCeVJHQkEoaW5kZXgsIGNvbG9yLlIsIGNvbG9yLkcsIGNvbG9yLkIsIGNvbG9yLkEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+iJsuOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXggRHJhd2FibGVz44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSByIOioreWumuOBmeOCi+S5l+eul+iJsuOBrlLlgKRcbiAgICogQHBhcmFtIGcg6Kit5a6a44GZ44KL5LmX566X6Imy44GuR+WApFxuICAgKiBAcGFyYW0gYiDoqK3lrprjgZnjgovkuZfnrpfoibLjga5C5YCkXG4gICAqIEBwYXJhbSBhIOioreWumuOBmeOCi+S5l+eul+iJsuOBrkHlgKRcbiAgICovXG4gIHB1YmxpYyBzZXRNdWx0aXBseUNvbG9yQnlSR0JBKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgcjogbnVtYmVyLFxuICAgIGc6IG51bWJlcixcbiAgICBiOiBudW1iZXIsXG4gICAgYSA9IDEuMFxuICApIHtcbiAgICB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMuYXQoaW5kZXgpLkNvbG9yLlIgPSByO1xuICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5hdChpbmRleCkuQ29sb3IuRyA9IGc7XG4gICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLmF0KGluZGV4KS5Db2xvci5CID0gYjtcbiAgICB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMuYXQoaW5kZXgpLkNvbG9yLkEgPSBhO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCueOCr+ODquODvOODs+iJsuOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXggRHJhd2FibGVz44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBjb2xvciDoqK3lrprjgZnjgovjgrnjgq/jg6rjg7zjg7PoibIoQ3ViaXNtVGV4dHVyZUNvbG9yKVxuICAgKi9cbiAgcHVibGljIHNldFNjcmVlbkNvbG9yQnlUZXh0dXJlQ29sb3IoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBjb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yXG4gICkge1xuICAgIHRoaXMuc2V0U2NyZWVuQ29sb3JCeVJHQkEoaW5kZXgsIGNvbG9yLlIsIGNvbG9yLkcsIGNvbG9yLkIsIGNvbG9yLkEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCueOCr+ODquODvOODs+iJsuOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXggRHJhd2FibGVz44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSByIOioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsuOBrlLlgKRcbiAgICogQHBhcmFtIGcg6Kit5a6a44GZ44KL44K544Kv44Oq44O844Oz6Imy44GuR+WApFxuICAgKiBAcGFyYW0gYiDoqK3lrprjgZnjgovjgrnjgq/jg6rjg7zjg7PoibLjga5C5YCkXG4gICAqIEBwYXJhbSBhIOioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsuOBrkHlgKRcbiAgICovXG4gIHB1YmxpYyBzZXRTY3JlZW5Db2xvckJ5UkdCQShcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHI6IG51bWJlcixcbiAgICBnOiBudW1iZXIsXG4gICAgYjogbnVtYmVyLFxuICAgIGEgPSAxLjBcbiAgKSB7XG4gICAgdGhpcy5fdXNlclNjcmVlbkNvbG9ycy5hdChpbmRleCkuQ29sb3IuUiA9IHI7XG4gICAgdGhpcy5fdXNlclNjcmVlbkNvbG9ycy5hdChpbmRleCkuQ29sb3IuRyA9IGc7XG4gICAgdGhpcy5fdXNlclNjcmVlbkNvbG9ycy5hdChpbmRleCkuQ29sb3IuQiA9IGI7XG4gICAgdGhpcy5fdXNlclNjcmVlbkNvbG9ycy5hdChpbmRleCkuQ29sb3IuQSA9IGE7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJ5oyH5a6a44GX44Gf44Oi44OH44Or44Gu5LmX566X6Imy44KS5LiK5pu444GN44GZ44KL44GLXG4gICAqIEByZXR1cm5zIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgIGZhbHNlIC0+IOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIGdldE92ZXJ3cml0ZUZsYWdGb3JNb2RlbE11bHRpcGx5Q29sb3JzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc092ZXJ3cml0dGVuTW9kZWxNdWx0aXBseUNvbG9ycztcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonmjIflrprjgZfjgZ/jg6Ljg4fjg6vjga7jgrnjgq/jg6rjg7zjg7PoibLjgpLkuIrmm7jjgY3jgZnjgovjgYtcbiAgICogQHJldHVybnMgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsU2NyZWVuQ29sb3JzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc092ZXJ3cml0dGVuTW9kZWxTY3JlZW5Db2xvcnM7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJ5oyH5a6a44GX44Gf44Oi44OH44Or44Gu5LmX566X6Imy44KS5LiK5pu444GN44GZ44KL44GL44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSB2YWx1ZSB0cnVlIC0+IFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsTXVsdGlwbHlDb2xvcnModmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc092ZXJ3cml0dGVuTW9kZWxNdWx0aXBseUNvbG9ycyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieaMh+WumuOBl+OBn+ODouODh+ODq+OBruOCueOCr+ODquODvOODs+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi+OCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gdmFsdWUgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgICAgIGZhbHNlIC0+IOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIHNldE92ZXJ3cml0ZUZsYWdGb3JNb2RlbFNjcmVlbkNvbG9ycyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2lzT3ZlcndyaXR0ZW5Nb2RlbFNjcmVlbkNvbG9ycyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieaMh+WumuOBl+OBn0RyYXdhYmxlSW5kZXjjga7kuZfnrpfoibLjgpLkuIrmm7jjgY3jgZnjgovjgYtcbiAgICogQHJldHVybnMgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgZ2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlTXVsdGlwbHlDb2xvcnMoXG4gICAgZHJhd2FibGVpbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMuYXQoZHJhd2FibGVpbmRleCkuaXNPdmVyd3JpdHRlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonmjIflrprjgZfjgZ9EcmF3YWJsZUluZGV444Gu44K544Kv44Oq44O844Oz6Imy44KS5LiK5pu444GN44GZ44KL44GLXG4gICAqIEByZXR1cm5zIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgIGZhbHNlIC0+IOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIGdldE92ZXJ3cml0ZUZsYWdGb3JEcmF3YWJsZVNjcmVlbkNvbG9ycyhcbiAgICBkcmF3YWJsZWluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5hdChkcmF3YWJsZWluZGV4KS5pc092ZXJ3cml0dGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieaMh+WumuOBl+OBn0RyYXdhYmxlSW5kZXjjga7kuZfnrpfoibLjgpLkuIrmm7jjgY3jgZnjgovjgYvjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIHZhbHVlIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgICAgICBmYWxzZSAtPiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgabjgYTjgovoibLmg4XloLHjgpLkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBzZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVNdWx0aXBseUNvbG9ycyhcbiAgICBkcmF3YWJsZWluZGV4OiBudW1iZXIsXG4gICAgdmFsdWU6IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLmF0KGRyYXdhYmxlaW5kZXgpLmlzT3ZlcndyaXR0ZW4gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonmjIflrprjgZfjgZ9EcmF3YWJsZUluZGV444Gu44K544Kv44Oq44O844Oz6Imy44KS5LiK5pu444GN44GZ44KL44GL44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSB2YWx1ZSB0cnVlIC0+IFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlU2NyZWVuQ29sb3JzKFxuICAgIGRyYXdhYmxlaW5kZXg6IG51bWJlcixcbiAgICB2YWx1ZTogYm9vbGVhblxuICApIHtcbiAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLmF0KGRyYXdhYmxlaW5kZXgpLmlzT3ZlcndyaXR0ZW4gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLlj5blvpdcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbCgpOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K544KS5Y+W5b6XXG4gICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44GuSURcbiAgICogQHJldHVybiDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJ0SW5kZXgocGFydElkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgbGV0IHBhcnRJbmRleDogbnVtYmVyO1xuICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XG5cbiAgICBmb3IgKHBhcnRJbmRleCA9IDA7IHBhcnRJbmRleCA8IHBhcnRDb3VudDsgKytwYXJ0SW5kZXgpIHtcbiAgICAgIGlmIChwYXJ0SWQgPT0gdGhpcy5fcGFydElkcy5hdChwYXJ0SW5kZXgpKSB7XG4gICAgICAgIHJldHVybiBwYXJ0SW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g44Oi44OH44Or44Gr5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44O844OESUTjg6rjgrnjg4jlhoXjgavjgYLjgovjgYvjgpLmpJzntKLjgZfjgIHjgZ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLov5TjgZlcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJ0SWQuaXNFeGlzdChwYXJ0SWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJ0SWQuZ2V0VmFsdWUocGFydElkKTtcbiAgICB9XG5cbiAgICAvLyDpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOOBq+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgIHBhcnRJbmRleCA9IHBhcnRDb3VudCArIHRoaXMuX25vdEV4aXN0UGFydElkLmdldFNpemUoKTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcnRJZC5zZXRWYWx1ZShwYXJ0SWQsIHBhcnRJbmRleCk7XG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmFwcGVuZEtleShwYXJ0SW5kZXgpO1xuXG4gICAgcmV0dXJuIHBhcnRJbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Hjg7zjg4Tjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJ0Q291bnQoKTogbnVtYmVyIHtcbiAgICBjb25zdCBwYXJ0Q291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcnRzLmNvdW50O1xuICAgIHJldHVybiBwYXJ0Q291bnQ7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu6Kit5a6aKEluZGV4KVxuICAgKiBAcGFyYW0gcGFydEluZGV4IOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4OiBudW1iZXIsIG9wYWNpdHk6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuaXNFeGlzdChwYXJ0SW5kZXgpKSB7XG4gICAgICB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuc2V0VmFsdWUocGFydEluZGV4LCBvcGFjaXR5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcbiAgICBDU01fQVNTRVJUKDAgPD0gcGFydEluZGV4ICYmIHBhcnRJbmRleCA8IHRoaXMuZ2V0UGFydENvdW50KCkpO1xuXG4gICAgdGhpcy5fcGFydE9wYWNpdGllc1twYXJ0SW5kZXhdID0gb3BhY2l0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrpooSWQpXG4gICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44GuSURcbiAgICogQHBhcmFtIG9wYWNpdHkg44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgc2V0UGFydE9wYWNpdHlCeUlkKHBhcnRJZDogQ3ViaXNtSWRIYW5kbGUsIG9wYWNpdHk6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq1BhcnRJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcnRJbmRleChwYXJ0SWQpO1xuXG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuOyAvLyDjg5Hjg7zjg4TjgYzjgarjgYTjga7jgafjgrnjgq3jg4Pjg5dcbiAgICB9XG5cbiAgICB0aGlzLnNldFBhcnRPcGFjaXR5QnlJbmRleChpbmRleCwgb3BhY2l0eSk7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XKGluZGV4KVxuICAgKiBAcGFyYW0gcGFydEluZGV4IOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIGdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5pc0V4aXN0KHBhcnRJbmRleCkpIHtcbiAgICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBquOBhOODkeODvOODhElE44Gu5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44O844OE44Oq44K544OI44GL44KJ5LiN6YCP5piO5bqm44KS6L+U44GZ44CCXG4gICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmdldFZhbHVlKHBhcnRJbmRleCk7XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgQ1NNX0FTU0VSVCgwIDw9IHBhcnRJbmRleCAmJiBwYXJ0SW5kZXggPCB0aGlzLmdldFBhcnRDb3VudCgpKTtcblxuICAgIHJldHVybiB0aGlzLl9wYXJ0T3BhY2l0aWVzW3BhcnRJbmRleF07XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XKGlkKVxuICAgKiBAcGFyYW0gcGFydElkIOODkeODvOODhOOBru+8qe+9hFxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIGdldFBhcnRPcGFjaXR5QnlJZChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICAvLyDpq5jpgJ/ljJbjga7jgZ/jgoHjgatQYXJ0SW5kZXjjgpLlj5blvpfjgafjgY3jgovmqZ/mp4vjgavjgarjgaPjgabjgYTjgovjgYzjgIHlpJbpg6jjgYvjgonjga7oqK3lrprjga7mmYLjga/lkbzjgbPlh7rjgZfpoLvluqbjgYzkvY7jgYTjgZ/jgoHkuI3opoFcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJ0SW5kZXgocGFydElkKTtcblxuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiAwOyAvLyDjg5Hjg7zjg4TjgYznhKHjgYTjga7jgafjgrnjgq3jg4Pjg5dcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgoaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0g44OR44Op44Oh44O844K/SURcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIGxldCBwYXJhbWV0ZXJJbmRleDogbnVtYmVyO1xuICAgIGNvbnN0IGlkQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG5cbiAgICBmb3IgKHBhcmFtZXRlckluZGV4ID0gMDsgcGFyYW1ldGVySW5kZXggPCBpZENvdW50OyArK3BhcmFtZXRlckluZGV4KSB7XG4gICAgICBpZiAocGFyYW1ldGVySWQgIT0gdGhpcy5fcGFyYW1ldGVySWRzLmF0KHBhcmFtZXRlckluZGV4KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmFtZXRlckluZGV4O1xuICAgIH1cblxuICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBpuOBhOOBquOBhOWgtOWQiOOAgemdnuWtmOWcqOODkeODqeODoeODvOOCv0lE44Oq44K544OI5YaF44KS5qSc57Si44GX44CB44Gd44Gu44Kk44Oz44OH44OD44Kv44K544KS6L+U44GZXG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuaXNFeGlzdChwYXJhbWV0ZXJJZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmdldFZhbHVlKHBhcmFtZXRlcklkKTtcbiAgICB9XG5cbiAgICAvLyDpnZ7lrZjlnKjjg5Hjg6njg6Hjg7zjgr9JROODquOCueODiOOBq+OBquOBhOWgtOWQiOaWsOOBl+OBj+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgIHBhcmFtZXRlckluZGV4ID1cbiAgICAgIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQgKyB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmdldFNpemUoKTtcblxuICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuc2V0VmFsdWUocGFyYW1ldGVySWQsIHBhcmFtZXRlckluZGV4KTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5hcHBlbmRLZXkocGFyYW1ldGVySW5kZXgpO1xuXG4gICAgcmV0dXJuIHBhcmFtZXRlckluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu56iu6aGe44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBjc21QYXJhbWV0ZXJUeXBlX05vcm1hbCAtPiDpgJrluLjjga7jg5Hjg6njg6Hjg7zjgr9cbiAgICogICAgICAgICAgY3NtUGFyYW1ldGVyVHlwZV9CbGVuZFNoYXBlIC0+IOODluODrOODs+ODieOCt+OCp+OCpOODl+ODkeODqeODoeODvOOCv1xuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlclR5cGUoXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlclxuICApOiBMaXZlMkRDdWJpc21Db3JlLmNzbVBhcmFtZXRlclR5cGUge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLnR5cGVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlck1heGltdW1WYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlck1pbmltdW1WYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckRlZmF1bHRWYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5kZWZhdWx0VmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4ICAgIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuaXNFeGlzdChwYXJhbWV0ZXJJbmRleCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5nZXRWYWx1ZShwYXJhbWV0ZXJJbmRleCk7XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgQ1NNX0FTU0VSVChcbiAgICAgIDAgPD0gcGFyYW1ldGVySW5kZXggJiYgcGFyYW1ldGVySW5kZXggPCB0aGlzLmdldFBhcmFtZXRlckNvdW50KClcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgICDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlclZhbHVlQnlJZChwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq3BhcmFtZXRlckluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXG4gICAgY29uc3QgcGFyYW1ldGVySW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xuICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZhbHVlIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyLFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5pc0V4aXN0KHBhcmFtZXRlckluZGV4KSkge1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuc2V0VmFsdWUoXG4gICAgICAgIHBhcmFtZXRlckluZGV4LFxuICAgICAgICB3ZWlnaHQgPT0gMVxuICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICA6IHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmdldFZhbHVlKHBhcmFtZXRlckluZGV4KSAqXG4gICAgICAgICAgICAgICgxIC0gd2VpZ2h0KSArXG4gICAgICAgICAgICAgIHZhbHVlICogd2VpZ2h0XG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgQ1NNX0FTU0VSVChcbiAgICAgIDAgPD0gcGFyYW1ldGVySW5kZXggJiYgcGFyYW1ldGVySW5kZXggPCB0aGlzLmdldFBhcmFtZXRlckNvdW50KClcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPCB2YWx1ZSkge1xuICAgICAgdmFsdWUgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XSA+IHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgfVxuXG4gICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSA9XG4gICAgICB3ZWlnaHQgPT0gMVxuICAgICAgICA/IHZhbHVlXG4gICAgICAgIDogKHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPVxuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSAqICgxIC0gd2VpZ2h0KSArXG4gICAgICAgICAgICB2YWx1ZSAqIHdlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcGFyYW0gdmFsdWUg44OR44Op44Oh44O844K/44Gu5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHdlaWdodCA9IDEuMFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoaW5kZXgsIHZhbHVlLCB3ZWlnaHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruWKoOeulyhpbmRleClcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg5Yqg566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgIHBhcmFtZXRlckluZGV4OiBudW1iZXIsXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICB3ZWlnaHQgPSAxLjBcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgICBwYXJhbWV0ZXJJbmRleCxcbiAgICAgIHRoaXMuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KSArIHZhbHVlICogd2VpZ2h0XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7liqDnrpcoaWQpXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/vvKnvvKRcbiAgICogQHBhcmFtIHZhbHVlIOWKoOeul+OBmeOCi+WApFxuICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xuICAgKi9cbiAgcHVibGljIGFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICBwYXJhbWV0ZXJJZDogYW55LFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcbiAgICB0aGlzLmFkZFBhcmFtZXRlclZhbHVlQnlJbmRleChpbmRleCwgdmFsdWUsIHdlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5LmX566XXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcGFyYW0gdmFsdWUg5LmX566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcbiAgICB0aGlzLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUluZGV4KGluZGV4LCB2YWx1ZSwgd2VpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7kuZfnrpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg5LmX566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHdlaWdodCA9IDEuMFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgIHBhcmFtZXRlckluZGV4LFxuICAgICAgdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICpcbiAgICAgICAgKDEuMCArICh2YWx1ZSAtIDEuMCkgKiB3ZWlnaHQpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJZCBEcmF3YWJsZeOBrklEXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUluZGV4KGRyYXdhYmxlSWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBkcmF3YWJsZUluZGV4ID0gMDtcbiAgICAgIGRyYXdhYmxlSW5kZXggPCBkcmF3YWJsZUNvdW50O1xuICAgICAgKytkcmF3YWJsZUluZGV4XG4gICAgKSB7XG4gICAgICBpZiAodGhpcy5fZHJhd2FibGVJZHMuYXQoZHJhd2FibGVJbmRleCkgPT0gZHJhd2FibGVJZCkge1xuICAgICAgICByZXR1cm4gZHJhd2FibGVJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlQ291bnQoKTogbnVtYmVyIHtcbiAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuICAgIHJldHVybiBkcmF3YWJsZUNvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44GuSUTjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrklEXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVJZChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgY29uc3QgcGFyYW1ldGVySWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pZHM7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJhbWV0ZXJJZHNbZHJhd2FibGVJbmRleF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5o+P55S76aCG44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7mj4/nlLvpoIbjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVJlbmRlck9yZGVycygpOiBJbnQzMkFycmF5IHtcbiAgICBjb25zdCByZW5kZXJPcmRlcnM6IEludDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMucmVuZGVyT3JkZXJzO1xuICAgIHJldHVybiByZW5kZXJPcmRlcnM7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICog6Zai5pWw5ZCN44GM6Kqk44Gj44Gm44GE44Gf44Gf44KB44CB5Luj5pu/44Go44Gq44KLIGdldERyYXdhYmxlVGV4dHVyZUluZGV4IOOCkui/veWKoOOBl+OAgeOBk+OBrumWouaVsOOBr+mdnuaOqOWlqOOBqOOBquOCiuOBvuOBl+OBn+OAglxuICAgKlxuICAgKiBEcmF3YWJsZeOBruODhuOCr+OCueODgeODo+OCpOODs+ODh+ODg+OCr+OCueODquOCueODiOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdldERyYXdhYmxlVGV4dHVyZUluZGV4KGRyYXdhYmxlSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7jg4bjgq/jgrnjg4Hjg6PjgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVRleHR1cmVJbmRleChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHRleHR1cmVJbmRpY2VzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnRleHR1cmVJbmRpY2VzO1xuICAgIHJldHVybiB0ZXh0dXJlSW5kaWNlc1tkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrlZlcnRleFBvc2l0aW9uc+OBruWkieWMluaDheWgseOBruWPluW+l1xuICAgKlxuICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadEcmF3YWJsZeOBrumggueCueaDheWgseOBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gICBkcmF3YWJsZUluZGV4ICAgRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHZhbCAgdHJ1ZSAgICBEcmF3YWJsZeOBrumggueCueaDheWgseOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xuICAgKiBAcmV0dmFsICBmYWxzZSAgIERyYXdhYmxl44Gu6aCC54K55oOF5aCx44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZShcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2VCaXQoXG4gICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6aCC54K544Kk44Oz44OH44OD44Kv44K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBpbmRleENvdW50czogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pbmRleENvdW50cztcbiAgICByZXR1cm4gaW5kZXhDb3VudHNbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7poILngrnjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCB2ZXJ0ZXhDb3VudHMgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4Q291bnRzO1xuICAgIHJldHVybiB2ZXJ0ZXhDb3VudHNbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7poILngrnjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggZHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGljZXMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5nZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyhkcmF3YWJsZUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueODquOCueODiOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhcmFibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Kk44Oz44OH44OD44Kv44K544Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IFVpbnQxNkFycmF5IHtcbiAgICBjb25zdCBpbmRpY2VzQXJyYXk6IFVpbnQxNkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaW5kaWNlcztcbiAgICByZXR1cm4gaW5kaWNlc0FycmF5W2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6aCC54K544Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICAgIGNvbnN0IHZlcnRpY2VzQXJyYXk6IEZsb2F0MzJBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnZlcnRleFBvc2l0aW9ucztcbiAgICByZXR1cm4gdmVydGljZXNBcnJheVtkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrumggueCueOBrlVW44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrlVVuODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4VXZzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgY29uc3QgdXZzQXJyYXk6IEZsb2F0MzJBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnZlcnRleFV2cztcbiAgICByZXR1cm4gdXZzQXJyYXlbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7kuI3pgI/mmI7luqbjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlT3BhY2l0eShkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IG9wYWNpdGllczogRmxvYXQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm9wYWNpdGllcztcbiAgICByZXR1cm4gb3BhY2l0aWVzW2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5LmX566X6Imy44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7kuZfnrpfoibIoUkdCQSlcbiAgICog44K544Kv44Oq44O844Oz6Imy44GvUkdCQeOBp+WPluW+l+OBleOCjOOCi+OBjOOAgUHjga/lv4XjgZowXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVNdWx0aXBseUNvbG9yKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgY29uc3QgbXVsdGlwbHlDb2xvcnM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tdWx0aXBseUNvbG9ycztcbiAgICBjb25zdCBpbmRleCA9IGRyYXdhYmxlSW5kZXggKiA0O1xuICAgIGNvbnN0IG11bHRpcGx5Q29sb3I6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICBtdWx0aXBseUNvbG9yLlIgPSBtdWx0aXBseUNvbG9yc1tpbmRleF07XG4gICAgbXVsdGlwbHlDb2xvci5HID0gbXVsdGlwbHlDb2xvcnNbaW5kZXggKyAxXTtcbiAgICBtdWx0aXBseUNvbG9yLkIgPSBtdWx0aXBseUNvbG9yc1tpbmRleCArIDJdO1xuICAgIG11bHRpcGx5Q29sb3IuQSA9IG11bHRpcGx5Q29sb3JzW2luZGV4ICsgM107XG4gICAgcmV0dXJuIG11bHRpcGx5Q29sb3I7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jgrnjgq/jg6rjg7zjg7PoibLjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruOCueOCr+ODquODvOODs+iJsihSR0JBKVxuICAgKiDjgrnjgq/jg6rjg7zjg7PoibLjga9SR0JB44Gn5Y+W5b6X44GV44KM44KL44GM44CBQeOBr+W/heOBmjBcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVNjcmVlbkNvbG9yKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgY29uc3Qgc2NyZWVuQ29sb3JzOiBGbG9hdDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuc2NyZWVuQ29sb3JzO1xuICAgIGNvbnN0IGluZGV4ID0gZHJhd2FibGVJbmRleCAqIDQ7XG4gICAgY29uc3Qgc2NyZWVuQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICBzY3JlZW5Db2xvci5SID0gc2NyZWVuQ29sb3JzW2luZGV4XTtcbiAgICBzY3JlZW5Db2xvci5HID0gc2NyZWVuQ29sb3JzW2luZGV4ICsgMV07XG4gICAgc2NyZWVuQ29sb3IuQiA9IHNjcmVlbkNvbG9yc1tpbmRleCArIDJdO1xuICAgIHNjcmVlbkNvbG9yLkEgPSBzY3JlZW5Db2xvcnNbaW5kZXggKyAzXTtcbiAgICByZXR1cm4gc2NyZWVuQ29sb3I7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7opqrjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruimquODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlUGFyZW50UGFydEluZGV4KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLmRyYXdhYmxlcy5wYXJlbnRQYXJ0SW5kaWNlc1tkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruOCq+ODquODs+OCsOaDheWgseOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44Kr44Oq44Oz44Kw5oOF5aCxXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVDdWxsaW5nKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbnN0YW50RmxhZ3MgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY29uc3RhbnRGbGFncztcblxuICAgIHJldHVybiAhTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNJc0RvdWJsZVNpZGVkQml0KFxuICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jg5bjg6zjg7Pjg4njg6Ljg7zjg4njgpLlj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruODluODrOODs+ODieODouODvOODiVxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlQmxlbmRNb2RlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbUJsZW5kTW9kZSB7XG4gICAgY29uc3QgY29uc3RhbnRGbGFncyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuXG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzQmxlbmRBZGRpdGl2ZUJpdChcbiAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApXG4gICAgICA/IEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfQWRkaXRpdmVcbiAgICAgIDogTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZE11bHRpcGxpY2F0aXZlQml0KFxuICAgICAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICAgICAgKVxuICAgICAgPyBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlXG4gICAgICA6IEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44Oe44K544Kv44Gu5Y+N6Lui5L2/55So44Gu5Y+W5b6XXG4gICAqXG4gICAqIERyYXdhYmxl44Gu44Oe44K544Kv5L2/55So5pmC44Gu5Y+N6Lui6Kit5a6a44KS5Y+W5b6X44GZ44KL44CCXG4gICAqIOODnuOCueOCr+OCkuS9v+eUqOOBl+OBquOBhOWgtOWQiOOBr+eEoeimluOBleOCjOOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIERyYXdhYmxl44Gu5Y+N6Lui6Kit5a6aXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVJbnZlcnRlZE1hc2tCaXQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29uc3RhbnRGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuXG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNJbnZlcnRlZE1hc2tCaXQoXG4gICAgICBjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODquOCueODiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVNYXNrcygpOiBJbnQzMkFycmF5W10ge1xuICAgIGNvbnN0IG1hc2tzOiBJbnQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMubWFza3M7XG4gICAgcmV0dXJuIG1hc2tzO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5YCL5pWw44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7lgIvmlbDjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZU1hc2tDb3VudHMoKTogSW50MzJBcnJheSB7XG4gICAgY29uc3QgbWFza0NvdW50czogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrQ291bnRzO1xuICAgIHJldHVybiBtYXNrQ291bnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruS9v+eUqOeKtuaFi1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5L2/55So44GX44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5L2/55So44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNVc2luZ01hc2tpbmcoKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgZCA9IDA7IGQgPCB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7ICsrZCkge1xuICAgICAgaWYgKHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrQ291bnRzW2RdIDw9IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6KGo56S65oOF5aCx44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSBEcmF3YWJsZeOBjOihqOekulxuICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44GM6Z2e6KGo56S6XG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZShkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0lzVmlzaWJsZUJpdChkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44GuRHJhd09yZGVy44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAqXG4gICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp2RyYXdhYmxl44GuZHJhd09yZGVy44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXG4gICAqIGRyYXdPcmRlcuOBr2FydE1lc2jkuIrjgafmjIflrprjgZnjgosw44GL44KJMTAwMOOBruaDheWgsVxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBkcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIHRydWUgZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cbiAgICogQHJldHVybiBmYWxzZSBkcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBhOOCi1xuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdWaXNpYmlsaXR5RGlkQ2hhbmdlKFxuICAgIGRyYXdhYmxlSW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1Zpc2liaWxpdHlEaWRDaGFuZ2VCaXQoXG4gICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAqXG4gICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp2RyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IGRyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSBEcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xuICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44Gq44GEXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ09wYWNpdHlEaWRDaGFuZ2UoXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzT3BhY2l0eURpZENoYW5nZUJpdChcbiAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7mj4/nlLvpoIbluo/jga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5o+P55S744Gu6aCG5bqP44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnUmVuZGVyT3JkZXJEaWRDaGFuZ2UoXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzUmVuZGVyT3JkZXJEaWRDaGFuZ2VCaXQoXG4gICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5LmX566X6Imy44O744K544Kv44Oq44O844Oz6Imy44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAqXG4gICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp0RyYXdhYmxl44Gu5LmX566X6Imy44O744K544Kv44Oq44O844Oz6Imy44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSBEcmF3YWJsZeOBruS5l+eul+iJsuODu+OCueOCr+ODquODvOODs+iJsuOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xuICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44Gu5LmX566X6Imy44O744K544Kv44Oq44O844Oz6Imy44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44Gq44GEXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0JsZW5kQ29sb3JEaWRDaGFuZ2UoXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzQmxlbmRDb2xvckRpZENoYW5nZUJpdChcbiAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5L+d5a2Y44GV44KM44Gf44OR44Op44Oh44O844K/44Gu6Kqt44G/6L6844G/XG4gICAqL1xuICBwdWJsaWMgbG9hZFBhcmFtZXRlcnMoKTogdm9pZCB7XG4gICAgbGV0IHBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xuICAgIGNvbnN0IHNhdmVkUGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX3NhdmVkUGFyYW1ldGVycy5nZXRTaXplKCk7XG5cbiAgICBpZiAocGFyYW1ldGVyQ291bnQgPiBzYXZlZFBhcmFtZXRlckNvdW50KSB7XG4gICAgICBwYXJhbWV0ZXJDb3VudCA9IHNhdmVkUGFyYW1ldGVyQ291bnQ7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0gPSB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuYXQoaSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMluOBmeOCi1xuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgQ1NNX0FTU0VSVCh0aGlzLl9tb2RlbCk7XG5cbiAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXMgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLnZhbHVlcztcbiAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzID0gdGhpcy5fbW9kZWwucGFydHMub3BhY2l0aWVzO1xuICAgIHRoaXMuX3BhcmFtZXRlck1heGltdW1WYWx1ZXMgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXM7XG4gICAgdGhpcy5fcGFyYW1ldGVyTWluaW11bVZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlcztcblxuICAgIHtcbiAgICAgIGNvbnN0IHBhcmFtZXRlcklkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmlkcztcbiAgICAgIGNvbnN0IHBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xuXG4gICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMucHJlcGFyZUNhcGFjaXR5KHBhcmFtZXRlckNvdW50KTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSkge1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMucHVzaEJhY2soXG4gICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcmFtZXRlcklkc1tpXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB7XG4gICAgICBjb25zdCBwYXJ0SWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLnBhcnRzLmlkcztcbiAgICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XG5cbiAgICAgIHRoaXMuX3BhcnRJZHMucHJlcGFyZUNhcGFjaXR5KHBhcnRDb3VudCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX3BhcnRJZHMucHVzaEJhY2soXG4gICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcnRJZHNbaV0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAge1xuICAgICAgY29uc3QgZHJhd2FibGVJZHM6IHN0cmluZ1tdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmlkcztcbiAgICAgIGNvbnN0IGRyYXdhYmxlQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb3VudDtcblxuICAgICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzID0gbmV3IGNzbVZlY3RvcjxEcmF3YWJsZUNvbG9yRGF0YT4oKTtcbiAgICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy51cGRhdGVTaXplKFxuICAgICAgICBkcmF3YWJsZUNvdW50LFxuICAgICAgICBEcmF3YWJsZUNvbG9yRGF0YSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcblxuICAgICAgdGhpcy5fdXNlclNjcmVlbkNvbG9ycyA9IG5ldyBjc21WZWN0b3I8RHJhd2FibGVDb2xvckRhdGE+KCk7XG4gICAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLnVwZGF0ZVNpemUoZHJhd2FibGVDb3VudCwgRHJhd2FibGVDb2xvckRhdGEsIHRydWUpO1xuXG4gICAgICB0aGlzLl9kcmF3YWJsZUlkcy5wcmVwYXJlQ2FwYWNpdHkoZHJhd2FibGVDb3VudCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSkge1xuICAgICAgICB0aGlzLl9kcmF3YWJsZUlkcy5wdXNoQmFjayhcbiAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoZHJhd2FibGVJZHNbaV0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gc2hhZGVy44Gr5b2x6Z+/44GX44Gq44GE6Imy44Gn5Yid5pyf5YyWXG4gICAgICAgIHRoaXMuc2V0TXVsdGlwbHlDb2xvckJ5UkdCQShpLCAxLjAsIDEuMCwgMS4wLCAxLjApO1xuICAgICAgICB0aGlzLnNldFNjcmVlbkNvbG9yQnlSR0JBKGksIDAuMCwgMC4wLCAwLjAsIDEuMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44OrXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IobW9kZWw6IExpdmUyREN1YmlzbUNvcmUuTW9kZWwpIHtcbiAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlcyA9IG51bGw7XG4gICAgdGhpcy5fcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IG51bGw7XG4gICAgdGhpcy5fcGFyYW1ldGVyTWluaW11bVZhbHVlcyA9IG51bGw7XG4gICAgdGhpcy5fcGFydE9wYWNpdGllcyA9IG51bGw7XG4gICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XG4gICAgdGhpcy5fcGFyYW1ldGVySWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcbiAgICB0aGlzLl9kcmF3YWJsZUlkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG4gICAgdGhpcy5fcGFydElkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG4gICAgdGhpcy5faXNPdmVyd3JpdHRlbk1vZGVsTXVsdGlwbHlDb2xvcnMgPSBmYWxzZTtcbiAgICB0aGlzLl9pc092ZXJ3cml0dGVuTW9kZWxTY3JlZW5Db2xvcnMgPSBmYWxzZTtcbiAgICB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMgPSBudWxsO1xuICAgIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMgPSBudWxsO1xuXG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0SWQgPSBuZXcgY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+KCk7XG4gICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZCA9IG5ldyBjc21NYXA8Q3ViaXNtSWRIYW5kbGUsIG51bWJlcj4oKTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcyA9IG5ldyBjc21NYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzID0gbmV3IGNzbU1hcDxudW1iZXIsIG51bWJlcj4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX21vZGVsLnJlbGVhc2UoKTtcbiAgICB0aGlzLl9tb2RlbCA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIF9ub3RFeGlzdFBhcnRPcGFjaXRpZXM6IGNzbU1hcDxudW1iZXIsIG51bWJlcj47IC8vIOWtmOWcqOOBl+OBpuOBhOOBquOBhOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruODquOCueODiFxuICBwcml2YXRlIF9ub3RFeGlzdFBhcnRJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg7zjg4RJROOBruODquOCueODiFxuXG4gIHByaXZhdGUgX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzOiBjc21NYXA8bnVtYmVyLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7jg6rjgrnjg4hcbiAgcHJpdmF0ZSBfbm90RXhpc3RQYXJhbWV0ZXJJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxuXG4gIHByaXZhdGUgX3NhdmVkUGFyYW1ldGVyczogY3NtVmVjdG9yPG51bWJlcj47IC8vIOS/neWtmOOBleOCjOOBn+ODkeODqeODoeODvOOCv1xuXG4gIHByaXZhdGUgX2lzT3ZlcndyaXR0ZW5Nb2RlbE11bHRpcGx5Q29sb3JzOiBib29sZWFuOyAvLyBTREvkuIrjgafjg6Ljg4fjg6vlhajkvZPjga7kuZfnrpfoibLjgpLkuIrmm7jjgY3jgZnjgovjgYvliKTlrprjgZnjgovjg5Xjg6njgrBcbiAgcHJpdmF0ZSBfaXNPdmVyd3JpdHRlbk1vZGVsU2NyZWVuQ29sb3JzOiBib29sZWFuOyAvLyBTREvkuIrjgafjg6Ljg4fjg6vlhajkvZPjga7jgrnjgq/jg6rjg7zjg7PoibLjgpLkuIrmm7jjgY3jgZnjgovjgYvliKTlrprjgZnjgovjg5Xjg6njgrBcbiAgcHJpdmF0ZSBfdXNlck11bHRpcGx5Q29sb3JzOiBjc21WZWN0b3I8RHJhd2FibGVDb2xvckRhdGE+OyAvLyBEcmF3YWJsZeOBlOOBqOOBq+ioreWumuOBmeOCi+S5l+eul+iJsuOBqOS4iuabuOOBjeODleODqeOCsOOCkueuoeeQhuOBmeOCi+ODquOCueODiFxuICBwcml2YXRlIF91c2VyU2NyZWVuQ29sb3JzOiBjc21WZWN0b3I8RHJhd2FibGVDb2xvckRhdGE+OyAvLyBEcmF3YWJsZeOBlOOBqOOBq+ioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsuOBqOS4iuabuOOBjeODleODqeOCsOOCkueuoeeQhuOBmeOCi+ODquOCueODiFxuXG4gIHByaXZhdGUgX21vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsOyAvLyDjg6Ljg4fjg6tcblxuICBwcml2YXRlIF9wYXJhbWV0ZXJWYWx1ZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44Op44Oh44O844K/44Gu5YCk44Gu44Oq44K544OIXG4gIHByaXZhdGUgX3BhcmFtZXRlck1heGltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCk44Gu44Oq44K544OIXG4gIHByaXZhdGUgX3BhcmFtZXRlck1pbmltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44Op44Oh44O844K/44Gu5pyA5bCP5YCk44Gu44Oq44K544OIXG5cbiAgcHJpdmF0ZSBfcGFydE9wYWNpdGllczogRmxvYXQzMkFycmF5OyAvLyDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7jg6rjgrnjg4hcblxuICBwcml2YXRlIF9wYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47XG4gIHByaXZhdGUgX3BhcnRJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47XG4gIHByaXZhdGUgX2RyYXdhYmxlSWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+O1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWwgPSAkLkN1YmlzbU1vZGVsO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbCA9ICQuQ3ViaXNtTW9kZWw7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24nO1xuXG5jb25zdCBBcnRNZXNoID0gJ0FydE1lc2gnO1xuXG4vKipcbiAqIOODpuODvOOCtuODvOODh+ODvOOCv+OCpOODs+OCv+ODvOODleOCp+ODvOOCuVxuICpcbiAqIEpzb27jgYvjgonoqq3jgb/ovrzjgpPjgaDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqJjpjLLjgZfjgabjgYrjgY/jgZ/jgoHjga7mp4vpgKDkvZNcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlIHtcbiAgdGFyZ2V0VHlwZTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOCv+OCpOODl1xuICB0YXJnZXRJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOBrklEXG4gIHZhbHVlOiBjc21TdHJpbmc7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv1xufVxuXG4vKipcbiAqIOODpuODvOOCtuODh+ODvOOCv+OBrueuoeeQhuOCr+ODqeOCuVxuICpcbiAqIOODpuODvOOCtuODh+ODvOOCv+OCkuODreODvOODieOAgeeuoeeQhuOAgeaknOe0ouOCpOODs+OCv+ODvOODleOCp+OCpOOCueOAgeino+aUvuOBvuOBp+OCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21Nb2RlbFVzZXJEYXRhID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGEoKTtcblxuICAgIHJldC5wYXJzZVVzZXJEYXRhKGJ1ZmZlciwgc2l6ZSk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gbW9kZWxVc2VyRGF0YSDnoLTmo4TjgZnjgovjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vZGVsVXNlckRhdGE6IEN1YmlzbU1vZGVsVXNlckRhdGEpOiB2b2lkIHtcbiAgICBpZiAobW9kZWxVc2VyRGF0YSAhPSBudWxsKSB7XG4gICAgICBtb2RlbFVzZXJEYXRhLnJlbGVhc2UoKTtcbiAgICAgIG1vZGVsVXNlckRhdGEgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcnRNZXNo44Gu44Om44O844K244O844OH44O844K/44Gu44Oq44K544OI44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0QXJ0TWVzaFVzZXJEYXRhcygpOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+IHtcbiAgICByZXR1cm4gdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1c2VyZGF0YTMuanNvbuOBruODkeODvOOCuVxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgcGFyc2VVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQganNvbjogQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24oXG4gICAgICBidWZmZXIsXG4gICAgICBzaXplXG4gICAgKTtcblxuICAgIGNvbnN0IHR5cGVPZkFydE1lc2ggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoQXJ0TWVzaCk7XG4gICAgY29uc3Qgbm9kZUNvdW50OiBudW1iZXIgPSBqc29uLmdldFVzZXJEYXRhQ291bnQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGFkZE5vZGU6IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlKCk7XG5cbiAgICAgIGFkZE5vZGUudGFyZ2V0SWQgPSBqc29uLmdldFVzZXJEYXRhSWQoaSk7XG4gICAgICBhZGROb2RlLnRhcmdldFR5cGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIGpzb24uZ2V0VXNlckRhdGFUYXJnZXRUeXBlKGkpXG4gICAgICApO1xuICAgICAgYWRkTm9kZS52YWx1ZSA9IG5ldyBjc21TdHJpbmcoanNvbi5nZXRVc2VyRGF0YVZhbHVlKGkpKTtcbiAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMucHVzaEJhY2soYWRkTm9kZSk7XG5cbiAgICAgIGlmIChhZGROb2RlLnRhcmdldFR5cGUgPT0gdHlwZU9mQXJ0TWVzaCkge1xuICAgICAgICB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlLnB1c2hCYWNrKGFkZE5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGpzb24ucmVsZWFzZSgpO1xuICAgIGpzb24gPSB2b2lkIDA7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdXNlckRhdGFOb2RlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XG4gICAgdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZSA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl+OCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl91c2VyRGF0YU5vZGVzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzLnNldChpLCBudWxsKTtcbiAgICB9XG5cbiAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX3VzZXJEYXRhTm9kZXM6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl1xuICBwcml2YXRlIF9hcnRNZXNoVXNlckRhdGFOb2RlOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+OyAvLyDplrLopqfjg6rjgrnjg4jjga7kv53mjIFcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxVc2VyRGF0YSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhTm9kZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUgPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFOb2RlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuXG5jb25zdCBNZXRhID0gJ01ldGEnO1xuY29uc3QgVXNlckRhdGFDb3VudCA9ICdVc2VyRGF0YUNvdW50JztcbmNvbnN0IFRvdGFsVXNlckRhdGFTaXplID0gJ1RvdGFsVXNlckRhdGFTaXplJztcbmNvbnN0IFVzZXJEYXRhID0gJ1VzZXJEYXRhJztcbmNvbnN0IFRhcmdldCA9ICdUYXJnZXQnO1xuY29uc3QgSWQgPSAnSWQnO1xuY29uc3QgVmFsdWUgPSAnVmFsdWUnO1xuXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24ge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+WAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFVzZXJEYXRhQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/nt4/mloflrZfliJfmlbDjga7lj5blvpdcbiAgICpcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/nt4/mloflrZfliJfmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRUb3RhbFVzZXJEYXRhU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxVc2VyRGF0YVNpemUpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jgqTjg5fjga7lj5blvpdcbiAgICpcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jgqTjg5dcbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YVRhcmdldFR5cGUoaTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUYXJnZXQpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Gu44K/44O844Ky44OD44OISUTjga7lj5blvpdcbiAgICpcbiAgICogQHBhcmFtIGkg44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OISURcbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YUlkKGk6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruaWh+Wtl+WIl+OBruWPluW+l1xuICAgKlxuICAgKiBAcGFyYW0gaSDjgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YVZhbHVlKGk6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmFsdWUpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICBwcml2YXRlIF9qc29uOiBDdWJpc21Kc29uO1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbHVzZXJkYXRhanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFKc29uO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21CcmVhdGggfSBmcm9tICcuLi9lZmZlY3QvY3ViaXNtYnJlYXRoJztcbmltcG9ydCB7IEN1YmlzbUV5ZUJsaW5rIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbWV5ZWJsaW5rJztcbmltcG9ydCB7IEN1YmlzbVBvc2UgfSBmcm9tICcuLi9lZmZlY3QvY3ViaXNtcG9zZSc7XG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsTWF0cml4IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tb2RlbG1hdHJpeCc7XG5pbXBvcnQgeyBDdWJpc21UYXJnZXRQb2ludCB9IGZyb20gJy4uL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnQnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiwgRmluaXNoZWRNb3Rpb25DYWxsYmFjayB9IGZyb20gJy4uL21vdGlvbi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtZXhwcmVzc2lvbm1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb24gfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvbk1hbmFnZXIgfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlcic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcbmltcG9ydCB7IEN1YmlzbVBoeXNpY3MgfSBmcm9tICcuLi9waHlzaWNzL2N1YmlzbXBoeXNpY3MnO1xuaW1wb3J0IHsgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgfSBmcm9tICcuLi9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXJfd2ViZ2wnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgQ3ViaXNtTG9nRXJyb3IsIEN1YmlzbUxvZ0luZm8gfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgeyBDdWJpc21Nb2MgfSBmcm9tICcuL2N1YmlzbW1vYyc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4vY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWxVc2VyRGF0YSB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YSc7XG5cbi8qKlxuICog44Om44O844K244O844GM5a6f6Zqb44Gr5L2/55So44GZ44KL44Oi44OH44OrXG4gKlxuICog44Om44O844K244O844GM5a6f6Zqb44Gr5L2/55So44GZ44KL44Oi44OH44Or44Gu5Z+65bqV44Kv44Op44K544CC44GT44KM44KS57aZ5om/44GX44Gm44Om44O844K244O844GM5a6f6KOF44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Vc2VyTW9kZWwge1xuICAvKipcbiAgICog5Yid5pyf5YyW54q25oWL44Gu5Y+W5b6XXG4gICAqXG4gICAqIOWIneacn+WMluOBleOCjOOBpuOBhOOCi+eKtuaFi+OBi++8n1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUgICAgIOWIneacn+WMluOBleOCjOOBpuOBhOOCi1xuICAgKiBAcmV0dXJuIGZhbHNlICAgIOWIneacn+WMluOBleOCjOOBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGlzSW5pdGlhbGl6ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxpemVkO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMlueKtuaFi+OBruioreWumlxuICAgKlxuICAgKiDliJ3mnJ/ljJbnirbmhYvjgpLoqK3lrprjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHYg5Yid5pyf5YyW54q25oWLXG4gICAqL1xuICBwdWJsaWMgc2V0SW5pdGlhbGl6ZWQodjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDnirbmhYvjga7lj5blvpdcbiAgICpcbiAgICog5pu05paw44GV44KM44Gm44GE44KL54q25oWL44GL77yfXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSAgICAg5pu05paw44GV44KM44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2UgICAg5pu05paw44GV44KM44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNVcGRhdGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRpbmc7XG4gIH1cblxuICAvKipcbiAgICog5pu05paw54q25oWL44Gu6Kit5a6aXG4gICAqXG4gICAqIOabtOaWsOeKtuaFi+OCkuioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gdiDmm7TmlrDnirbmhYtcbiAgICovXG4gIHB1YmxpYyBzZXRVcGRhdGluZyh2OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fdXBkYXRpbmcgPSB2O1xuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCpuOCueODieODqeODg+OCsOaDheWgseOBruioreWumlxuICAgKiBAcGFyYW0g44OJ44Op44OD44Kw44GX44Gm44GE44KL44Kr44O844K944Or44GuWOS9jee9rlxuICAgKiBAcGFyYW0g44OJ44Op44OD44Kw44GX44Gm44GE44KL44Kr44O844K944Or44GuWeS9jee9rlxuICAgKi9cbiAgcHVibGljIHNldERyYWdnaW5nKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZHJhZ01hbmFnZXIuc2V0KHgsIHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWKoOmAn+W6puOBruaDheWgseOCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0geCBY6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gICAqIEBwYXJhbSB5IFnou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgICogQHBhcmFtIHogWui7uOaWueWQkeOBruWKoOmAn+W6plxuICAgKi9cbiAgcHVibGljIHNldEFjY2VsZXJhdGlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWCA9IHg7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IHk7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWiA9IHo7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or6KGM5YiX44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44OH44Or6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxNYXRyaXgoKTogQ3ViaXNtTW9kZWxNYXRyaXgge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbE1hdHJpeDtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuI3pgI/mmI7luqbjga7oqK3lrppcbiAgICogQHBhcmFtIGEg5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgc2V0T3BhY2l0eShhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9vcGFjaXR5ID0gYTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuI3pgI/mmI7luqbjga7lj5blvpdcbiAgICogQHJldHVybiDkuI3pgI/mmI7luqZcbiAgICovXG4gIHB1YmxpYyBnZXRPcGFjaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX29wYWNpdHk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44OH44O844K/44KS6Kqt44G/6L6844KAXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgICAgbW9jM+ODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKi9cbiAgcHVibGljIGxvYWRNb2RlbChidWZmZXI6IEFycmF5QnVmZmVyKSB7XG4gICAgdGhpcy5fbW9jID0gQ3ViaXNtTW9jLmNyZWF0ZShidWZmZXIpO1xuXG4gICAgaWYgKHRoaXMuX21vYyA9PSBudWxsKSB7XG4gICAgICBDdWJpc21Mb2dFcnJvcignRmFpbGVkIHRvIEN1YmlzbU1vYy5jcmVhdGUoKS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9tb2RlbCA9IHRoaXMuX21vYy5jcmVhdGVNb2RlbCgpO1xuXG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gQ3JlYXRlTW9kZWwoKS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9tb2RlbC5zYXZlUGFyYW1ldGVycygpO1xuICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbmV3IEN1YmlzbU1vZGVsTWF0cml4KFxuICAgICAgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzV2lkdGgoKSxcbiAgICAgIHRoaXMuX21vZGVsLmdldENhbnZhc0hlaWdodCgpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcbiAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSBuYW1lIOODouODvOOCt+ODp+ODs+OBruWQjeWJjVxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG5pmC44Gr5ZG844Gz5Ye644GV44KM44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kv44Op44K5XG4gICAqL1xuICBwdWJsaWMgbG9hZE1vdGlvbiA9IChcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICkgPT4gQ3ViaXNtTW90aW9uLmNyZWF0ZShidWZmZXIsIHNpemUsIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcblxuICAvKipcbiAgICog6KGo5oOF44OH44O844K/44Gu6Kqt44G/6L6844G/XG4gICAqIEBwYXJhbSBidWZmZXIgZXhw44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKiBAcGFyYW0gbmFtZSDooajmg4Xjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBsb2FkRXhwcmVzc2lvbihcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmdcbiAgKTogQUN1YmlzbU1vdGlvbiB7XG4gICAgcmV0dXJuIEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog44Od44O844K644OH44O844K/44Gu6Kqt44G/6L6844G/XG4gICAqIEBwYXJhbSBidWZmZXIgcG9zZTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBsb2FkUG9zZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9wb3NlID0gQ3ViaXNtUG9zZS5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgavku5jlsZ7jgZnjgovjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcbiAgICogQHBhcmFtIGJ1ZmZlciB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBsb2FkVXNlckRhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbW9kZWxVc2VyRGF0YSA9IEN1YmlzbU1vZGVsVXNlckRhdGEuY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X44OH44O844K/44Gu6Kqt44G/6L6844G/XG4gICAqIEBwYXJhbSBidWZmZXIgIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgbG9hZFBoeXNpY3MoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fcGh5c2ljcyA9IEN1YmlzbVBoeXNpY3MuY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUlkIOaknOiovOOBl+OBn+OBhERyYXdhYmxl44GuSURcbiAgICogQHBhcmFtIHBvaW50WCBY5L2N572uXG4gICAqIEBwYXJhbSBwb2ludFkgWeS9jee9rlxuICAgKiBAcmV0dXJuIHRydWUg44OS44OD44OI44GX44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44OS44OD44OI44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNIaXQoXG4gICAgZHJhd2FibGVJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgcG9pbnRYOiBudW1iZXIsXG4gICAgcG9pbnRZOiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHJhd0luZGV4OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZUluZGV4KGRyYXdhYmxlSWQpO1xuXG4gICAgaWYgKGRyYXdJbmRleCA8IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8g5a2Y5Zyo44GX44Gq44GE5aC05ZCI44GvZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3SW5kZXgpO1xuICAgIGNvbnN0IHZlcnRpY2VzOiBGbG9hdDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdJbmRleCk7XG5cbiAgICBsZXQgbGVmdDogbnVtYmVyID0gdmVydGljZXNbMF07XG4gICAgbGV0IHJpZ2h0OiBudW1iZXIgPSB2ZXJ0aWNlc1swXTtcbiAgICBsZXQgdG9wOiBudW1iZXIgPSB2ZXJ0aWNlc1sxXTtcbiAgICBsZXQgYm90dG9tOiBudW1iZXIgPSB2ZXJ0aWNlc1sxXTtcblxuICAgIGZvciAobGV0IGogPSAxOyBqIDwgY291bnQ7ICsraikge1xuICAgICAgY29uc3QgeCA9IHZlcnRpY2VzW0NvbnN0YW50LnZlcnRleE9mZnNldCArIGogKiBDb25zdGFudC52ZXJ0ZXhTdGVwXTtcbiAgICAgIGNvbnN0IHkgPSB2ZXJ0aWNlc1tDb25zdGFudC52ZXJ0ZXhPZmZzZXQgKyBqICogQ29uc3RhbnQudmVydGV4U3RlcCArIDFdO1xuXG4gICAgICBpZiAoeCA8IGxlZnQpIHtcbiAgICAgICAgbGVmdCA9IHg7IC8vIE1pbiB4XG4gICAgICB9XG5cbiAgICAgIGlmICh4ID4gcmlnaHQpIHtcbiAgICAgICAgcmlnaHQgPSB4OyAvLyBNYXggeFxuICAgICAgfVxuXG4gICAgICBpZiAoeSA8IHRvcCkge1xuICAgICAgICB0b3AgPSB5OyAvLyBNaW4geVxuICAgICAgfVxuXG4gICAgICBpZiAoeSA+IGJvdHRvbSkge1xuICAgICAgICBib3R0b20gPSB5OyAvLyBNYXggeVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHR4OiBudW1iZXIgPSB0aGlzLl9tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHBvaW50WCk7XG4gICAgY29uc3QgdHk6IG51bWJlciA9IHRoaXMuX21vZGVsTWF0cml4LmludmVydFRyYW5zZm9ybVkocG9pbnRZKTtcblxuICAgIHJldHVybiBsZWZ0IDw9IHR4ICYmIHR4IDw9IHJpZ2h0ICYmIHRvcCA8PSB0eSAmJiB0eSA8PSBib3R0b207XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44OH44OrXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWwoKTogQ3ViaXNtTW9kZWwge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7lj5blvpdcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6lcbiAgICovXG4gIHB1YmxpYyBnZXRSZW5kZXJlcigpOiBDdWJpc21SZW5kZXJlcl9XZWJHTCB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOCkuS9nOaIkOOBl+OBpuWIneacn+WMluOCkuWun+ihjOOBmeOCi1xuICAgKi9cbiAgcHVibGljIGNyZWF0ZVJlbmRlcmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9yZW5kZXJlcikge1xuICAgICAgdGhpcy5kZWxldGVSZW5kZXJlcigpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbmRlcmVyID0gbmV3IEN1YmlzbVJlbmRlcmVyX1dlYkdMKCk7XG4gICAgdGhpcy5fcmVuZGVyZXIuaW5pdGlhbGl6ZSh0aGlzLl9tb2RlbCk7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44Gu6Kej5pS+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlUmVuZGVyZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3JlbmRlcmVyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI55m654Gr5pmC44Gu5qiZ5rqW5Yem55CGXG4gICAqXG4gICAqIEV2ZW5044GM5YaN55Sf5Yem55CG5pmC44Gr44GC44Gj44Gf5aC05ZCI44Gu5Yem55CG44KS44GZ44KL44CCXG4gICAqIOe2meaJv+OBp+S4iuabuOOBjeOBmeOCi+OBk+OBqOOCkuaDs+WumuOBl+OBpuOBhOOCi+OAglxuICAgKiDkuIrmm7jjgY3jgZfjgarjgYTloLTlkIjjga/jg63jgrDlh7rlipvjgpLjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50VmFsdWUg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44Gu5paH5a2X5YiX44OH44O844K/XG4gICAqL1xuICBwdWJsaWMgbW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlOiBjc21TdHJpbmcpOiB2b2lkIHtcbiAgICBDdWJpc21Mb2dJbmZvKCd7MH0nLCBldmVudFZhbHVlLnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOeUqOOBruOCs+ODvOODq+ODkOODg+OCr1xuICAgKlxuICAgKiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgavjgqTjg5njg7Pjg4jnlKjjgavnmbvpjLLjgZnjgovjgZ/jgoHjga5DYWxsYmFja+OAglxuICAgKiBDdWJpc21Vc2VyTW9kZWzjga7ntpnmib/lhYjjga5FdmVudEZpcmVk44KS5ZG844G244CCXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsZXIg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44KS566h55CG44GX44Gm44GE44Gf44Oi44O844K344On44Oz44Oe44ON44O844K444Oj44O844CB5q+U6LyD55SoXG4gICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xuICAgKiBAcGFyYW0gY3VzdG9tRGF0YSBDdWJpc21Vc2VyTW9kZWzjgpLntpnmib/jgZfjgZ/jgqTjg7Pjgrnjgr/jg7PjgrnjgpLmg7PlrppcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2soXG4gICAgY2FsbGVyOiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIsXG4gICAgZXZlbnRWYWx1ZTogY3NtU3RyaW5nLFxuICAgIGN1c3RvbURhdGE6IEN1YmlzbVVzZXJNb2RlbFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBtb2RlbDogQ3ViaXNtVXNlck1vZGVsID0gY3VzdG9tRGF0YTtcblxuICAgIGlmIChtb2RlbCAhPSBudWxsKSB7XG4gICAgICBtb2RlbC5tb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyDlkITlpInmlbDliJ3mnJ/ljJZcbiAgICB0aGlzLl9tb2MgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsID0gbnVsbDtcbiAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XG4gICAgdGhpcy5fZXllQmxpbmsgPSBudWxsO1xuICAgIHRoaXMuX2JyZWF0aCA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWxNYXRyaXggPSBudWxsO1xuICAgIHRoaXMuX3Bvc2UgPSBudWxsO1xuICAgIHRoaXMuX2RyYWdNYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9waHlzaWNzID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbFVzZXJEYXRhID0gbnVsbDtcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5fb3BhY2l0eSA9IDEuMDtcbiAgICB0aGlzLl9saXBzeW5jID0gdHJ1ZTtcbiAgICB0aGlzLl9sYXN0TGlwU3luY1ZhbHVlID0gMC4wO1xuICAgIHRoaXMuX2RyYWdYID0gMC4wO1xuICAgIHRoaXMuX2RyYWdZID0gMC4wO1xuICAgIHRoaXMuX2FjY2VsZXJhdGlvblggPSAwLjA7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IDAuMDtcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25aID0gMC4wO1xuICAgIHRoaXMuX2RlYnVnTW9kZSA9IGZhbHNlO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcblxuICAgIC8vIOODouODvOOCt+ODp+ODs+ODnuODjeODvOOCuOODo+ODvOOCkuS9nOaIkFxuICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBuZXcgQ3ViaXNtTW90aW9uTWFuYWdlcigpO1xuICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc2V0RXZlbnRDYWxsYmFjayhcbiAgICAgIEN1YmlzbVVzZXJNb2RlbC5jdWJpc21EZWZhdWx0TW90aW9uRXZlbnRDYWxsYmFjayxcbiAgICAgIHRoaXNcbiAgICApO1xuXG4gICAgLy8g6KGo5oOF44Oe44ON44O844K444Oj44O844KS5L2c5oiQXG4gICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgPSBuZXcgQ3ViaXNtTW90aW9uTWFuYWdlcigpO1xuXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL44Ki44OL44Oh44O844K344On44OzXG4gICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBuZXcgQ3ViaXNtVGFyZ2V0UG9pbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/jgavnm7jlvZPjgZnjgovlh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCkge1xuICAgIGlmICh0aGlzLl9tb3Rpb25NYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fbW90aW9uTWFuYWdlciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbW9jICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21vYy5kZWxldGVNb2RlbCh0aGlzLl9tb2RlbCk7XG4gICAgICB0aGlzLl9tb2MucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fbW9jID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG51bGw7XG5cbiAgICBDdWJpc21Qb3NlLmRlbGV0ZSh0aGlzLl9wb3NlKTtcbiAgICBDdWJpc21FeWVCbGluay5kZWxldGUodGhpcy5fZXllQmxpbmspO1xuICAgIEN1YmlzbUJyZWF0aC5kZWxldGUodGhpcy5fYnJlYXRoKTtcblxuICAgIHRoaXMuX2RyYWdNYW5hZ2VyID0gbnVsbDtcblxuICAgIEN1YmlzbVBoeXNpY3MuZGVsZXRlKHRoaXMuX3BoeXNpY3MpO1xuICAgIEN1YmlzbU1vZGVsVXNlckRhdGEuZGVsZXRlKHRoaXMuX21vZGVsVXNlckRhdGEpO1xuXG4gICAgdGhpcy5kZWxldGVSZW5kZXJlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9tb2M6IEN1YmlzbU1vYzsgLy8gTW9j44OH44O844K/XG4gIHByb3RlY3RlZCBfbW9kZWw6IEN1YmlzbU1vZGVsOyAvLyBNb2RlbOOCpOODs+OCueOCv+ODs+OCuVxuXG4gIHByb3RlY3RlZCBfbW90aW9uTWFuYWdlcjogQ3ViaXNtTW90aW9uTWFuYWdlcjsgLy8g44Oi44O844K344On44Oz566h55CGXG4gIHByb3RlY3RlZCBfZXhwcmVzc2lvbk1hbmFnZXI6IEN1YmlzbU1vdGlvbk1hbmFnZXI7IC8vIOihqOaDheeuoeeQhlxuICBwcm90ZWN0ZWQgX2V5ZUJsaW5rOiBDdWJpc21FeWVCbGluazsgLy8g6Ieq5YuV44G+44Gw44Gf44GNXG4gIHByb3RlY3RlZCBfYnJlYXRoOiBDdWJpc21CcmVhdGg7IC8vIOWRvOWQuFxuICBwcm90ZWN0ZWQgX21vZGVsTWF0cml4OiBDdWJpc21Nb2RlbE1hdHJpeDsgLy8g44Oi44OH44Or6KGM5YiXXG4gIHByb3RlY3RlZCBfcG9zZTogQ3ViaXNtUG9zZTsgLy8g44Od44O844K6566h55CGXG4gIHByb3RlY3RlZCBfZHJhZ01hbmFnZXI6IEN1YmlzbVRhcmdldFBvaW50OyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrBcbiAgcHJvdGVjdGVkIF9waHlzaWNzOiBDdWJpc21QaHlzaWNzOyAvLyDniannkIbmvJTnrpdcbiAgcHJvdGVjdGVkIF9tb2RlbFVzZXJEYXRhOiBDdWJpc21Nb2RlbFVzZXJEYXRhOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cblxuICBwcm90ZWN0ZWQgX2luaXRpYWxpemVkOiBib29sZWFuOyAvLyDliJ3mnJ/ljJbjgZXjgozjgZ/jgYvjganjgYbjgYtcbiAgcHJvdGVjdGVkIF91cGRhdGluZzogYm9vbGVhbjsgLy8g5pu05paw44GV44KM44Gf44GL44Gp44GG44GLXG4gIHByb3RlY3RlZCBfb3BhY2l0eTogbnVtYmVyOyAvLyDkuI3pgI/mmI7luqZcbiAgcHJvdGVjdGVkIF9saXBzeW5jOiBib29sZWFuOyAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgZnjgovjgYvjganjgYbjgYtcbiAgcHJvdGVjdGVkIF9sYXN0TGlwU3luY1ZhbHVlOiBudW1iZXI7IC8vIOacgOW+jOOBruODquODg+ODl+OCt+ODs+OCr+OBruWItuW+oeWcsFxuICBwcm90ZWN0ZWQgX2RyYWdYOiBudW1iZXI7IC8vIOODnuOCpuOCueODieODqeODg+OCsOOBrljkvY3nva5cbiAgcHJvdGVjdGVkIF9kcmFnWTogbnVtYmVyOyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrDjga5Z5L2N572uXG4gIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWDogbnVtYmVyOyAvLyBY6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWTogbnVtYmVyOyAvLyBZ6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWjogbnVtYmVyOyAvLyBa6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gIHByb3RlY3RlZCBfZGVidWdNb2RlOiBib29sZWFuOyAvLyDjg4fjg5Djg4PjgrDjg6Ljg7zjg4njgYvjganjgYbjgYtcblxuICBwcml2YXRlIF9yZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXJfV2ViR0w7IC8vIOODrOODs+ODgOODqVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc211c2VybW9kZWwnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVVzZXJNb2RlbCA9ICQuQ3ViaXNtVXNlck1vZGVsO1xuICBleHBvcnQgdHlwZSBDdWJpc21Vc2VyTW9kZWwgPSAkLkN1YmlzbVVzZXJNb2RlbDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XG5cbi8qKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDlrprnvqkgKi9cbmV4cG9ydCB0eXBlIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSAoc2VsZjogQUN1YmlzbU1vdGlvbikgPT4gdm9pZDtcblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7mir3osaHln7rlupXjgq/jg6njgrlcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7mir3osaHln7rlupXjgq/jg6njgrnjgIJNb3Rpb25RdWV1ZU1hbmFnZXLjgavjgojjgaPjgabjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgpLnrqHnkIbjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFDdWJpc21Nb3Rpb24ge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb3Rpb246IEFDdWJpc21Nb3Rpb24pOiB2b2lkIHtcbiAgICBtb3Rpb24ucmVsZWFzZSgpO1xuICAgIG1vdGlvbiA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAtMS4wO1xuICAgIHRoaXMuX3dlaWdodCA9IDEuMDtcbiAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDlho3nlJ/jga7plovlp4vmmYLliLtcbiAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzID0gbmV3IGNzbVZlY3Rvcjxjc21TdHJpbmc+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl93ZWlnaHQgPSAwLjA7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/XG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5LFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGlmICghbW90aW9uUXVldWVFbnRyeS5pc0F2YWlsYWJsZSgpIHx8IG1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFtb3Rpb25RdWV1ZUVudHJ5LmlzU3RhcnRlZCgpKSB7XG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzU3RhcnRlZCh0cnVlKTtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0U3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX29mZnNldFNlY29uZHMpOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjgpLoqJjpjLJcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RmFkZUluU3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7IC8vIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu1xuXG4gICAgICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID0gdGhpcy5nZXREdXJhdGlvbigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwKSB7XG4gICAgICAgIC8vIOmWi+Wni+OBl+OBpuOBhOOBquOBhOOBhuOBoeOBq+e1guS6huioreWumuOBl+OBpuOBhOOCi+WgtOWQiOOBjOOBguOCi+OAglxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEVuZFRpbWUoXG4gICAgICAgICAgZHVyYXRpb24gPD0gMCA/IC0xIDogbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKSArIGR1cmF0aW9uXG4gICAgICAgICk7XG4gICAgICAgIC8vIGR1cmF0aW9uID09IC0xIOOBruWgtOWQiOOBr+ODq+ODvOODl+OBmeOCi1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmYWRlV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQ7IC8vIOePvuWcqOOBruWApOOBqOaOm+OBkeWQiOOCj+OBm+OCi+WJsuWQiFxuXG4gICAgLy8tLS0tIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOOBruWHpueQhiAtLS0tXG4gICAgLy8g5Y2Y57SU44Gq44K144Kk44Oz6Zai5pWw44Gn44Kk44O844K444Oz44Kw44GZ44KLXG4gICAgY29uc3QgZmFkZUluOiBudW1iZXIgPVxuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9PSAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xuICAgICAgICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzXG4gICAgICAgICAgKTtcblxuICAgIGNvbnN0IGZhZGVPdXQ6IG51bWJlciA9XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHNcbiAgICAgICAgICApO1xuXG4gICAgZmFkZVdlaWdodCA9IGZhZGVXZWlnaHQgKiBmYWRlSW4gKiBmYWRlT3V0O1xuXG4gICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGF0ZSh1c2VyVGltZVNlY29uZHMsIGZhZGVXZWlnaHQpO1xuXG4gICAgQ1NNX0FTU0VSVCgwLjAgPD0gZmFkZVdlaWdodCAmJiBmYWRlV2VpZ2h0IDw9IDEuMCk7XG5cbiAgICAvLy0tLS0g5YWo44Gm44Gu44OR44Op44Oh44O844K/SUTjgpLjg6vjg7zjg5fjgZnjgosgLS0tLVxuICAgIHRoaXMuZG9VcGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgbW9kZWwsXG4gICAgICB1c2VyVGltZVNlY29uZHMsXG4gICAgICBmYWRlV2VpZ2h0LFxuICAgICAgbW90aW9uUXVldWVFbnRyeVxuICAgICk7XG5cbiAgICAvLyDlvozlh6bnkIZcbiAgICAvLyDntYLkuobmmYLliLvjgpLpgY7jgY7jgZ/jgonntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgosoQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyKVxuICAgIGlmIChcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpID4gMCAmJlxuICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCB1c2VyVGltZVNlY29uZHNcbiAgICApIHtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNGaW5pc2hlZCh0cnVlKTsgLy8g57WC5LqGXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBruaZgumWk+OCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gZmFkZUluU2Vjb25kcyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEZhZGVJblRpbWUoZmFkZUluU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IGZhZGVJblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEZhZGVPdXRUaW1lKGZhZGVPdXRTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmFkZU91dFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFkZU91dFNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGYWRlSW5UaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhZGVJblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz6YGp55So44Gu6YeN44G/44Gu6Kit5a6aXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/77yIMC4wIC0gMS4w77yJXG4gICAqL1xuICBwdWJsaWMgc2V0V2VpZ2h0KHdlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fd2VpZ2h0ID0gd2VpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+mBqeeUqOOBrumHjeOBv+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOmHjeOBv++8iDAuMCAtIDEuMO+8iVxuICAgKi9cbiAgcHVibGljIGdldFdlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93ZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgICpcbiAgICogQG5vdGUg44Or44O844OX44Gu5pmC44Gv44CMLTHjgI3jgIJcbiAgICogICAgICAg44Or44O844OX44Gn44Gq44GE5aC05ZCI44Gv44CB44Kq44O844OQ44O844Op44Kk44OJ44GZ44KL44CCXG4gICAqICAgICAgIOato+OBruWApOOBruaZguOBr+WPluW+l+OBleOCjOOCi+aZgumWk+OBp+e1guS6huOBmeOCi+OAglxuICAgKiAgICAgICDjgIwtMeOAjeOBruaZguOBr+WklumDqOOBi+OCieWBnOatouWRveS7pOOBjOOBquOBhOmZkOOCiue1guOCj+OCieOBquOBhOWHpueQhuOBqOOBquOCi+OAglxuICAgKi9cbiAgcHVibGljIGdldER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIC0xLjA7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Or44O844OXMeWbnuWIhuOBrumVt+OBleOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+S4gOWbnuWIhuOBrumVt+OBlVvnp5JdXG4gICAqXG4gICAqIEBub3RlIOODq+ODvOODl+OBl+OBquOBhOWgtOWQiOOBr+OAgWdldER1cmF0aW9uKCnjgajlkIzjgZjlgKTjgpLov5TjgZlcbiAgICogICAgICAg44Or44O844OX5LiA5Zue5YiG44Gu6ZW344GV44GM5a6a576p44Gn44GN44Gq44GE5aC05ZCIKOODl+ODreOCsOODqeODoOeahOOBq+WLleOBjee2muOBkeOCi+OCteODluOCr+ODqeOCueOBquOBqSnjga7loLTlkIjjga/jgIwtMeOAjeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldExvb3BEdXJhdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiAtMS4wO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrumWi+Wni+aZguWIu+OBruioreWumlxuICAgKiBAcGFyYW0gb2Zmc2V0U2Vjb25kcyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIHNldE9mZnNldFRpbWUob2Zmc2V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fb2Zmc2V0U2Vjb25kcyA9IG9mZnNldFNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/5pu05pawXG4gICAqXG4gICAqIOOCpOODmeODs+ODiOeZuueBq+OBruODgeOCp+ODg+OCr+OAglxuICAgKiDlhaXlipvjgZnjgovmmYLplpPjga/lkbzjgbDjgozjgovjg6Ljg7zjgrfjg6fjg7Pjgr/jgqTjg5/jg7PjgrDjgpLvvJDjgajjgZfjgZ/np5LmlbDjgafooYzjgYbjgIJcbiAgICpcbiAgICogQHBhcmFtIGJlZm9yZUNoZWNrVGltZVNlY29uZHMg5YmN5Zue44Gu44Kk44OZ44Oz44OI44OB44Kn44OD44Kv5pmC6ZaTW+enkl1cbiAgICogQHBhcmFtIG1vdGlvblRpbWVTZWNvbmRzIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmlyZWRFdmVudChcbiAgICBiZWZvcmVDaGVja1RpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgbW90aW9uVGltZVNlY29uZHM6IG51bWJlclxuICApOiBjc21WZWN0b3I8Y3NtU3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICogQHJldHVybiB0cnVlIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBguOCilxuICAgKiBAcmV0dXJuIGZhbHNlIOODouODh+ODq+OBuOOBruODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBl++8iOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBl++8iVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGRvVXBkYXRlUGFyYW1ldGVycyhcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgd2VpZ2h0OiBudW1iZXIsXG4gICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jga7nmbvpjLJcbiAgICpcbiAgICog44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv44KS55m76Yyy44GZ44KL44CCXG4gICAqIGlzRmluaXNoZWTjg5Xjg6njgrDjgpLoqK3lrprjgZnjgovjgr/jgqTjg5/jg7PjgrDjgaflkbzjgbPlh7rjgZXjgozjgovjgIJcbiAgICog5Lul5LiL44Gu54q25oWL44Gu6Zqb44Gr44Gv5ZG844Gz5Ye644GV44KM44Gq44GEOlxuICAgKiAgIDEuIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBjOOAjOODq+ODvOODl+OAjeOBqOOBl+OBpuioreWumuOBleOCjOOBpuOBhOOCi+OBqOOBjVxuICAgKiAgIDIuIOOCs+ODvOODq+ODkOODg+OCr+OBjOeZu+mMsuOBleOCjOOBpuOBhOOBquOBhOaZglxuICAgKlxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqL1xuICBwdWJsaWMgc2V0RmluaXNoZWRNb3Rpb25IYW5kbGVyID0gKFxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyOiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICkgPT4gKHRoaXMuX29uRmluaXNoZWRNb3Rpb24gPSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OBruWPluW+l1xuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIgPSAoKSA9PiB0aGlzLl9vbkZpbmlzaGVkTW90aW9uO1xuXG4gIHB1YmxpYyBfZmFkZUluU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICBwdWJsaWMgX2ZhZGVPdXRTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gIHB1YmxpYyBfd2VpZ2h0OiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICBwdWJsaWMgX29mZnNldFNlY29uZHM6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC6ZaTW+enkl1cblxuICBwdWJsaWMgX2ZpcmVkRXZlbnRWYWx1ZXM6IGNzbVZlY3Rvcjxjc21TdHJpbmc+O1xuXG4gIC8vIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICBwdWJsaWMgX29uRmluaXNoZWRNb3Rpb24/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBBQ3ViaXNtTW90aW9uID0gJC5BQ3ViaXNtTW90aW9uO1xuICBleHBvcnQgdHlwZSBBQ3ViaXNtTW90aW9uID0gJC5BQ3ViaXNtTW90aW9uO1xuICBleHBvcnQgdHlwZSBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrID0gJC5GaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Kc29uLCBWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcblxuLy8gZXhwMy5qc29u44Gu44Kt44O844Go44OH44OV44Kp44Or44OIXG5jb25zdCBFeHByZXNzaW9uS2V5RmFkZUluID0gJ0ZhZGVJblRpbWUnO1xuY29uc3QgRXhwcmVzc2lvbktleUZhZGVPdXQgPSAnRmFkZU91dFRpbWUnO1xuY29uc3QgRXhwcmVzc2lvbktleVBhcmFtZXRlcnMgPSAnUGFyYW1ldGVycyc7XG5jb25zdCBFeHByZXNzaW9uS2V5SWQgPSAnSWQnO1xuY29uc3QgRXhwcmVzc2lvbktleVZhbHVlID0gJ1ZhbHVlJztcbmNvbnN0IEV4cHJlc3Npb25LZXlCbGVuZCA9ICdCbGVuZCc7XG5jb25zdCBCbGVuZFZhbHVlQWRkID0gJ0FkZCc7XG5jb25zdCBCbGVuZFZhbHVlTXVsdGlwbHkgPSAnTXVsdGlwbHknO1xuY29uc3QgQmxlbmRWYWx1ZU92ZXJ3cml0ZSA9ICdPdmVyd3JpdGUnO1xuY29uc3QgRGVmYXVsdEZhZGVUaW1lID0gMS4wO1xuXG4vKipcbiAqIOihqOaDheOBruODouODvOOCt+ODp+ODs1xuICpcbiAqIOihqOaDheOBruODouODvOOCt+ODp+ODs+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiBleHRlbmRzIEFDdWJpc21Nb3Rpb24ge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KL44CCXG4gICAqIEBwYXJhbSBidWZmZXIgZXhw44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXG4gICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcbiAgICBzaXplOiBudW1iZXJcbiAgKTogQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiB7XG4gICAgY29uc3QgZXhwcmVzc2lvbjogQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiA9IG5ldyBDdWJpc21FeHByZXNzaW9uTW90aW9uKCk7XG5cbiAgICBjb25zdCBqc29uOiBDdWJpc21Kc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICBjb25zdCByb290OiBWYWx1ZSA9IGpzb24uZ2V0Um9vdCgpO1xuXG4gICAgZXhwcmVzc2lvbi5zZXRGYWRlSW5UaW1lKFxuICAgICAgcm9vdC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlGYWRlSW4pLnRvRmxvYXQoRGVmYXVsdEZhZGVUaW1lKVxuICAgICk7IC8vIOODleOCp+ODvOODieOCpOODs1xuICAgIGV4cHJlc3Npb24uc2V0RmFkZU91dFRpbWUoXG4gICAgICByb290LmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUZhZGVPdXQpLnRvRmxvYXQoRGVmYXVsdEZhZGVUaW1lKVxuICAgICk7IC8vIOODleOCp+ODvOODieOCouOCpuODiFxuXG4gICAgLy8g5ZCE44OR44Op44Oh44O844K/44Gr44Gk44GE44GmXG4gICAgY29uc3QgcGFyYW1ldGVyQ291bnQgPSByb290XG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5UGFyYW1ldGVycylcbiAgICAgIC5nZXRTaXplKCk7XG4gICAgZXhwcmVzc2lvbi5fcGFyYW1ldGVycy5wcmVwYXJlQ2FwYWNpdHkocGFyYW1ldGVyQ291bnQpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwYXJhbTogVmFsdWUgPSByb290XG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgY29uc3QgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlJZCkuZ2V0UmF3U3RyaW5nKClcbiAgICAgICk7IC8vIOODkeODqeODoeODvOOCv0lEXG5cbiAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBwYXJhbVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5VmFsdWUpXG4gICAgICAgIC50b0Zsb2F0KCk7IC8vIOWApFxuXG4gICAgICAvLyDoqIjnrpfmlrnms5Xjga7oqK3lrppcbiAgICAgIGxldCBibGVuZFR5cGU6IEV4cHJlc3Npb25CbGVuZFR5cGU7XG5cbiAgICAgIGlmIChcbiAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmlzTnVsbCgpIHx8XG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PSBCbGVuZFZhbHVlQWRkXG4gICAgICApIHtcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PVxuICAgICAgICBCbGVuZFZhbHVlTXVsdGlwbHlcbiAgICAgICkge1xuICAgICAgICBibGVuZFR5cGUgPSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfTXVsdGlwbHk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlCbGVuZCkuZ2V0U3RyaW5nKCkgPT1cbiAgICAgICAgQmxlbmRWYWx1ZU92ZXJ3cml0ZVxuICAgICAgKSB7XG4gICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDjgZ3jga7ku5Yg5LuV5qeY44Gr44Gq44GE5YCk44KS6Kit5a6a44GX44Gf5pmC44Gv5Yqg566X44Oi44O844OJ44Gr44GZ44KL44GT44Go44Gn5b6p5penXG4gICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQ7XG4gICAgICB9XG5cbiAgICAgIC8vIOioreWumuOCquODluOCuOOCp+OCr+ODiOOCkuS9nOaIkOOBl+OBpuODquOCueODiOOBq+i/veWKoOOBmeOCi1xuICAgICAgY29uc3QgaXRlbTogRXhwcmVzc2lvblBhcmFtZXRlciA9IG5ldyBFeHByZXNzaW9uUGFyYW1ldGVyKCk7XG5cbiAgICAgIGl0ZW0ucGFyYW1ldGVySWQgPSBwYXJhbWV0ZXJJZDtcbiAgICAgIGl0ZW0uYmxlbmRUeXBlID0gYmxlbmRUeXBlO1xuICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICBleHByZXNzaW9uLl9wYXJhbWV0ZXJzLnB1c2hCYWNrKGl0ZW0pO1xuICAgIH1cblxuICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pOyAvLyBKU09O44OH44O844K/44Gv5LiN6KaB44Gr44Gq44Gj44Gf44KJ5YmK6Zmk44GZ44KLXG4gICAgcmV0dXJuIGV4cHJlc3Npb247XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05paw44Gu5a6f6KGMXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgIHdlaWdodDogbnVtYmVyLFxuICAgIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlcbiAgKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJhbWV0ZXJzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBjb25zdCBwYXJhbWV0ZXI6IEV4cHJlc3Npb25QYXJhbWV0ZXIgPSB0aGlzLl9wYXJhbWV0ZXJzLmF0KGkpO1xuXG4gICAgICBzd2l0Y2ggKHBhcmFtZXRlci5ibGVuZFR5cGUpIHtcbiAgICAgICAgY2FzZSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkOiB7XG4gICAgICAgICAgbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxuICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseToge1xuICAgICAgICAgIG1vZGVsLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxuICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGU6IHtcbiAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVySWQsXG4gICAgICAgICAgICBwYXJhbWV0ZXIudmFsdWUsXG4gICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8g5LuV5qeY44Gr44Gq44GE5YCk44KS6Kit5a6a44GX44Gf5pmC44Gv44GZ44Gn44Gr5Yqg566X44Oi44O844OJ44Gr44Gq44Gj44Gm44GE44KLXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3BhcmFtZXRlcnMgPSBuZXcgY3NtVmVjdG9yPEV4cHJlc3Npb25QYXJhbWV0ZXI+KCk7XG4gIH1cblxuICBfcGFyYW1ldGVyczogY3NtVmVjdG9yPEV4cHJlc3Npb25QYXJhbWV0ZXI+OyAvLyDooajmg4Xjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLHjg6rjgrnjg4hcbn1cblxuLyoqXG4gKiDooajmg4Xjg5Hjg6njg6Hjg7zjgr/lgKTjga7oqIjnrpfmlrnlvI9cbiAqL1xuZXhwb3J0IGVudW0gRXhwcmVzc2lvbkJsZW5kVHlwZSB7XG4gIEV4cHJlc3Npb25CbGVuZFR5cGVfQWRkID0gMCwgLy8g5Yqg566XXG4gIEV4cHJlc3Npb25CbGVuZFR5cGVfTXVsdGlwbHkgPSAxLCAvLyDkuZfnrpdcbiAgRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGUgPSAyLCAvLyDkuIrmm7jjgY1cbn1cblxuLyoqXG4gKiDooajmg4Xjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25QYXJhbWV0ZXIge1xuICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEXG4gIGJsZW5kVHlwZTogRXhwcmVzc2lvbkJsZW5kVHlwZTsgLy8g44OR44Op44Oh44O844K/44Gu5ryU566X56iu6aGeXG4gIHZhbHVlOiBudW1iZXI7IC8vIOWApFxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21leHByZXNzaW9ubW90aW9uJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21FeHByZXNzaW9uTW90aW9uID0gJC5DdWJpc21FeHByZXNzaW9uTW90aW9uO1xuICBleHBvcnQgdHlwZSBDdWJpc21FeHByZXNzaW9uTW90aW9uID0gJC5DdWJpc21FeHByZXNzaW9uTW90aW9uO1xuICBleHBvcnQgY29uc3QgRXhwcmVzc2lvbkJsZW5kVHlwZSA9ICQuRXhwcmVzc2lvbkJsZW5kVHlwZTtcbiAgZXhwb3J0IHR5cGUgRXhwcmVzc2lvbkJsZW5kVHlwZSA9ICQuRXhwcmVzc2lvbkJsZW5kVHlwZTtcbiAgZXhwb3J0IGNvbnN0IEV4cHJlc3Npb25QYXJhbWV0ZXIgPSAkLkV4cHJlc3Npb25QYXJhbWV0ZXI7XG4gIGV4cG9ydCB0eXBlIEV4cHJlc3Npb25QYXJhbWV0ZXIgPSAkLkV4cHJlc3Npb25QYXJhbWV0ZXI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21NYXRoIH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRoJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHtcbiAgQ1NNX0FTU0VSVCxcbiAgQ3ViaXNtTG9nRGVidWcsXG4gIEN1YmlzbUxvZ1dhcm5pbmcsXG59IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24sIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHtcbiAgQ3ViaXNtTW90aW9uQ3VydmUsXG4gIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LFxuICBDdWJpc21Nb3Rpb25EYXRhLFxuICBDdWJpc21Nb3Rpb25FdmVudCxcbiAgQ3ViaXNtTW90aW9uUG9pbnQsXG4gIEN1YmlzbU1vdGlvblNlZ21lbnQsXG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLFxufSBmcm9tICcuL2N1YmlzbW1vdGlvbmludGVybmFsJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvbkpzb24sIEV2YWx1YXRpb25PcHRpb25GbGFnIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25qc29uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuXG5jb25zdCBFZmZlY3ROYW1lRXllQmxpbmsgPSAnRXllQmxpbmsnO1xuY29uc3QgRWZmZWN0TmFtZUxpcFN5bmMgPSAnTGlwU3luYyc7XG5jb25zdCBUYXJnZXROYW1lTW9kZWwgPSAnTW9kZWwnO1xuY29uc3QgVGFyZ2V0TmFtZVBhcmFtZXRlciA9ICdQYXJhbWV0ZXInO1xuY29uc3QgVGFyZ2V0TmFtZVBhcnRPcGFjaXR5ID0gJ1BhcnRPcGFjaXR5JztcblxuLyoqXG4gKiBDdWJpc20gU0RLIFIyIOS7peWJjeOBruODouODvOOCt+ODp+ODs+OCkuWGjeePvuOBleOBm+OCi+OBquOCiSB0cnVlIOOAgeOCouODi+ODoeODvOOCv+OBruODouODvOOCt+ODp+ODs+OCkuato+OBl+OBj+WGjeePvuOBmeOCi+OBquOCiSBmYWxzZSDjgIJcbiAqL1xuY29uc3QgVXNlT2xkQmV6aWVyc0N1cnZlTW90aW9uID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGxlcnBQb2ludHMoXG4gIGE6IEN1YmlzbU1vdGlvblBvaW50LFxuICBiOiBDdWJpc21Nb3Rpb25Qb2ludCxcbiAgdDogbnVtYmVyXG4pOiBDdWJpc21Nb3Rpb25Qb2ludCB7XG4gIGNvbnN0IHJlc3VsdDogQ3ViaXNtTW90aW9uUG9pbnQgPSBuZXcgQ3ViaXNtTW90aW9uUG9pbnQoKTtcblxuICByZXN1bHQudGltZSA9IGEudGltZSArIChiLnRpbWUgLSBhLnRpbWUpICogdDtcbiAgcmVzdWx0LnZhbHVlID0gYS52YWx1ZSArIChiLnZhbHVlIC0gYS52YWx1ZSkgKiB0O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGxpbmVhckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1sxXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuXG4gIHJldHVybiBwb2ludHNbMF0udmFsdWUgKyAocG9pbnRzWzFdLnZhbHVlIC0gcG9pbnRzWzBdLnZhbHVlKSAqIHQ7XG59XG5cbmZ1bmN0aW9uIGJlemllckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1szXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuXG4gIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xuICBjb25zdCBwMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMl0sIHBvaW50c1szXSwgdCk7XG5cbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcbiAgY29uc3QgcDEyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAxMiwgcDIzLCB0KTtcblxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGVCaW5hcnlTZWFyY2goXG4gIHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSxcbiAgdGltZTogbnVtYmVyXG4pOiBudW1iZXIge1xuICBjb25zdCB4X2Vycm9yID0gMC4wMTtcblxuICBjb25zdCB4OiBudW1iZXIgPSB0aW1lO1xuICBsZXQgeDE6IG51bWJlciA9IHBvaW50c1swXS50aW1lO1xuICBsZXQgeDI6IG51bWJlciA9IHBvaW50c1szXS50aW1lO1xuICBsZXQgY3gxOiBudW1iZXIgPSBwb2ludHNbMV0udGltZTtcbiAgbGV0IGN4MjogbnVtYmVyID0gcG9pbnRzWzJdLnRpbWU7XG5cbiAgbGV0IHRhID0gMC4wO1xuICBsZXQgdGIgPSAxLjA7XG4gIGxldCB0ID0gMC4wO1xuICBsZXQgaSA9IDA7XG5cbiAgZm9yIChsZXQgdmFyMzMgPSB0cnVlOyBpIDwgMjA7ICsraSkge1xuICAgIGlmICh4IDwgeDEgKyB4X2Vycm9yKSB7XG4gICAgICB0ID0gdGE7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoeDIgLSB4X2Vycm9yIDwgeCkge1xuICAgICAgdCA9IHRiO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGV0IGNlbnRlcng6IG51bWJlciA9IChjeDEgKyBjeDIpICogMC41O1xuICAgIGN4MSA9ICh4MSArIGN4MSkgKiAwLjU7XG4gICAgY3gyID0gKHgyICsgY3gyKSAqIDAuNTtcbiAgICBjb25zdCBjdHJseDEyOiBudW1iZXIgPSAoY3gxICsgY2VudGVyeCkgKiAwLjU7XG4gICAgY29uc3QgY3RybHgyMTogbnVtYmVyID0gKGN4MiArIGNlbnRlcngpICogMC41O1xuICAgIGNlbnRlcnggPSAoY3RybHgxMiArIGN0cmx4MjEpICogMC41O1xuICAgIGlmICh4IDwgY2VudGVyeCkge1xuICAgICAgdGIgPSAodGEgKyB0YikgKiAwLjU7XG4gICAgICBpZiAoY2VudGVyeCAtIHhfZXJyb3IgPCB4KSB7XG4gICAgICAgIHQgPSB0YjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHgyID0gY2VudGVyeDtcbiAgICAgIGN4MiA9IGN0cmx4MTI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhID0gKHRhICsgdGIpICogMC41O1xuICAgICAgaWYgKHggPCBjZW50ZXJ4ICsgeF9lcnJvcikge1xuICAgICAgICB0ID0gdGE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB4MSA9IGNlbnRlcng7XG4gICAgICBjeDEgPSBjdHJseDIxO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpID09IDIwKSB7XG4gICAgdCA9ICh0YSArIHRiKSAqIDAuNTtcbiAgfVxuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuICBpZiAodCA+IDEuMCkge1xuICAgIHQgPSAxLjA7XG4gIH1cblxuICBjb25zdCBwMDE6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMF0sIHBvaW50c1sxXSwgdCk7XG4gIGNvbnN0IHAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1sxXSwgcG9pbnRzWzJdLCB0KTtcbiAgY29uc3QgcDIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzJdLCBwb2ludHNbM10sIHQpO1xuXG4gIGNvbnN0IHAwMTI6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMDEsIHAxMiwgdCk7XG4gIGNvbnN0IHAxMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMTIsIHAyMywgdCk7XG5cbiAgcmV0dXJuIGxlcnBQb2ludHMocDAxMiwgcDEyMywgdCkudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJlemllckV2YWx1YXRlQ2FyZGFub0ludGVycHJldGF0aW9uKFxuICBwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sXG4gIHRpbWU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgY29uc3QgeDogbnVtYmVyID0gdGltZTtcbiAgY29uc3QgeDE6IG51bWJlciA9IHBvaW50c1swXS50aW1lO1xuICBjb25zdCB4MjogbnVtYmVyID0gcG9pbnRzWzNdLnRpbWU7XG4gIGNvbnN0IGN4MTogbnVtYmVyID0gcG9pbnRzWzFdLnRpbWU7XG4gIGNvbnN0IGN4MjogbnVtYmVyID0gcG9pbnRzWzJdLnRpbWU7XG5cbiAgY29uc3QgYTogbnVtYmVyID0geDIgLSAzLjAgKiBjeDIgKyAzLjAgKiBjeDEgLSB4MTtcbiAgY29uc3QgYjogbnVtYmVyID0gMy4wICogY3gyIC0gNi4wICogY3gxICsgMy4wICogeDE7XG4gIGNvbnN0IGM6IG51bWJlciA9IDMuMCAqIGN4MSAtIDMuMCAqIHgxO1xuICBjb25zdCBkOiBudW1iZXIgPSB4MSAtIHg7XG5cbiAgY29uc3QgdDogbnVtYmVyID0gQ3ViaXNtTWF0aC5jYXJkYW5vQWxnb3JpdGhtRm9yQmV6aWVyKGEsIGIsIGMsIGQpO1xuXG4gIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xuICBjb25zdCBwMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMl0sIHBvaW50c1szXSwgdCk7XG5cbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcbiAgY29uc3QgcDEyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAxMiwgcDIzLCB0KTtcblxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gc3RlcHBlZEV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIHBvaW50c1swXS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZShcbiAgcG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLFxuICB0aW1lOiBudW1iZXJcbik6IG51bWJlciB7XG4gIHJldHVybiBwb2ludHNbMV0udmFsdWU7XG59XG5cbmZ1bmN0aW9uIGV2YWx1YXRlQ3VydmUoXG4gIG1vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGEsXG4gIGluZGV4OiBudW1iZXIsXG4gIHRpbWU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgLy8gRmluZCBzZWdtZW50IHRvIGV2YWx1YXRlLlxuICBjb25zdCBjdXJ2ZTogQ3ViaXNtTW90aW9uQ3VydmUgPSBtb3Rpb25EYXRhLmN1cnZlcy5hdChpbmRleCk7XG5cbiAgbGV0IHRhcmdldCA9IC0xO1xuICBjb25zdCB0b3RhbFNlZ21lbnRDb3VudDogbnVtYmVyID0gY3VydmUuYmFzZVNlZ21lbnRJbmRleCArIGN1cnZlLnNlZ21lbnRDb3VudDtcbiAgbGV0IHBvaW50UG9zaXRpb24gPSAwO1xuICBmb3IgKGxldCBpOiBudW1iZXIgPSBjdXJ2ZS5iYXNlU2VnbWVudEluZGV4OyBpIDwgdG90YWxTZWdtZW50Q291bnQ7ICsraSkge1xuICAgIC8vIEdldCBmaXJzdCBwb2ludCBvZiBuZXh0IHNlZ21lbnQuXG4gICAgcG9pbnRQb3NpdGlvbiA9XG4gICAgICBtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLmJhc2VQb2ludEluZGV4ICtcbiAgICAgIChtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLnNlZ21lbnRUeXBlID09XG4gICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXJcbiAgICAgICAgPyAzXG4gICAgICAgIDogMSk7XG5cbiAgICAvLyBCcmVhayBpZiB0aW1lIGxpZXMgd2l0aGluIGN1cnJlbnQgc2VnbWVudC5cbiAgICBpZiAobW90aW9uRGF0YS5wb2ludHMuYXQocG9pbnRQb3NpdGlvbikudGltZSA+IHRpbWUpIHtcbiAgICAgIHRhcmdldCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAodGFyZ2V0ID09IC0xKSB7XG4gICAgcmV0dXJuIG1vdGlvbkRhdGEucG9pbnRzLmF0KHBvaW50UG9zaXRpb24pLnZhbHVlO1xuICB9XG5cbiAgY29uc3Qgc2VnbWVudDogQ3ViaXNtTW90aW9uU2VnbWVudCA9IG1vdGlvbkRhdGEuc2VnbWVudHMuYXQodGFyZ2V0KTtcblxuICByZXR1cm4gc2VnbWVudC5ldmFsdWF0ZShtb3Rpb25EYXRhLnBvaW50cy5nZXQoc2VnbWVudC5iYXNlUG9pbnRJbmRleCksIHRpbWUpO1xufVxuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OCr+ODqeOCuVxuICpcbiAqIOODouODvOOCt+ODp+ODs+OBruOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvbiB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyPzogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xuICApOiBDdWJpc21Nb3Rpb24ge1xuICAgIGNvbnN0IHJldCA9IG5ldyBDdWJpc21Nb3Rpb24oKTtcblxuICAgIHJldC5wYXJzZShidWZmZXIsIHNpemUpO1xuICAgIHJldC5fc291cmNlRnJhbWVSYXRlID0gcmV0Ll9tb3Rpb25EYXRhLmZwcztcbiAgICByZXQuX2xvb3BEdXJhdGlvblNlY29uZHMgPSByZXQuX21vdGlvbkRhdGEuZHVyYXRpb247XG4gICAgcmV0Ll9vbkZpbmlzaGVkTW90aW9uID0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI7XG5cbiAgICAvLyBOT1RFOiBFZGl0b3Ljgafjga/jg6vjg7zjg5fjgYLjgorjga7jg6Ljg7zjgrfjg6fjg7Pmm7jjgY3lh7rjgZfjga/pnZ7lr77lv5xcbiAgICAvLyByZXQtPl9sb29wID0gKHJldC0+X21vdGlvbkRhdGEtPkxvb3AgPiAwKTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsOOBruWun+ihjFxuICAgKiBAcGFyYW0gbW9kZWwgICAgICAgICAgICAg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMgICDnj77lnKjjga7mmYLliLtb56eSXVxuICAgKiBAcGFyYW0gZmFkZVdlaWdodCAgICAgICAg44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5ICBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgIGZhZGVXZWlnaHQ6IG51bWJlcixcbiAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9XG4gICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChFZmZlY3ROYW1lRXllQmxpbmspO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID09IG51bGwpIHtcbiAgICAgIHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPVxuICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoRWZmZWN0TmFtZUxpcFN5bmMpO1xuICAgIH1cblxuICAgIGxldCB0aW1lT2Zmc2V0U2Vjb25kczogbnVtYmVyID1cbiAgICAgIHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0U3RhcnRUaW1lKCk7XG5cbiAgICBpZiAodGltZU9mZnNldFNlY29uZHMgPCAwLjApIHtcbiAgICAgIHRpbWVPZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDjgqjjg6njg7zlm57pgb9cbiAgICB9XG5cbiAgICBsZXQgbGlwU3luY1ZhbHVlOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIGxldCBleWVCbGlua1ZhbHVlOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgLy/jgb7jgbDjgZ/jgY3jgIHjg6rjg4Pjg5fjgrfjg7Pjgq/jga7jgYbjgaHjg6Ljg7zjgrfjg6fjg7Pjga7pgannlKjjgpLmpJzlh7rjgZnjgovjgZ/jgoHjga7jg5Pjg4Pjg4jvvIhtYXhGbGFnQ291bnTlgIvjgb7jgadcbiAgICBjb25zdCBNYXhUYXJnZXRTaXplID0gNjQ7XG4gICAgbGV0IGxpcFN5bmNGbGFncyA9IDA7XG4gICAgbGV0IGV5ZUJsaW5rRmxhZ3MgPSAwO1xuXG4gICAgLy/nnqzjgY3jgIHjg6rjg4Pjg5fjgrfjg7Pjgq/jga7jgr/jg7zjgrLjg4Pjg4jmlbDjgYzkuIrpmZDjgpLotoXjgYjjgabjgYTjgovloLTlkIhcbiAgICBpZiAodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSkge1xuICAgICAgQ3ViaXNtTG9nRGVidWcoXG4gICAgICAgICd0b28gbWFueSBleWUgYmxpbmsgdGFyZ2V0cyA6IHswfScsXG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSkge1xuICAgICAgQ3ViaXNtTG9nRGVidWcoXG4gICAgICAgICd0b28gbWFueSBsaXAgc3luYyB0YXJnZXRzIDogezB9JyxcbiAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdG1wRmFkZUluOiBudW1iZXIgPVxuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA8PSAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xuICAgICAgICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzXG4gICAgICAgICAgKTtcblxuICAgIGNvbnN0IHRtcEZhZGVPdXQ6IG51bWJlciA9XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA8PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHNcbiAgICAgICAgICApO1xuICAgIGxldCB2YWx1ZTogbnVtYmVyO1xuICAgIGxldCBjOiBudW1iZXIsIHBhcmFtZXRlckluZGV4OiBudW1iZXI7XG5cbiAgICAvLyAnUmVwZWF0JyB0aW1lIGFzIG5lY2Vzc2FyeS5cbiAgICBsZXQgdGltZTogbnVtYmVyID0gdGltZU9mZnNldFNlY29uZHM7XG5cbiAgICBpZiAodGhpcy5faXNMb29wKSB7XG4gICAgICB3aGlsZSAodGltZSA+IHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb24pIHtcbiAgICAgICAgdGltZSAtPSB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgLy8gRXZhbHVhdGUgbW9kZWwgY3VydmVzLlxuICAgIGZvciAoXG4gICAgICBjID0gMDtcbiAgICAgIGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiZcbiAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XG4gICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgICAgKytjXG4gICAgKSB7XG4gICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgY2FsbCBoYW5kbGVyLlxuICAgICAgdmFsdWUgPSBldmFsdWF0ZUN1cnZlKHRoaXMuX21vdGlvbkRhdGEsIGMsIHRpbWUpO1xuXG4gICAgICBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rKSB7XG4gICAgICAgIGV5ZUJsaW5rVmFsdWUgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMpIHtcbiAgICAgICAgbGlwU3luY1ZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtZXRlck1vdGlvbkN1cnZlQ291bnQgPSAwO1xuXG4gICAgZm9yIChcbiAgICAgIDtcbiAgICAgIGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiZcbiAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XG4gICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcbiAgICAgICsrY1xuICAgICkge1xuICAgICAgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCsrO1xuXG4gICAgICAvLyBGaW5kIHBhcmFtZXRlciBpbmRleC5cbiAgICAgIHBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VydmVzLmF0KGMpLmlkKTtcblxuICAgICAgLy8gU2tpcCBjdXJ2ZSBldmFsdWF0aW9uIGlmIG5vIHZhbHVlIGluIHNpbmsuXG4gICAgICBpZiAocGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPVxuICAgICAgICBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpO1xuXG4gICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgIGlmIChleWVCbGlua1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgaSA8IHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICArK2lcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpID09IGN1cnZlcy5hdChjKS5pZCkge1xuICAgICAgICAgICAgdmFsdWUgKj0gZXllQmxpbmtWYWx1ZTtcbiAgICAgICAgICAgIGV5ZUJsaW5rRmxhZ3MgfD0gMSA8PCBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsaXBTeW5jVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICBpIDwgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XG4gICAgICAgICAgKytpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmF0KGkpID09IGN1cnZlcy5hdChjKS5pZCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gbGlwU3luY1ZhbHVlO1xuICAgICAgICAgICAgbGlwU3luY0ZsYWdzIHw9IDEgPDwgaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgdjogbnVtYmVyO1xuXG4gICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgZTjgajjga7jg5Xjgqfjg7zjg4lcbiAgICAgIGlmIChjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA8IDAuMCAmJiBjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWUgPCAwLjApIHtcbiAgICAgICAgLy8g44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44KS6YGp55SoXG4gICAgICAgIHYgPSBzb3VyY2VWYWx1ZSArICh2YWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgabjg5Xjgqfjg7zjg4njgqTjg7PjgYvjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgYzoqK3lrprjgZfjgabjgYLjgovloLTlkIjjga/jgZ3jgaHjgonjgpLpgannlKhcbiAgICAgICAgbGV0IGZpbjogbnVtYmVyO1xuICAgICAgICBsZXQgZm91dDogbnVtYmVyO1xuXG4gICAgICAgIGlmIChjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA8IDAuMCkge1xuICAgICAgICAgIGZpbiA9IHRtcEZhZGVJbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaW4gPVxuICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPT0gMC4wXG4gICAgICAgICAgICAgID8gMS4wXG4gICAgICAgICAgICAgIDogQ3ViaXNtTWF0aC5nZXRFYXNpbmdTaW5lKFxuICAgICAgICAgICAgICAgICAgKHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0RmFkZUluU3RhcnRUaW1lKCkpIC9cbiAgICAgICAgICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVJblRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA8IDAuMCkge1xuICAgICAgICAgIGZvdXQgPSB0bXBGYWRlT3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvdXQgPVxuICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lID09IDAuMCB8fFxuICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgICAgICAgPyAxLjBcbiAgICAgICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhcmFtV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQgKiBmaW4gKiBmb3V0O1xuXG4gICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBlOOBqOOBruODleOCp+ODvOODieOCkumBqeeUqFxuICAgICAgICB2ID0gc291cmNlVmFsdWUgKyAodmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBwYXJhbVdlaWdodDtcbiAgICAgIH1cblxuICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4LCB2LCAxLjApO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmIChleWVCbGlua1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgaSA8IHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICArK2lcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBp+OBruS4iuabuOOBjeOBjOOBguOBo+OBn+aZguOBq+OBr+OBvuOBsOOBn+OBjeOBr+mBqeeUqOOBl+OBquOBhFxuICAgICAgICAgIGlmICgoZXllQmxpbmtGbGFncyA+PiBpKSAmIDB4MDEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHY6IG51bWJlciA9XG4gICAgICAgICAgICBzb3VyY2VWYWx1ZSArIChleWVCbGlua1ZhbHVlIC0gc291cmNlVmFsdWUpICogZmFkZVdlaWdodDtcblxuICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5hdChpKSwgdik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxpcFN5bmNWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgIGkgPCB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICArK2lcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gn44Gu5LiK5pu444GN44GM44GC44Gj44Gf5pmC44Gr44Gv44Oq44OD44OX44K344Oz44Kv44Gv6YGp55So44GX44Gq44GEXG4gICAgICAgICAgaWYgKChsaXBTeW5jRmxhZ3MgPj4gaSkgJiAweDAxKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB2OiBudW1iZXIgPVxuICAgICAgICAgICAgc291cmNlVmFsdWUgKyAobGlwU3luY1ZhbHVlIC0gc291cmNlVmFsdWUpICogZmFkZVdlaWdodDtcblxuICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmF0KGkpLCB2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoXG4gICAgICA7XG4gICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXG4gICAgICBjdXJ2ZXMuYXQoYykudHlwZSA9PVxuICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eTtcbiAgICAgICsrY1xuICAgICkge1xuICAgICAgLy8gRmluZCBwYXJhbWV0ZXIgaW5kZXguXG4gICAgICBwYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KGN1cnZlcy5hdChjKS5pZCk7XG5cbiAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxuICAgICAgaWYgKHBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCwgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0aW1lT2Zmc2V0U2Vjb25kcyA+PSB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uKSB7XG4gICAgICBpZiAodGhpcy5faXNMb29wKSB7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0U3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7IC8vIOacgOWIneOBrueKtuaFi+OBuFxuICAgICAgICBpZiAodGhpcy5faXNMb29wRmFkZUluKSB7XG4gICAgICAgICAgLy8g44Or44O844OX5YaF44Gn44Or44O844OX55So44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544Gu5pmC44Gv44CB44OV44Kn44O844OJ44Kk44Oz6Kit5a6a44GX55u044GXXG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRGYWRlSW5TdGFydFRpbWUodXNlclRpbWVTZWNvbmRzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX29uRmluaXNoZWRNb3Rpb24pIHtcbiAgICAgICAgICB0aGlzLl9vbkZpbmlzaGVkTW90aW9uKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRJc0ZpbmlzaGVkKHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9sYXN0V2VpZ2h0ID0gZmFkZVdlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg5fmg4XloLHjga7oqK3lrppcbiAgICogQHBhcmFtIGxvb3Ag44Or44O844OX5oOF5aCxXG4gICAqL1xuICBwdWJsaWMgc2V0SXNMb29wKGxvb3A6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9pc0xvb3AgPSBsb29wO1xuICB9XG5cbiAgLyoqXG4gICAqIOODq+ODvOODl+aDheWgseOBruWPluW+l1xuICAgKiBAcmV0dXJuIHRydWUg44Or44O844OX44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Or44O844OX44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNMb29wKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0xvb3A7XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OX5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5oOF5aCx44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBsb29wRmFkZUluICDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLFcbiAgICovXG4gIHB1YmxpYyBzZXRJc0xvb3BGYWRlSW4obG9vcEZhZGVJbjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzTG9vcEZhZGVJbiA9IGxvb3BGYWRlSW47XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OX5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5oOF5aCx44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4gIHRydWUgICAg44GZ44KLXG4gICAqIEByZXR1cm4gIGZhbHNlICAg44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNMb29wRmFkZUluKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0xvb3BGYWRlSW47XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44KS5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faXNMb29wID8gLTEuMCA6IHRoaXMuX2xvb3BEdXJhdGlvblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Or44O844OX5pmC44Gu6ZW344GV44KS5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aZguOBrumVt+OBlVvnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xvb3BEdXJhdGlvblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgICAg44OR44Op44Oh44O844K/SURcbiAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlckZhZGVJblRpbWUoXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgIHZhbHVlOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XG4gICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgIGN1cnZlcy5hdChpKS5mYWRlSW5UaW1lID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgICAg44OR44Op44Oh44O844K/SURcbiAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlckZhZGVPdXRUaW1lKFxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcbiAgICB2YWx1ZTogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xuICAgICAgICBjdXJ2ZXMuYXQoaSkuZmFkZU91dFRpbWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqTjg7Pjga7mmYLplpPjga7lj5blvpdcbiAgICogQHBhcmFtICAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcmV0dXJuICAg44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJGYWRlSW5UaW1lKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XG4gICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgIHJldHVybiBjdXJ2ZXMuYXQoaSkuZmFkZUluVGltZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44KS5Y+W5b6XXG4gICAqXG4gICAqIEBwYXJhbSAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcmV0dXJuICAg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJGYWRlT3V0VGltZShwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xuICAgICAgICByZXR1cm4gY3VydmVzLmF0KGkpLmZhZGVPdXRUaW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiDoh6rli5Xjgqjjg5Xjgqfjgq/jg4jjgYzjgYvjgYvjgaPjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr9JROODquOCueODiOOBruioreWumlxuICAgKiBAcGFyYW0gZXllQmxpbmtQYXJhbWV0ZXJJZHMgICAg6Ieq5YuV44G+44Gw44Gf44GN44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcbiAgICogQHBhcmFtIGxpcFN5bmNQYXJhbWV0ZXJJZHMgICAgIOODquODg+ODl+OCt+ODs+OCr+OBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgc2V0RWZmZWN0SWRzKFxuICAgIGV5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+LFxuICAgIGxpcFN5bmNQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT5cbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMgPSBleWVCbGlua1BhcmFtZXRlcklkcztcbiAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzID0gbGlwU3luY1BhcmFtZXRlcklkcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZUZyYW1lUmF0ZSA9IDMwLjA7XG4gICAgdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5faXNMb29wID0gZmFsc2U7IC8vIHRydWXjgYvjgokgZmFsc2Ug44G444OH44OV44Kp44Or44OI44KS5aSJ5pu0XG4gICAgdGhpcy5faXNMb29wRmFkZUluID0gdHJ1ZTsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44KwXG4gICAgdGhpcy5fbGFzdFdlaWdodCA9IDAuMDtcbiAgICB0aGlzLl9tb3Rpb25EYXRhID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYyA9IG51bGw7XG4gICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMgPSBudWxsO1xuICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fbW90aW9uRGF0YSA9IHZvaWQgMDtcbiAgICB0aGlzLl9tb3Rpb25EYXRhID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBtb3Rpb24zLmpzb27jgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIG1vdGlvbkpzb24gIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgcGFyc2UobW90aW9uSnNvbjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX21vdGlvbkRhdGEgPSBuZXcgQ3ViaXNtTW90aW9uRGF0YSgpO1xuXG4gICAgbGV0IGpzb246IEN1YmlzbU1vdGlvbkpzb24gPSBuZXcgQ3ViaXNtTW90aW9uSnNvbihtb3Rpb25Kc29uLCBzaXplKTtcblxuICAgIHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb24gPSBqc29uLmdldE1vdGlvbkR1cmF0aW9uKCk7XG4gICAgdGhpcy5fbW90aW9uRGF0YS5sb29wID0ganNvbi5pc01vdGlvbkxvb3AoKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgPSBqc29uLmdldE1vdGlvbkN1cnZlQ291bnQoKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmZwcyA9IGpzb24uZ2V0TW90aW9uRnBzKCk7XG4gICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50ID0ganNvbi5nZXRFdmVudENvdW50KCk7XG5cbiAgICBjb25zdCBhcmVCZXppZXJzUmVzdHJ1Y3RlZDogYm9vbGVhbiA9IGpzb24uZ2V0RXZhbHVhdGlvbk9wdGlvbkZsYWcoXG4gICAgICBFdmFsdWF0aW9uT3B0aW9uRmxhZy5FdmFsdWF0aW9uT3B0aW9uRmxhZ19BcmVCZXppZXJzUmlzdHJpY3RlZFxuICAgICk7XG5cbiAgICBpZiAoanNvbi5pc0V4aXN0TW90aW9uRmFkZUluVGltZSgpKSB7XG4gICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID1cbiAgICAgICAganNvbi5nZXRNb3Rpb25GYWRlSW5UaW1lKCkgPCAwLjAgPyAxLjAgOiBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IDEuMDtcbiAgICB9XG5cbiAgICBpZiAoanNvbi5pc0V4aXN0TW90aW9uRmFkZU91dFRpbWUoKSkge1xuICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPVxuICAgICAgICBqc29uLmdldE1vdGlvbkZhZGVPdXRUaW1lKCkgPCAwLjAgPyAxLjAgOiBqc29uLmdldE1vdGlvbkZhZGVPdXRUaW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID0gMS4wO1xuICAgIH1cblxuICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLnVwZGF0ZVNpemUoXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQsXG4gICAgICBDdWJpc21Nb3Rpb25DdXJ2ZSxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMudXBkYXRlU2l6ZShcbiAgICAgIGpzb24uZ2V0TW90aW9uVG90YWxTZWdtZW50Q291bnQoKSxcbiAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnQsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQoKSxcbiAgICAgIEN1YmlzbU1vdGlvblBvaW50LFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMudXBkYXRlU2l6ZShcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudCxcbiAgICAgIEN1YmlzbU1vdGlvbkV2ZW50LFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICBsZXQgdG90YWxQb2ludENvdW50ID0gMDtcbiAgICBsZXQgdG90YWxTZWdtZW50Q291bnQgPSAwO1xuXG4gICAgLy8gQ3VydmVzXG4gICAgZm9yIChcbiAgICAgIGxldCBjdXJ2ZUNvdW50ID0gMDtcbiAgICAgIGN1cnZlQ291bnQgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7XG4gICAgICArK2N1cnZlQ291bnRcbiAgICApIHtcbiAgICAgIGlmIChqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVNb2RlbCkge1xuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cbiAgICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbDtcbiAgICAgIH0gZWxzZSBpZiAoanNvbi5nZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUNvdW50KSA9PSBUYXJnZXROYW1lUGFyYW1ldGVyKSB7XG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPVxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZVBhcnRPcGFjaXR5XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkudHlwZSA9XG4gICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFydE9wYWNpdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDdWJpc21Mb2dXYXJuaW5nKFxuICAgICAgICAgICdXYXJuaW5nIDogVW5hYmxlIHRvIGdldCBzZWdtZW50IHR5cGUgZnJvbSBDdXJ2ZSEgVGhlIG51bWJlciBvZiBcIkN1cnZlQ291bnRcIiBtYXkgYmUgaW5jb3JyZWN0ISdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuaWQgPVxuICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlSWQoY3VydmVDb3VudCk7XG5cbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLmJhc2VTZWdtZW50SW5kZXggPVxuICAgICAgICB0b3RhbFNlZ21lbnRDb3VudDtcblxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuZmFkZUluVGltZSA9XG4gICAgICAgIGpzb24uaXNFeGlzdE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUNvdW50KVxuICAgICAgICAgID8ganNvbi5nZXRNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVDb3VudClcbiAgICAgICAgICA6IC0xLjA7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5mYWRlT3V0VGltZSA9XG4gICAgICAgIGpzb24uaXNFeGlzdE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVDb3VudClcbiAgICAgICAgICA/IGpzb24uZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUNvdW50KVxuICAgICAgICAgIDogLTEuMDtcblxuICAgICAgLy8gU2VnbWVudHNcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzZWdtZW50UG9zaXRpb24gPSAwO1xuICAgICAgICBzZWdtZW50UG9zaXRpb24gPCBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudENvdW50KGN1cnZlQ291bnQpO1xuXG4gICAgICApIHtcbiAgICAgICAgaWYgKHNlZ21lbnRQb3NpdGlvbiA9PSAwKSB7XG4gICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuYmFzZVBvaW50SW5kZXggPVxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50O1xuXG4gICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS50aW1lID1cbiAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbik7XG4gICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS52YWx1ZSA9XG4gICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAxKTtcblxuICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xuICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmJhc2VQb2ludEluZGV4ID1cbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZWdtZW50OiBudW1iZXIgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICBjdXJ2ZUNvdW50LFxuICAgICAgICAgIHNlZ21lbnRQb3NpdGlvblxuICAgICAgICApO1xuICAgICAgICBzd2l0Y2ggKHNlZ21lbnQpIHtcbiAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhcjoge1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXI7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5ldmFsdWF0ZSA9XG4gICAgICAgICAgICAgIGxpbmVhckV2YWx1YXRlO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnRpbWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAxKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudmFsdWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAyKTtcblxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyOiB7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllcjtcblxuICAgICAgICAgICAgaWYgKGFyZUJlemllcnNSZXN0cnVjdGVkIHx8IFVzZU9sZEJlemllcnNDdXJ2ZU1vdGlvbikge1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5ldmFsdWF0ZSA9XG4gICAgICAgICAgICAgICAgYmV6aWVyRXZhbHVhdGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5ldmFsdWF0ZSA9XG4gICAgICAgICAgICAgICAgYmV6aWVyRXZhbHVhdGVDYXJkYW5vSW50ZXJwcmV0YXRpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudGltZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDEpO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS52YWx1ZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDIpO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQgKyAxKS50aW1lID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMyk7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQgKyAxKS52YWx1ZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDQpO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQgKyAyKS50aW1lID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgNSk7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQgKyAyKS52YWx1ZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDYpO1xuXG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMztcbiAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSA3O1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX1N0ZXBwZWQ6IHtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLnNlZ21lbnRUeXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZDtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID1cbiAgICAgICAgICAgICAgc3RlcHBlZEV2YWx1YXRlO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnRpbWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAxKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudmFsdWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAyKTtcblxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZDoge1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZDtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID1cbiAgICAgICAgICAgICAgaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZTtcblxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS50aW1lID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMSk7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnZhbHVlID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMik7XG5cbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xuICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDM7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBDU01fQVNTRVJUKDApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgKyt0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5zZWdtZW50Q291bnQ7XG4gICAgICAgICsrdG90YWxTZWdtZW50Q291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgIGxldCB1c2VyZGF0YWNvdW50ID0gMDtcbiAgICAgIHVzZXJkYXRhY291bnQgPCBqc29uLmdldEV2ZW50Q291bnQoKTtcbiAgICAgICsrdXNlcmRhdGFjb3VudFxuICAgICkge1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodXNlcmRhdGFjb3VudCkuZmlyZVRpbWUgPVxuICAgICAgICBqc29uLmdldEV2ZW50VGltZSh1c2VyZGF0YWNvdW50KTtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHVzZXJkYXRhY291bnQpLnZhbHVlID1cbiAgICAgICAganNvbi5nZXRFdmVudFZhbHVlKHVzZXJkYXRhY291bnQpO1xuICAgIH1cblxuICAgIGpzb24ucmVsZWFzZSgpO1xuICAgIGpzb24gPSB2b2lkIDA7XG4gICAganNvbiA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/5pu05pawXG4gICAqXG4gICAqIOOCpOODmeODs+ODiOeZuueBq+OBruODgeOCp+ODg+OCr+OAglxuICAgKiDlhaXlipvjgZnjgovmmYLplpPjga/lkbzjgbDjgozjgovjg6Ljg7zjgrfjg6fjg7Pjgr/jgqTjg5/jg7PjgrDjgpLvvJDjgajjgZfjgZ/np5LmlbDjgafooYzjgYbjgIJcbiAgICpcbiAgICogQHBhcmFtIGJlZm9yZUNoZWNrVGltZVNlY29uZHMgICDliY3lm57jga7jgqTjg5njg7Pjg4jjg4Hjgqfjg4Pjgq/mmYLplpNb56eSXVxuICAgKiBAcGFyYW0gbW90aW9uVGltZVNlY29uZHMgICAgICAgIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmlyZWRFdmVudChcbiAgICBiZWZvcmVDaGVja1RpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgbW90aW9uVGltZVNlY29uZHM6IG51bWJlclxuICApOiBjc21WZWN0b3I8Y3NtU3RyaW5nPiB7XG4gICAgdGhpcy5fZmlyZWRFdmVudFZhbHVlcy51cGRhdGVTaXplKDApO1xuXG4gICAgLy8g44Kk44OZ44Oz44OI44Gu55m654Gr44OB44Kn44OD44KvXG4gICAgZm9yIChsZXQgdSA9IDA7IHUgPCB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50Q291bnQ7ICsrdSkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS5maXJlVGltZSA+IGJlZm9yZUNoZWNrVGltZVNlY29uZHMgJiZcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodSkuZmlyZVRpbWUgPD0gbW90aW9uVGltZVNlY29uZHNcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzLnB1c2hCYWNrKFxuICAgICAgICAgIG5ldyBjc21TdHJpbmcodGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodSkudmFsdWUucylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmlyZWRFdmVudFZhbHVlcztcbiAgfVxuXG4gIHB1YmxpYyBfc291cmNlRnJhbWVSYXRlOiBudW1iZXI7IC8vIOODreODvOODieOBl+OBn+ODleOCoeOCpOODq+OBrkZQU+OAguiomOi/sOOBjOeEoeOBkeOCjOOBsOODh+ODleOCqeODq+ODiOWApDE1ZnBz44Go44Gq44KLXG4gIHB1YmxpYyBfbG9vcER1cmF0aW9uU2Vjb25kczogbnVtYmVyOyAvLyBtdG7jg5XjgqHjgqTjg6vjgaflrprnvqnjgZXjgozjgovkuIDpgKPjga7jg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVcbiAgcHVibGljIF9pc0xvb3A6IGJvb2xlYW47IC8vIOODq+ODvOODl+OBmeOCi+OBiz9cbiAgcHVibGljIF9pc0xvb3BGYWRlSW46IGJvb2xlYW47IC8vIOODq+ODvOODl+aZguOBq+ODleOCp+ODvOODieOCpOODs+OBjOacieWKueOBi+OBqeOBhuOBi+OBruODleODqeOCsOOAguWIneacn+WApOOBp+OBr+acieWKueOAglxuICBwdWJsaWMgX2xhc3RXZWlnaHQ6IG51bWJlcjsgLy8g5pyA5b6M44Gr6Kit5a6a44GV44KM44Gf6YeN44G/XG5cbiAgcHVibGljIF9tb3Rpb25EYXRhOiBDdWJpc21Nb3Rpb25EYXRhOyAvLyDlrp/pmpvjga7jg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/mnKzkvZNcblxuICBwdWJsaWMgX2V5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDoh6rli5Xjgb7jgbDjgZ/jgY3jgpLpgannlKjjgZnjgovjg5Hjg6njg6Hjg7zjgr9JROODj+ODs+ODieODq+OBruODquOCueODiOOAgiAg44Oi44OH44Or77yI44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw77yJ44Go44OR44Op44Oh44O844K/44KS5a++5b+c5LuY44GR44KL44CCXG4gIHB1YmxpYyBfbGlwU3luY1BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g44Oq44OD44OX44K344Oz44Kv44KS6YGp55So44GZ44KL44OR44Op44Oh44O844K/SUTjg4/jg7Pjg4njg6vjga7jg6rjgrnjg4jjgIIgIOODouODh+ODq++8iOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsO+8ieOBqOODkeODqeODoeODvOOCv+OCkuWvvuW/nOS7mOOBkeOCi+OAglxuXG4gIHB1YmxpYyBfbW9kZWxDdXJ2ZUlkRXllQmxpbms6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6Ljg4fjg6vjgYzmjIHjgaToh6rli5Xjgb7jgbDjgZ/jgY3nlKjjg5Hjg6njg6Hjg7zjgr9JROOBruODj+ODs+ODieODq+OAgiAg44Oi44OH44Or44Go44Oi44O844K344On44Oz44KS5a++5b+c5LuY44GR44KL44CCXG4gIHB1YmxpYyBfbW9kZWxDdXJ2ZUlkTGlwU3luYzogQ3ViaXNtSWRIYW5kbGU7IC8vIOODouODh+ODq+OBjOaMgeOBpOODquODg+ODl+OCt+ODs+OCr+eUqOODkeODqeODoeODvOOCv0lE44Gu44OP44Oz44OJ44Or44CCICDjg6Ljg4fjg6vjgajjg6Ljg7zjgrfjg6fjg7PjgpLlr77lv5zku5jjgZHjgovjgIJcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9uJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb24gPSAkLkN1YmlzbU1vdGlvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uID0gJC5DdWJpc21Nb3Rpb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcblxuLyoqXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu56iu6aGeXG4gKlxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu56iu6aGe44CCXG4gKi9cbmV4cG9ydCBlbnVtIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0IHtcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWwsIC8vIOODouODh+ODq+OBq+WvvuOBl+OBplxuICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJhbWV0ZXIsIC8vIOODkeODqeODoeODvOOCv+OBq+WvvuOBl+OBplxuICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eSwgLy8g44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gr5a++44GX44GmXG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBrueorumhnlxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBrueorumhnuOAglxuICovXG5leHBvcnQgZW51bSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSB7XG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhciA9IDAsIC8vIOODquODi+OColxuICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXIgPSAxLCAvLyDjg5njgrjjgqfmm7Lnt5pcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZCA9IDIsIC8vIOOCueODhuODg+ODl1xuICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZCA9IDMsIC8vIOOCpOODs+ODkOODvOOCueOCueODhuODg+ODl1xufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrlcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblBvaW50IHtcbiAgdGltZSA9IDAuMDsgLy8g5pmC6ZaTW+enkl1cbiAgdmFsdWUgPSAwLjA7IC8vIOWApFxufVxuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruipleS+oemWouaVsFxuICpcbiAqIEBwYXJhbSAgIHBvaW50cyAgICAgIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueODquOCueODiFxuICogQHBhcmFtICAgdGltZSAgICAgICAg6KmV5L6h44GZ44KL5pmC6ZaTW+enkl1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uIHtcbiAgKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4hcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblNlZ21lbnQge1xuICAvKipcbiAgICogQGJyaWVmIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jgIJcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmV2YWx1YXRlID0gbnVsbDtcbiAgICB0aGlzLmJhc2VQb2ludEluZGV4ID0gMDtcbiAgICB0aGlzLnNlZ21lbnRUeXBlID0gMDtcbiAgfVxuXG4gIGV2YWx1YXRlOiBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uOyAvLyDkvb/nlKjjgZnjgovoqZXkvqHplqLmlbBcbiAgYmFzZVBvaW50SW5kZXg6IG51bWJlcjsgLy8g5pyA5Yid44Gu44K744Kw44Oh44Oz44OI44G444Gu44Kk44Oz44OH44OD44Kv44K5XG4gIHNlZ21lbnRUeXBlOiBudW1iZXI7IC8vIOOCu+OCsOODoeODs+ODiOOBrueorumhnlxufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5ZcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkN1cnZlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudHlwZSA9IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgIHRoaXMuc2VnbWVudENvdW50ID0gMDtcbiAgICB0aGlzLmJhc2VTZWdtZW50SW5kZXggPSAwO1xuICAgIHRoaXMuZmFkZUluVGltZSA9IDAuMDtcbiAgICB0aGlzLmZhZGVPdXRUaW1lID0gMC4wO1xuICB9XG5cbiAgdHlwZTogQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQ7IC8vIOOCq+ODvOODluOBrueorumhnlxuICBpZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOOCq+ODvOODluOBrklEXG4gIHNlZ21lbnRDb3VudDogbnVtYmVyOyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbBcbiAgYmFzZVNlZ21lbnRJbmRleDogbnVtYmVyOyAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgZmFkZUluVGltZTogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICBmYWRlT3V0VGltZTogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxufVxuXG4vKipcbiAqIOOCpOODmeODs+ODiOOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uRXZlbnQge1xuICBmaXJlVGltZSA9IDAuMDtcbiAgdmFsdWU6IGNzbVN0cmluZztcbn1cblxuLyoqXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44OH44O844K/XG4gKlxuICog44Oi44O844K344On44Oz44OH44O844K/44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25EYXRhIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZHVyYXRpb24gPSAwLjA7XG4gICAgdGhpcy5sb29wID0gZmFsc2U7XG4gICAgdGhpcy5jdXJ2ZUNvdW50ID0gMDtcbiAgICB0aGlzLmV2ZW50Q291bnQgPSAwO1xuICAgIHRoaXMuZnBzID0gMC4wO1xuXG4gICAgdGhpcy5jdXJ2ZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPigpO1xuICAgIHRoaXMuc2VnbWVudHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblNlZ21lbnQ+KCk7XG4gICAgdGhpcy5wb2ludHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblBvaW50PigpO1xuICAgIHRoaXMuZXZlbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25FdmVudD4oKTtcbiAgfVxuXG4gIGR1cmF0aW9uOiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gIGxvb3A6IGJvb2xlYW47IC8vIOODq+ODvOODl+OBmeOCi+OBi+OBqeOBhuOBi1xuICBjdXJ2ZUNvdW50OiBudW1iZXI7IC8vIOOCq+ODvOODluOBruWAi+aVsFxuICBldmVudENvdW50OiBudW1iZXI7IC8vIFVzZXJEYXRh44Gu5YCL5pWwXG4gIGZwczogbnVtYmVyOyAvLyDjg5Xjg6zjg7zjg6Djg6zjg7zjg4hcbiAgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+OyAvLyDjgqvjg7zjg5bjga7jg6rjgrnjg4hcbiAgc2VnbWVudHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25TZWdtZW50PjsgLy8g44K744Kw44Oh44Oz44OI44Gu44Oq44K544OIXG4gIHBvaW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblBvaW50PjsgLy8g44Od44Kk44Oz44OI44Gu44Oq44K544OIXG4gIGV2ZW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkV2ZW50PjsgLy8g44Kk44OZ44Oz44OI44Gu44Oq44K544OIXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbmludGVybmFsJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25DdXJ2ZSA9ICQuQ3ViaXNtTW90aW9uQ3VydmU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkN1cnZlID0gJC5DdWJpc21Nb3Rpb25DdXJ2ZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0ID0gJC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQgPSAkLkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uRGF0YSA9ICQuQ3ViaXNtTW90aW9uRGF0YTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uRGF0YSA9ICQuQ3ViaXNtTW90aW9uRGF0YTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkV2ZW50ID0gJC5DdWJpc21Nb3Rpb25FdmVudDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uRXZlbnQgPSAkLkN1YmlzbU1vdGlvbkV2ZW50O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uUG9pbnQgPSAkLkN1YmlzbU1vdGlvblBvaW50O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25Qb2ludCA9ICQuQ3ViaXNtTW90aW9uUG9pbnQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25TZWdtZW50ID0gJC5DdWJpc21Nb3Rpb25TZWdtZW50O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25TZWdtZW50ID0gJC5DdWJpc21Nb3Rpb25TZWdtZW50O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSA9ICQuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGU7XG4gIGV4cG9ydCB0eXBlIGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb24gPVxuICAgICQuY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IEN1YmlzbUpzb24sIEpzb25NYXAgfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcblxuLy8gSlNPTiBrZXlzXG5jb25zdCBNZXRhID0gJ01ldGEnO1xuY29uc3QgRHVyYXRpb24gPSAnRHVyYXRpb24nO1xuY29uc3QgTG9vcCA9ICdMb29wJztcbmNvbnN0IEFyZUJlemllcnNSZXN0cmljdGVkID0gJ0FyZUJlemllcnNSZXN0cmljdGVkJztcbmNvbnN0IEN1cnZlQ291bnQgPSAnQ3VydmVDb3VudCc7XG5jb25zdCBGcHMgPSAnRnBzJztcbmNvbnN0IFRvdGFsU2VnbWVudENvdW50ID0gJ1RvdGFsU2VnbWVudENvdW50JztcbmNvbnN0IFRvdGFsUG9pbnRDb3VudCA9ICdUb3RhbFBvaW50Q291bnQnO1xuY29uc3QgQ3VydmVzID0gJ0N1cnZlcyc7XG5jb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcbmNvbnN0IElkID0gJ0lkJztcbmNvbnN0IEZhZGVJblRpbWUgPSAnRmFkZUluVGltZSc7XG5jb25zdCBGYWRlT3V0VGltZSA9ICdGYWRlT3V0VGltZSc7XG5jb25zdCBTZWdtZW50cyA9ICdTZWdtZW50cyc7XG5jb25zdCBVc2VyRGF0YSA9ICdVc2VyRGF0YSc7XG5jb25zdCBVc2VyRGF0YUNvdW50ID0gJ1VzZXJEYXRhQ291bnQnO1xuY29uc3QgVG90YWxVc2VyRGF0YVNpemUgPSAnVG90YWxVc2VyRGF0YVNpemUnO1xuY29uc3QgVGltZSA9ICdUaW1lJztcbmNvbnN0IFZhbHVlID0gJ1ZhbHVlJztcblxuLyoqXG4gKiBtb3Rpb24zLmpzb27jga7jgrPjg7Pjg4bjg4rjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkpzb24ge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBidWZmZXIgbW90aW9uMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25EdXJhdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRHVyYXRpb24pXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aDheWgseOBruWPluW+l1xuICAgKiBAcmV0dXJuIHRydWUg44Or44O844OX44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Or44O844OX44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNNb3Rpb25Mb29wKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTG9vcClcbiAgICAgIC50b0Jvb2xlYW4oKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRFdmFsdWF0aW9uT3B0aW9uRmxhZyhmbGFnVHlwZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgRXZhbHVhdGlvbk9wdGlvbkZsYWcuRXZhbHVhdGlvbk9wdGlvbkZsYWdfQXJlQmV6aWVyc1Jpc3RyaWN0ZWQgPT0gZmxhZ1R5cGVcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQXJlQmV6aWVyc1Jlc3RyaWN0ZWQpXG4gICAgICAgIC50b0Jvb2xlYW4oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kr44O844OW44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleODrOODvOODoOODrOODvOODiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleODrOODvOODoOODrOODvOODiFtGUFNdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRnBzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGcHMpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCu+OCsOODoeODs+ODiOOBrue3j+WQiOioiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCu+OCsOODoeODs+ODiOOBruWPluW+l1xuICAgKi9cbiAgcHVibGljIGdldE1vdGlvblRvdGFsU2VnbWVudENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFNlZ21lbnRDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruWItuW+oeW6l+OBrue3j+WQiOioiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruWItuW+oeeCueOBrue3j+WQiOioiFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvblRvdGFsUG9pbnRDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxQb2ludENvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5a2Y5ZyoXG4gICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0V4aXN0TW90aW9uRmFkZUluVGltZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgLmlzTnVsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWtmOWcqFxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdE1vdGlvbkZhZGVPdXRUaW1lKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgLmlzTnVsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRmFkZUluVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GYWRlT3V0VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBrueorumhnuOBruWPluW+l1xuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjgqvjg7zjg5bjga7nqK7poZ5cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUYXJnZXQpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44GuSUTjga7lj5blvpdcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Kr44O844OW44GuSURcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUlkKGN1cnZlSW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lrZjlnKhcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0V4aXN0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgIC5pc051bGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7lrZjlnKhcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0V4aXN0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgLmlzTnVsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWPluW+l1xuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7PmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7lj5blvpdcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVTZWdtZW50Q291bnQoY3VydmVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU2VnbWVudHMpXG4gICAgICAuZ2V0VmVjdG9yKClcbiAgICAgIC5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gc2VnbWVudEluZGV4IOOCu+OCsOODoeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOOCu+OCsOODoeODs+ODiOOBruWApFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICBjdXJ2ZUluZGV4OiBudW1iZXIsXG4gICAgc2VnbWVudEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU2VnbWVudHMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHNlZ21lbnRJbmRleClcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0RXZlbnRDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGFDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqICDjgqTjg5njg7Pjg4jjga7nt4/mloflrZfmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDjgqTjg5njg7Pjg4jjga7nt4/mloflrZfmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRUb3RhbEV2ZW50VmFsdWVTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFVzZXJEYXRhU2l6ZSlcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOOBruaZgumWk+OBruWPluW+l1xuICAgKiBAcGFyYW0gdXNlckRhdGFJbmRleCDjgqTjg5njg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjgqTjg5njg7Pjg4jjga7mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldEV2ZW50VGltZSh1c2VyRGF0YUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodXNlckRhdGFJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOOBruWPluW+l1xuICAgKiBAcGFyYW0gdXNlckRhdGFJbmRleCDjgqTjg5njg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjgqTjg5njg7Pjg4jjga7mloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBnZXRFdmVudFZhbHVlKHVzZXJEYXRhSW5kZXg6IG51bWJlcik6IGNzbVN0cmluZyB7XG4gICAgcmV0dXJuIG5ldyBjc21TdHJpbmcoXG4gICAgICB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodXNlckRhdGFJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmFsdWUpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICk7XG4gIH1cblxuICBfanNvbjogQ3ViaXNtSnNvbjsgLy8gbW90aW9uMy5qc29u44Gu44OH44O844K/XG59XG5cbi8qKlxuICogQGJyaWVmIOODmeOCuOOCp+OCq+ODvOODluOBruino+mHiOaWueazleOBruODleODqeOCsOOCv+OCpOODl1xuICovXG5leHBvcnQgZW51bSBFdmFsdWF0aW9uT3B0aW9uRmxhZyB7XG4gIEV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkID0gMCwgLy8vPCDjg5njgrjjgqfjg4/jg7Pjg4njg6vjga7opo/liLbnirbmhYtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9uanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uSnNvbiA9ICQuQ3ViaXNtTW90aW9uSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uSnNvbiA9ICQuQ3ViaXNtTW90aW9uSnNvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQge1xuICBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlLFxuICBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIsXG59IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIZcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbk1hbmFnZXIgZXh0ZW5kcyBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9jdXJyZW50UHJpb3JpdHkgPSAwO1xuICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IDA7XG4gIH1cblxuICAvKipcbiAgICog5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxuICAgKi9cbiAgcHVibGljIGdldEN1cnJlbnRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50UHJpb3JpdHk7XG4gIH1cblxuICAvKipcbiAgICog5LqI57SE5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS5Y+W5b6X44GZ44KL44CCXG4gICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxuICAgKi9cbiAgcHVibGljIGdldFJlc2VydmVQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9yZXNlcnZlUHJpb3JpdHk7XG4gIH1cblxuICAvKipcbiAgICog5LqI57SE5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS6Kit5a6a44GZ44KL44CCXG4gICAqIEBwYXJhbSAgIHZhbCAgICAg5YSq5YWI5bqmXG4gICAqL1xuICBwdWJsaWMgc2V0UmVzZXJ2ZVByaW9yaXR5KHZhbDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIOWEquWFiOW6puOCkuioreWumuOBl+OBpuODouODvOOCt+ODp+ODs+OCkumWi+Wni+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gbW90aW9uICAgICAgICAgIOODouODvOOCt+ODp+ODs1xuICAgKiBAcGFyYW0gYXV0b0RlbGV0ZSAgICAgIOWGjeeUn+OBjOeLqeeMn+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWJiumZpOOBmeOCi+OBquOCiXRydWVcbiAgICogQHBhcmFtIHByaW9yaXR5ICAgICAgICDlhKrlhYjluqZcbiAgICogQHJldHVybiAgICAgICAgICAgICAgICDplovlp4vjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjgpLov5TjgZnjgILlgIvliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/jgYvlkKbjgYvjgpLliKTlrprjgZnjgotJc0ZpbmlzaGVkKCnjga7lvJXmlbDjgafkvb/nlKjjgZnjgovjgILplovlp4vjgafjgY3jgarjgYTmmYLjga/jgIwtMeOAjVxuICAgKi9cbiAgcHVibGljIHN0YXJ0TW90aW9uUHJpb3JpdHkoXG4gICAgbW90aW9uOiBBQ3ViaXNtTW90aW9uLFxuICAgIGF1dG9EZWxldGU6IGJvb2xlYW4sXG4gICAgcHJpb3JpdHk6IG51bWJlclxuICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIHtcbiAgICBpZiAocHJpb3JpdHkgPT0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5KSB7XG4gICAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSAwOyAvLyDkuojntITjgpLop6PpmaRcbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50UHJpb3JpdHkgPSBwcmlvcml0eTsgLy8g5YaN55Sf5Lit44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS6Kit5a6aXG5cbiAgICByZXR1cm4gc3VwZXIuc3RhcnRNb3Rpb24obW90aW9uLCBhdXRvRGVsZXRlLCB0aGlzLl91c2VyVGltZVNlY29uZHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCkuabtOaWsOOBl+OBpuOAgeODouODh+ODq+OBq+ODkeODqeODoeODvOOCv+WApOOCkuWPjeaYoOOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gbW9kZWwgICDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMgICAg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICogQHJldHVybiAgdHJ1ZSAgICDmm7TmlrDjgZXjgozjgabjgYTjgotcbiAgICogQHJldHVybiAgZmFsc2UgICDmm7TmlrDjgZXjgozjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVNb3Rpb24obW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcblxuICAgIGNvbnN0IHVwZGF0ZWQ6IGJvb2xlYW4gPSBzdXBlci5kb1VwZGF0ZU1vdGlvbihtb2RlbCwgdGhpcy5fdXNlclRpbWVTZWNvbmRzKTtcblxuICAgIGlmICh0aGlzLmlzRmluaXNoZWQoKSkge1xuICAgICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gMDsgLy8g5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS6Kej6ZmkXG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZWQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44KS5LqI57SE44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSAgIHByaW9yaXR5ICAgIOWEquWFiOW6plxuICAgKiBAcmV0dXJuICB0cnVlICAgIOS6iOe0hOOBp+OBjeOBn1xuICAgKiBAcmV0dXJuICBmYWxzZSAgIOS6iOe0hOOBp+OBjeOBquOBi+OBo+OBn1xuICAgKi9cbiAgcHVibGljIHJlc2VydmVNb3Rpb24ocHJpb3JpdHk6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIHByaW9yaXR5IDw9IHRoaXMuX3Jlc2VydmVQcmlvcml0eSB8fFxuICAgICAgcHJpb3JpdHkgPD0gdGhpcy5fY3VycmVudFByaW9yaXR5XG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gcHJpb3JpdHk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIF9jdXJyZW50UHJpb3JpdHk6IG51bWJlcjsgLy8g54++5Zyo5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gIF9yZXNlcnZlUHJpb3JpdHk6IG51bWJlcjsgLy8g5YaN55Sf5LqI5a6a44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44CC5YaN55Sf5Lit44GvMOOBq+OBquOCi+OAguODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OCkuWIpeOCueODrOODg+ODieOBp+iqreOBv+i+vOOCgOOBqOOBjeOBruapn+iDveOAglxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb3Rpb25tYW5hZ2VyJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25NYW5hZ2VyID0gJC5DdWJpc21Nb3Rpb25NYW5hZ2VyO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25NYW5hZ2VyID0gJC5DdWJpc21Nb3Rpb25NYW5hZ2VyO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuXG4vKipcbiAqIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+WGjeeUn+OBl+OBpuOBhOOCi+WQhOODouODvOOCt+ODp+ODs+OBrueuoeeQhuOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9hdXRvRGVsZXRlID0gZmFsc2U7XG4gICAgdGhpcy5fbW90aW9uID0gbnVsbDtcbiAgICB0aGlzLl9hdmFpbGFibGUgPSB0cnVlO1xuICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3N0YXJ0VGltZVNlY29uZHMgPSAtMS4wO1xuICAgIHRoaXMuX2ZhZGVJblN0YXJ0VGltZVNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPSAtMS4wO1xuICAgIHRoaXMuX3N0YXRlVGltZVNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fc3RhdGVXZWlnaHQgPSAwLjA7XG4gICAgdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX21vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSB0aGlzO1xuICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX2lzVHJpZ2dlcmVkRmFkZU91dCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2F1dG9EZWxldGUgJiYgdGhpcy5fbW90aW9uKSB7XG4gICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZSh0aGlzLl9tb3Rpb24pOyAvL1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjgajplovlp4vliKTlrprjga7oqK3lrppcbiAgICogQHBhcmFtIGZhZGVPdXRTZWNvbmRzIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0RmFkZU91dChmYWRlT3V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSBmYWRlT3V0U2Vjb25kcztcbiAgICB0aGlzLl9pc1RyaWdnZXJlZEZhZGVPdXQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOOBrumWi+Wni1xuICAgKiBAcGFyYW0gZmFkZU91dFNlY29uZHMg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKi9cbiAgcHVibGljIHN0YXJ0RmFkZU91dChmYWRlT3V0U2Vjb25kczogbnVtYmVyLCB1c2VyVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG5ld0VuZFRpbWVTZWNvbmRzOiBudW1iZXIgPSB1c2VyVGltZVNlY29uZHMgKyBmYWRlT3V0U2Vjb25kcztcbiAgICB0aGlzLl9pc1RyaWdnZXJlZEZhZGVPdXQgPSB0cnVlO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPCAwLjAgfHxcbiAgICAgIG5ld0VuZFRpbWVTZWNvbmRzIDwgdGhpcy5fZW5kVGltZVNlY29uZHNcbiAgICApIHtcbiAgICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gbmV3RW5kVGltZVNlY29uZHM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrue1guS6huOBrueiuuiqjVxuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg44Oi44O844K344On44Oz44GM57WC5LqG44GX44GfXG4gICAqIEByZXR1cm4gZmFsc2Ug57WC5LqG44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNGaW5pc2hlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZmluaXNoZWQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZaL5aeL44Gu56K66KqNXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7PjgYzplovlp4vjgZfjgZ9cbiAgICogQHJldHVybiBmYWxzZSDplovlp4vjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1N0YXJ0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0ZWQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZaL5aeL5pmC5Yi744Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6ZaL5aeL5pmC5Yi7W+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRTdGFydFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRUaW1lU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLvjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIGdldEZhZGVJblN0YXJ0VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mYWRlSW5TdGFydFRpbWVTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu+OBruWPluW+l1xuICAgKi9cbiAgcHVibGljIGdldEVuZFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZW5kVGltZVNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXG4gICAqIEBwYXJhbSBzdGFydFRpbWUg44Oi44O844K344On44Oz44Gu6ZaL5aeL5pmC5Yi7XG4gICAqL1xuICBwdWJsaWMgc2V0U3RhcnRUaW1lKHN0YXJ0VGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhcnRUaW1lU2Vjb25kcyA9IHN0YXJ0VGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLvjga7oqK3lrppcbiAgICogQHBhcmFtIHN0YXJ0VGltZSDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEZhZGVJblN0YXJ0VGltZShzdGFydFRpbWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2ZhZGVJblN0YXJ0VGltZVNlY29uZHMgPSBzdGFydFRpbWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu6Kit5a6aXG4gICAqIEBwYXJhbSBlbmRUaW1lIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0RW5kVGltZShlbmRUaW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA9IGVuZFRpbWU7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu57WC5LqG44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBmIHRydWXjgarjgonjg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuoZcbiAgICovXG4gIHB1YmxpYyBzZXRJc0ZpbmlzaGVkKGY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9maW5pc2hlZCA9IGY7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz6ZaL5aeL44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBmIHRydWXjgarjgonjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4tcbiAgICovXG4gIHB1YmxpYyBzZXRJc1N0YXJ0ZWQoZjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX3N0YXJ0ZWQgPSBmO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruacieWKueaAp+OBrueiuuiqjVxuICAgKiBAcmV0dXJuIHRydWUg44Oi44O844K344On44Oz44Gv5pyJ5Yq5XG4gICAqIEByZXR1cm4gZmFsc2Ug44Oi44O844K344On44Oz44Gv54Sh5Yq5XG4gICAqL1xuICBwdWJsaWMgaXNBdmFpbGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2F2YWlsYWJsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7mnInlirnmgKfjga7oqK3lrppcbiAgICogQHBhcmFtIHYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBr+acieWKuVxuICAgKi9cbiAgcHVibGljIHNldElzQXZhaWxhYmxlKHY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9hdmFpbGFibGUgPSB2O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrueKtuaFi+OBruioreWumlxuICAgKiBAcGFyYW0gdGltZVNlY29uZHMg54++5Zyo5pmC5Yi7W+enkl1cbiAgICogQHBhcmFtIHdlaWdodCDjg6Ljg7zjgrfjg6fjg7PlsL7ph43jgb9cbiAgICovXG4gIHB1YmxpYyBzZXRTdGF0ZSh0aW1lU2Vjb25kczogbnVtYmVyLCB3ZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3N0YXRlVGltZVNlY29uZHMgPSB0aW1lU2Vjb25kcztcbiAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IHdlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7nj77lnKjmmYLliLvjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7nj77lnKjmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIGdldFN0YXRlVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZVRpbWVTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumHjeOBv+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgKi9cbiAgcHVibGljIGdldFN0YXRlV2VpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlV2VpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOW+jOOBq+OCpOODmeODs+ODiOOBrueZuueBq+OCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk+OCkuWPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuIOacgOW+jOOBq+OCpOODmeODs+ODiOOBrueZuueBq+OCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RFdmVudENoZWNrU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmnIDlvozjgavjgqTjg5njg7Pjg4jjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpPjgpLoqK3lrppcbiAgICogQHBhcmFtIGNoZWNrU2Vjb25kcyDmnIDlvozjgavjgqTjg5njg7Pjg4jjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldExhc3RDaGVja0V2ZW50U2Vjb25kcyhjaGVja1NlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2xhc3RFdmVudENoZWNrU2Vjb25kcyA9IGNoZWNrU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jplovlp4vliKTlrprjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jplovlp4vjgZnjgovjgYvjganjgYbjgYtcbiAgICovXG4gIHB1YmxpYyBpc1RyaWdnZXJlZEZhZGVPdXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVHJpZ2dlcmVkRmFkZU91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldEZhZGVPdXRTZWNvbmRzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhZGVPdXRTZWNvbmRzO1xuICB9XG5cbiAgX2F1dG9EZWxldGU6IGJvb2xlYW47IC8vIOiHquWLleWJiumZpFxuICBfbW90aW9uOiBBQ3ViaXNtTW90aW9uOyAvLyDjg6Ljg7zjgrfjg6fjg7NcblxuICBfYXZhaWxhYmxlOiBib29sZWFuOyAvLyDmnInlirnljJbjg5Xjg6njgrBcbiAgX2ZpbmlzaGVkOiBib29sZWFuOyAvLyDntYLkuobjg5Xjg6njgrBcbiAgX3N0YXJ0ZWQ6IGJvb2xlYW47IC8vIOmWi+Wni+ODleODqeOCsFxuICBfc3RhcnRUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/plovlp4vmmYLliLtb56eSXVxuICBfZmFkZUluU3RhcnRUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7Pplovlp4vmmYLliLvvvIjjg6vjg7zjg5fjga7mmYLjga/liJ3lm57jga7jgb/vvIlb56eSXVxuICBfZW5kVGltZVNlY29uZHM6IG51bWJlcjsgLy8g57WC5LqG5LqI5a6a5pmC5Yi7W+enkl1cbiAgX3N0YXRlVGltZVNlY29uZHM6IG51bWJlcjsgLy8g5pmC5Yi744Gu54q25oWLW+enkl1cbiAgX3N0YXRlV2VpZ2h0OiBudW1iZXI7IC8vIOmHjeOBv+OBrueKtuaFi1xuICBfbGFzdEV2ZW50Q2hlY2tTZWNvbmRzOiBudW1iZXI7IC8vIOacgOe1guOBrk1vdGlvbuWBtOOBruODgeOCp+ODg+OCr+OBl+OBn+aZgumWk1xuICBwcml2YXRlIF9mYWRlT3V0U2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpNb56eSXVxuICBwcml2YXRlIF9pc1RyaWdnZXJlZEZhZGVPdXQ6IGJvb2xlYW47IC8vIOODleOCp+ODvOODieOCouOCpuODiOmWi+Wni+ODleODqeOCsFxuXG4gIF9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlOyAvLyDjgqTjg7Pjgrnjgr/jg7PjgrnjgZTjgajjgavkuIDmhI/jga7lgKTjgpLmjIHjgaTorZjliKXnlarlj7dcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9ICQuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9ICQuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24gfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XG5pbXBvcnQgeyBjc21WZWN0b3IsIGl0ZXJhdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5cbi8qKlxuICog44Oi44O844K344On44Oz5YaN55Sf44Gu566h55CGXG4gKlxuICog44Oi44O844K344On44Oz5YaN55Sf44Gu566h55CG55So44Kv44Op44K544CCQ3ViaXNtTW90aW9u44Oi44O844K344On44Oz44Gq44GpQUN1YmlzbU1vdGlvbuOBruOCteODluOCr+ODqeOCueOCkuWGjeeUn+OBmeOCi+OBn+OCgeOBq+S9v+eUqOOBmeOCi+OAglxuICpcbiAqIEBub3RlIOWGjeeUn+S4reOBq+WIpeOBruODouODvOOCt+ODp+ODs+OBjCBTdGFydE1vdGlvbigp44GV44KM44Gf5aC05ZCI44Gv44CB5paw44GX44GE44Oi44O844K344On44Oz44Gr5ruR44KJ44GL44Gr5aSJ5YyW44GX5pen44Oi44O844K344On44Oz44Gv5Lit5pat44GZ44KL44CCXG4gKiAgICAgICDooajmg4XnlKjjg6Ljg7zjgrfjg6fjg7PjgIHkvZPnlKjjg6Ljg7zjgrfjg6fjg7PjgarjganjgpLliIbjgZHjgabjg6Ljg7zjgrfjg6fjg7PljJbjgZfjgZ/loLTlkIjjgarjganjgIFcbiAqICAgICAgIOikh+aVsOOBruODouODvOOCt+ODp+ODs+OCkuWQjOaZguOBq+WGjeeUn+OBleOBm+OCi+WgtOWQiOOBr+OAgeikh+aVsOOBrkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOCpOODs+OCueOCv+ODs+OCueOCkuS9v+eUqOOBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9ldmVudENhbGxCYWNrID0gbnVsbDtcbiAgICB0aGlzLl9ldmVudEN1c3RvbURhdGEgPSBudWxsO1xuICAgIHRoaXMuX21vdGlvbnMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbnMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIGlmICh0aGlzLl9tb3Rpb25zLmF0KGkpKSB7XG4gICAgICAgIHRoaXMuX21vdGlvbnMuYXQoaSkucmVsZWFzZSgpO1xuICAgICAgICB0aGlzLl9tb3Rpb25zLnNldChpLCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9tb3Rpb25zID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7plovlp4tcbiAgICpcbiAgICog5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44KS6ZaL5aeL44GZ44KL44CC5ZCM44GY44K/44Kk44OX44Gu44Oi44O844K344On44Oz44GM5pei44Gr44GC44KL5aC05ZCI44Gv44CB5pei5a2Y44Gu44Oi44O844K344On44Oz44Gr57WC5LqG44OV44Op44Kw44KS56uL44Gm44CB44OV44Kn44O844OJ44Ki44Km44OI44KS6ZaL5aeL44GV44Gb44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSAgIG1vdGlvbiAgICAgICAgICDplovlp4vjgZnjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICogQHBhcmFtICAgYXV0b0RlbGV0ZSAgICAgIOWGjeeUn+OBjOe1guS6huOBl+OBn+ODouODvOOCt+ODp+ODs+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWJiumZpOOBmeOCi+OBquOCiSB0cnVlXG4gICAqIEBwYXJhbSAgIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXG4gICAqL1xuICBwdWJsaWMgc3RhcnRNb3Rpb24oXG4gICAgbW90aW9uOiBBQ3ViaXNtTW90aW9uLFxuICAgIGF1dG9EZWxldGU6IGJvb2xlYW4sXG4gICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXJcbiAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTtcbiAgICB9XG5cbiAgICBsZXQgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG5cbiAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbnMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSB0aGlzLl9tb3Rpb25zLmF0KGkpO1xuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRGYWRlT3V0KG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbi5nZXRGYWRlT3V0VGltZSgpKTsgLy8g44OV44Kn44O844OJ44Ki44Km44OI6Kit5a6aXG4gICAgfVxuXG4gICAgbW90aW9uUXVldWVFbnRyeSA9IG5ldyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5KCk7IC8vIOe1guS6huaZguOBq+egtOajhOOBmeOCi1xuICAgIG1vdGlvblF1ZXVlRW50cnkuX2F1dG9EZWxldGUgPSBhdXRvRGVsZXRlO1xuICAgIG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbiA9IG1vdGlvbjtcblxuICAgIHRoaXMuX21vdGlvbnMucHVzaEJhY2sobW90aW9uUXVldWVFbnRyeSk7XG5cbiAgICByZXR1cm4gbW90aW9uUXVldWVFbnRyeS5fbW90aW9uUXVldWVFbnRyeUhhbmRsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajjgabjga7jg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7norroqo1cbiAgICogQHJldHVybiB0cnVlIOWFqOOBpue1guS6huOBl+OBpuOBhOOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRmluaXNoZWQoKTogYm9vbGVhbiB7XG4gICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxuICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuXG4gICAgKSB7XG4gICAgICBsZXQgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gbW90aW9uUXVldWVFbnRyeS5fbW90aW9uO1xuXG4gICAgICBpZiAobW90aW9uID09IG51bGwpIHtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5yZWxlYXNlKCk7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gLS0tLS0g57WC5LqG5riI44G/44Gu5Yem55CG44GM44GC44KM44Gw5YmK6Zmk44GZ44KLIC0tLS0tLVxuICAgICAgaWYgKCFtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt1xuICAgKiBAcmV0dXJuIHRydWUg5YWo44Gm57WC5LqG44GX44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug57WC5LqG44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNGaW5pc2hlZEJ5SGFuZGxlKFxuICAgIG1vdGlvblF1ZXVlRW50cnlOdW1iZXI6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGVcbiAgKTogYm9vbGVhbiB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuICAgICAgaXRlLmluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBjb25zdCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuX21vdGlvblF1ZXVlRW50cnlIYW5kbGUgPT0gbW90aW9uUXVldWVFbnRyeU51bWJlciAmJlxuICAgICAgICAhbW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OCkuWBnOatouOBmeOCi1xuICAgKi9cbiAgcHVibGljIHN0b3BBbGxNb3Rpb25zKCk6IHZvaWQge1xuICAgIC8vIC0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS1cbiAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcblxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcblxuICAgICkge1xuICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyAtLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xuICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICAgICAqIOaMh+WumuOBl+OBn0N1YmlzbU1vdGlvblF1ZXVlRW50cnnjga7lj5blvpdcblxuICAgICAgICAqIEBwYXJhbSAgIG1vdGlvblF1ZXVlRW50cnlOdW1iZXIgIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt1xuICAgICAgICAqIEByZXR1cm4gIOaMh+WumuOBl+OBn0N1YmlzbU1vdGlvblF1ZXVlRW50cnlcbiAgICAgICAgKiBAcmV0dXJuICBudWxsICAg6KaL44Gk44GL44KJ44Gq44GL44Gj44GfXG4gICAgICAgICovXG4gIHB1YmxpYyBnZXRDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5KFxuICAgIG1vdGlvblF1ZXVlRW50cnlOdW1iZXI6IGFueVxuICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IHtcbiAgICAvLy0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS1cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID09IG1vdGlvblF1ZXVlRW50cnlOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG1vdGlvblF1ZXVlRW50cnk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44KS5Y+X44GR5Y+W44KLQ2FsbGJhY2vjga7nmbvpjLJcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIOOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgKiBAcGFyYW0gY3VzdG9tRGF0YSDjgrPjg7zjg6vjg5Djg4Pjgq/jgavov5TjgZXjgozjgovjg4fjg7zjgr9cbiAgICovXG4gIHB1YmxpYyBzZXRFdmVudENhbGxiYWNrKFxuICAgIGNhbGxiYWNrOiBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uLFxuICAgIGN1c3RvbURhdGE6IGFueSA9IG51bGxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fZXZlbnRDYWxsQmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IGN1c3RvbURhdGE7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSAgIG1vZGVsICAg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSAgIHVzZXJUaW1lU2Vjb25kcyAgIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG4gICAqIEByZXR1cm4gIHRydWUgICAg44Oi44OH44Or44G444OR44Op44Oh44O844K/5YCk44Gu5Y+N5pig44GC44KKXG4gICAqIEByZXR1cm4gIGZhbHNlICAg44Oi44OH44Or44G444OR44Op44Oh44O844K/5YCk44Gu5Y+N5pig44Gq44GXKOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBlylcbiAgICovXG4gIHB1YmxpYyBkb1VwZGF0ZU1vdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwsIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcblxuICAgIC8vIC0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS0tXG4gICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG5cbiAgICApIHtcbiAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtb3Rpb246IEFDdWJpc21Nb3Rpb24gPSBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb247XG5cbiAgICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLS0tLSDlgKTjgpLlj43mmKDjgZnjgosgLS0tLS0tXG4gICAgICBtb3Rpb24udXBkYXRlUGFyYW1ldGVycyhtb2RlbCwgbW90aW9uUXVldWVFbnRyeSwgdXNlclRpbWVTZWNvbmRzKTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuXG4gICAgICAvLyAtLS0tLS0g44Om44O844K244OI44Oq44Ks44O844Kk44OZ44Oz44OI44KS5qSc5p+744GZ44KLIC0tLS1cbiAgICAgIGNvbnN0IGZpcmVkTGlzdDogY3NtVmVjdG9yPGNzbVN0cmluZz4gPSBtb3Rpb24uZ2V0RmlyZWRFdmVudChcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRMYXN0Q2hlY2tFdmVudFNlY29uZHMoKSAtXG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKSxcbiAgICAgICAgdXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKVxuICAgICAgKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJlZExpc3QuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRDYWxsQmFjayh0aGlzLCBmaXJlZExpc3QuYXQoaSksIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzKHVzZXJUaW1lU2Vjb25kcyk7XG5cbiAgICAgIC8vIC0tLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5yZWxlYXNlKCk7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkuaXNUcmlnZ2VyZWRGYWRlT3V0KCkpIHtcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnN0YXJ0RmFkZU91dChcbiAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RmFkZU91dFNlY29uZHMoKSxcbiAgICAgICAgICAgIHVzZXJUaW1lU2Vjb25kc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVkO1xuICB9XG4gIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cblxuICBfbW90aW9uczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+OyAvLyDjg6Ljg7zjgrfjg6fjg7NcbiAgX2V2ZW50Q2FsbEJhY2s6IEN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb247IC8vIOOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICBfZXZlbnRDdXN0b21EYXRhOiBhbnk7IC8vIOOCs+ODvOODq+ODkOODg+OCr+OBq+aIu+OBleOCjOOCi+ODh+ODvOOCv1xufVxuXG4vKipcbiAqIOOCpOODmeODs+ODiOOBruOCs+ODvOODq+ODkOODg+OCr+mWouaVsOOCkuWumue+qVxuICpcbiAqIOOCpOODmeODs+ODiOOBruOCs+ODvOODq+ODkOODg+OCr+OBq+eZu+mMsuOBp+OBjeOCi+mWouaVsOOBruWei+aDheWgsVxuICogQHBhcmFtIGNhbGxlciAgICAgICAg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44KS5YaN55Sf44GV44Gb44GfQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyXG4gKiBAcGFyYW0gZXZlbnRWYWx1ZSAgICDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjga7mloflrZfliJfjg4fjg7zjgr9cbiAqIEBwYXJhbSBjdXN0b21EYXRhICAg44Kz44O844Or44OQ44OD44Kv44Gr6L+U44GV44KM44KL55m76Yyy5pmC44Gr5oyH5a6a44GV44KM44Gf44OH44O844K/XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbiB7XG4gIChcbiAgICBjYWxsZXI6IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcixcbiAgICBldmVudFZhbHVlOiBjc21TdHJpbmcsXG4gICAgY3VzdG9tRGF0YTogYW55XG4gICk6IHZvaWQ7XG59XG5cbi8qKlxuICog44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XG4gKlxuICog44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344Gu5a6a576pXG4gKi9cbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IGFueTtcbmV4cG9ydCBjb25zdCBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID1cbiAgLTE7XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyID0gJC5DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciA9ICQuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyO1xuICBleHBvcnQgY29uc3QgSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZSA9XG4gICAgJC5JbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gJC5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uID0gJC5DdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0aCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0aCc7XG5pbXBvcnQgeyBDdWJpc21WZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHtcbiAgQ3ViaXNtUGh5c2ljc0lucHV0LFxuICBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgQ3ViaXNtUGh5c2ljc091dHB1dCxcbiAgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlLFxuICBDdWJpc21QaHlzaWNzUmlnLFxuICBDdWJpc21QaHlzaWNzU291cmNlLFxuICBDdWJpc21QaHlzaWNzU3ViUmlnLFxuICBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSxcbn0gZnJvbSAnLi9jdWJpc21waHlzaWNzaW50ZXJuYWwnO1xuaW1wb3J0IHsgQ3ViaXNtUGh5c2ljc0pzb24gfSBmcm9tICcuL2N1YmlzbXBoeXNpY3Nqc29uJztcblxuLy8gcGh5c2ljcyB0eXBlcyB0YWdzLlxuY29uc3QgUGh5c2ljc1R5cGVUYWdYID0gJ1gnO1xuY29uc3QgUGh5c2ljc1R5cGVUYWdZID0gJ1knO1xuY29uc3QgUGh5c2ljc1R5cGVUYWdBbmdsZSA9ICdBbmdsZSc7XG5cbi8vIENvbnN0YW50IG9mIGFpciByZXNpc3RhbmNlLlxuY29uc3QgQWlyUmVzaXN0YW5jZSA9IDUuMDtcblxuLy8gQ29uc3RhbnQgb2YgbWF4aW11bSB3ZWlnaHQgb2YgaW5wdXQgYW5kIG91dHB1dCByYXRpby5cbmNvbnN0IE1heGltdW1XZWlnaHQgPSAxMDAuMDtcblxuLy8gQ29uc3RhbnQgb2YgdGhyZXNob2xkIG9mIG1vdmVtZW50LlxuY29uc3QgTW92ZW1lbnRUaHJlc2hvbGQgPSAwLjAwMTtcblxuLy8gQ29uc3RhbnQgb2YgbWF4aW11bSBhbGxvd2VkIGRlbHRhIHRpbWVcbmNvbnN0IE1heERlbHRhVGltZSA9IDUuMDtcblxuLyoqXG4gKiDniannkIbmvJTnrpfjgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3Mge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAqIEBwYXJhbSBidWZmZXIgICAgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtUGh5c2ljcyB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21QaHlzaWNzID0gbmV3IEN1YmlzbVBoeXNpY3MoKTtcblxuICAgIHJldC5wYXJzZShidWZmZXIsIHNpemUpO1xuICAgIHJldC5fcGh5c2ljc1JpZy5ncmF2aXR5LnkgPSAwO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgotcbiAgICogQHBhcmFtIHBoeXNpY3Mg56C05qOE44GZ44KL44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShwaHlzaWNzOiBDdWJpc21QaHlzaWNzKTogdm9pZCB7XG4gICAgaWYgKHBoeXNpY3MgIT0gbnVsbCkge1xuICAgICAgcGh5c2ljcy5yZWxlYXNlKCk7XG4gICAgICBwaHlzaWNzID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGh5c2ljczMuanNvbuOCkuODkeODvOOCueOBmeOCi+OAglxuICAgKiBAcGFyYW0gcGh5c2ljc0pzb24gcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBwYXJzZShwaHlzaWNzSnNvbjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3BoeXNpY3NSaWcgPSBuZXcgQ3ViaXNtUGh5c2ljc1JpZygpO1xuXG4gICAgbGV0IGpzb246IEN1YmlzbVBoeXNpY3NKc29uID0gbmV3IEN1YmlzbVBoeXNpY3NKc29uKHBoeXNpY3NKc29uLCBzaXplKTtcblxuICAgIHRoaXMuX3BoeXNpY3NSaWcuZ3Jhdml0eSA9IGpzb24uZ2V0R3Jhdml0eSgpO1xuICAgIHRoaXMuX3BoeXNpY3NSaWcud2luZCA9IGpzb24uZ2V0V2luZCgpO1xuICAgIHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQgPSBqc29uLmdldFN1YlJpZ0NvdW50KCk7XG5cbiAgICB0aGlzLl9waHlzaWNzUmlnLmZwcyA9IGpzb24uZ2V0RnBzKCk7XG5cbiAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLnVwZGF0ZVNpemUoXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50LFxuICAgICAgQ3ViaXNtUGh5c2ljc1N1YlJpZyxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLnVwZGF0ZVNpemUoXG4gICAgICBqc29uLmdldFRvdGFsSW5wdXRDb3VudCgpLFxuICAgICAgQ3ViaXNtUGh5c2ljc0lucHV0LFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLnVwZGF0ZVNpemUoXG4gICAgICBqc29uLmdldFRvdGFsT3V0cHV0Q291bnQoKSxcbiAgICAgIEN1YmlzbVBoeXNpY3NPdXRwdXQsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRWZXJ0ZXhDb3VudCgpLFxuICAgICAgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlLFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICB0aGlzLl9jdXJyZW50UmlnT3V0cHV0cy5jbGVhcigpO1xuICAgIHRoaXMuX3ByZXZpb3VzUmlnT3V0cHV0cy5jbGVhcigpO1xuXG4gICAgbGV0IGlucHV0SW5kZXggPSAwLFxuICAgICAgb3V0cHV0SW5kZXggPSAwLFxuICAgICAgcGFydGljbGVJbmRleCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0gPVxuICAgICAgICBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1pbmltdW1WYWx1ZShpKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0gPVxuICAgICAgICBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1heGltdW1WYWx1ZShpKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvblBvc2l0aW9uLmRlZmFsdXQgPVxuICAgICAgICBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbkRlZmF1bHRWYWx1ZShpKTtcblxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uQW5nbGUubWluaW11bSA9XG4gICAgICAgIGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWluaW11bVZhbHVlKGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uQW5nbGUubWF4aW11bSA9XG4gICAgICAgIGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWF4aW11bVZhbHVlKGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uQW5nbGUuZGVmYWx1dCA9XG4gICAgICAgIGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlRGVmYXVsdFZhbHVlKGkpO1xuXG4gICAgICAvLyBJbnB1dFxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50ID0ganNvbi5nZXRJbnB1dENvdW50KGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlSW5wdXRJbmRleCA9IGlucHV0SW5kZXg7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50OyArK2opIHtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnNvdXJjZVBhcmFtZXRlckluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS53ZWlnaHQgPSBqc29uLmdldElucHV0V2VpZ2h0KFxuICAgICAgICAgIGksXG4gICAgICAgICAgalxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikucmVmbGVjdCA9XG4gICAgICAgICAganNvbi5nZXRJbnB1dFJlZmxlY3QoaSwgaik7XG5cbiAgICAgICAgaWYgKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnWCkge1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9YO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldElucHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1kpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfWTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcbiAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5nZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUgPSBnZXRJbnB1dFRyYW5zbGF0aW9uWUZyb21Ob3JtYWxpemVkUGFyYW10ZXJWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldElucHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ0FuZ2xlKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX0FuZ2xlO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0QW5nbGVGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnNvdXJjZS50YXJnZXRUeXBlID1cbiAgICAgICAgICBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZS5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZV9QYXJhbWV0ZXI7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5zb3VyY2UuaWQgPVxuICAgICAgICAgIGpzb24uZ2V0SW5wdXRTb3VyY2VJZChpLCBqKTtcbiAgICAgIH1cbiAgICAgIGlucHV0SW5kZXggKz0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50O1xuXG4gICAgICAvLyBPdXRwdXRcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnQgPSBqc29uLmdldE91dHB1dENvdW50KGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlT3V0cHV0SW5kZXggPSBvdXRwdXRJbmRleDtcblxuICAgICAgY29uc3QgY3VycmVudFJpZ091dHB1dCA9IG5ldyBQaHlzaWNzT3V0cHV0KCk7XG4gICAgICBjdXJyZW50UmlnT3V0cHV0Lm91dHB1dHMucmVzaXplKFxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50XG4gICAgICApO1xuXG4gICAgICBjb25zdCBwcmV2aW91c1JpZ091dHB1dCA9IG5ldyBQaHlzaWNzT3V0cHV0KCk7XG4gICAgICBwcmV2aW91c1JpZ091dHB1dC5vdXRwdXRzLnJlc2l6ZShcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudFxuICAgICAgKTtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50OyArK2opIHtcbiAgICAgICAgLy8gaW5pdGlhbGl6ZVxuICAgICAgICBjdXJyZW50UmlnT3V0cHV0Lm91dHB1dHNbal0gPSAwLjA7XG4gICAgICAgIHByZXZpb3VzUmlnT3V0cHV0Lm91dHB1dHNbal0gPSAwLjA7XG5cbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9XG4gICAgICAgICAgLTE7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnZlcnRleEluZGV4ID1cbiAgICAgICAgICBqc29uLmdldE91dHB1dFZlcnRleEluZGV4KGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5hbmdsZVNjYWxlID1cbiAgICAgICAgICBqc29uLmdldE91dHB1dEFuZ2xlU2NhbGUoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLndlaWdodCA9XG4gICAgICAgICAganNvbi5nZXRPdXRwdXRXZWlnaHQoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmRlc3RpbmF0aW9uLnRhcmdldFR5cGUgPVxuICAgICAgICAgIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlLkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlcjtcblxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5kZXN0aW5hdGlvbi5pZCA9XG4gICAgICAgICAganNvbi5nZXRPdXRwdXREZXN0aW5hdGlvbklkKGksIGopO1xuXG4gICAgICAgIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdYKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfWDtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5nZXRWYWx1ZSA9XG4gICAgICAgICAgICBnZXRPdXRwdXRUcmFuc2xhdGlvblg7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZ2V0U2NhbGUgPVxuICAgICAgICAgICAgZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblg7XG4gICAgICAgIH0gZWxzZSBpZiAoanNvbi5nZXRPdXRwdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnWSkge1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1k7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZ2V0VmFsdWUgPVxuICAgICAgICAgICAgZ2V0T3V0cHV0VHJhbnNsYXRpb25ZO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmdldFNjYWxlID1cbiAgICAgICAgICAgIGdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25ZO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ0FuZ2xlKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGU7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZ2V0VmFsdWUgPVxuICAgICAgICAgICAgZ2V0T3V0cHV0QW5nbGU7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZ2V0U2NhbGUgPVxuICAgICAgICAgICAgZ2V0T3V0cHV0U2NhbGVBbmdsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnJlZmxlY3QgPVxuICAgICAgICAgIGpzb24uZ2V0T3V0cHV0UmVmbGVjdChpLCBqKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY3VycmVudFJpZ091dHB1dHMucHVzaEJhY2soY3VycmVudFJpZ091dHB1dCk7XG4gICAgICB0aGlzLl9wcmV2aW91c1JpZ091dHB1dHMucHVzaEJhY2socHJldmlvdXNSaWdPdXRwdXQpO1xuXG4gICAgICBvdXRwdXRJbmRleCArPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50O1xuXG4gICAgICAvLyBQYXJ0aWNsZVxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5wYXJ0aWNsZUNvdW50ID0ganNvbi5nZXRQYXJ0aWNsZUNvdW50KGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlUGFydGljbGVJbmRleCA9IHBhcnRpY2xlSW5kZXg7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5wYXJ0aWNsZUNvdW50OyArK2opIHtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQocGFydGljbGVJbmRleCArIGopLm1vYmlsaXR5ID1cbiAgICAgICAgICBqc29uLmdldFBhcnRpY2xlTW9iaWxpdHkoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KHBhcnRpY2xlSW5kZXggKyBqKS5kZWxheSA9XG4gICAgICAgICAganNvbi5nZXRQYXJ0aWNsZURlbGF5KGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChwYXJ0aWNsZUluZGV4ICsgaikuYWNjZWxlcmF0aW9uID1cbiAgICAgICAgICBqc29uLmdldFBhcnRpY2xlQWNjZWxlcmF0aW9uKGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChwYXJ0aWNsZUluZGV4ICsgaikucmFkaXVzID1cbiAgICAgICAgICBqc29uLmdldFBhcnRpY2xlUmFkaXVzKGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChwYXJ0aWNsZUluZGV4ICsgaikucG9zaXRpb24gPVxuICAgICAgICAgIGpzb24uZ2V0UGFydGljbGVQb3NpdGlvbihpLCBqKTtcbiAgICAgIH1cblxuICAgICAgcGFydGljbGVJbmRleCArPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLnBhcnRpY2xlQ291bnQ7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG5cbiAgICBqc29uLnJlbGVhc2UoKTtcbiAgICBqc29uID0gdm9pZCAwO1xuICAgIGpzb24gPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruODkeODqeODoeODvOOCv+WApOOBp+eJqeeQhua8lOeul+OBjOWuieWumuWMluOBmeOCi+eKtuaFi+OCkua8lOeul+OBmeOCi+OAglxuICAgKiBAcGFyYW0gbW9kZWwg54mp55CG5ryU566X44Gu57WQ5p6c44KS6YGp55So44GZ44KL44Oi44OH44OrXG4gICAqL1xuICBwdWJsaWMgc3RhYmlsaXphdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICBsZXQgdG90YWxBbmdsZTogeyBhbmdsZTogbnVtYmVyIH07XG4gICAgbGV0IHdlaWdodDogbnVtYmVyO1xuICAgIGxldCByYWRBbmdsZTogbnVtYmVyO1xuICAgIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyO1xuICAgIGNvbnN0IHRvdGFsVHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xuICAgIGxldCBjdXJyZW50U2V0dGluZzogQ3ViaXNtUGh5c2ljc1N1YlJpZztcbiAgICBsZXQgY3VycmVudElucHV0czogQ3ViaXNtUGh5c2ljc0lucHV0W107XG4gICAgbGV0IGN1cnJlbnRPdXRwdXRzOiBDdWJpc21QaHlzaWNzT3V0cHV0W107XG4gICAgbGV0IGN1cnJlbnRQYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdO1xuXG4gICAgbGV0IHBhcmFtZXRlclZhbHVlczogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlck1pbmltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyRGVmYXVsdFZhbHVlczogRmxvYXQzMkFycmF5O1xuXG4gICAgcGFyYW1ldGVyVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLnZhbHVlcztcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXM7XG4gICAgcGFyYW1ldGVyTWluaW11bVZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMuZGVmYXVsdFZhbHVlcztcblxuICAgIGlmICgodGhpcy5fcGFyYW1ldGVyQ2FjaGVzPy5sZW5ndGggPz8gMCkgPCBtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpKSB7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXMgPSBuZXcgRmxvYXQzMkFycmF5KG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCkpO1xuICAgIH1cblxuICAgIGlmICgodGhpcy5fcGFyYW1ldGVySW5wdXRDYWNoZXM/Lmxlbmd0aCA/PyAwKSA8IG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCkpIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzID0gbmV3IEZsb2F0MzJBcnJheShtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCk7ICsraikge1xuICAgICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzW2pdID0gcGFyYW1ldGVyVmFsdWVzW2pdO1xuICAgICAgdGhpcy5fcGFyYW1ldGVySW5wdXRDYWNoZXNbal0gPSBwYXJhbWV0ZXJWYWx1ZXNbal07XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgIGxldCBzZXR0aW5nSW5kZXggPSAwO1xuICAgICAgc2V0dGluZ0luZGV4IDwgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudDtcbiAgICAgICsrc2V0dGluZ0luZGV4XG4gICAgKSB7XG4gICAgICB0b3RhbEFuZ2xlID0geyBhbmdsZTogMC4wIH07XG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPSAwLjA7XG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgPSAwLjA7XG4gICAgICBjdXJyZW50U2V0dGluZyA9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoc2V0dGluZ0luZGV4KTtcbiAgICAgIGN1cnJlbnRJbnB1dHMgPSB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5nZXQoXG4gICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VJbnB1dEluZGV4XG4gICAgICApO1xuICAgICAgY3VycmVudE91dHB1dHMgPSB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuZ2V0KFxuICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlT3V0cHV0SW5kZXhcbiAgICAgICk7XG4gICAgICBjdXJyZW50UGFydGljbGVzID0gdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuZ2V0KFxuICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlUGFydGljbGVJbmRleFxuICAgICAgKTtcblxuICAgICAgLy8gTG9hZCBpbnB1dCBwYXJhbWV0ZXJzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTZXR0aW5nLmlucHV0Q291bnQ7ICsraSkge1xuICAgICAgICB3ZWlnaHQgPSBjdXJyZW50SW5wdXRzW2ldLndlaWdodCAvIE1heGltdW1XZWlnaHQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICBjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoXG4gICAgICAgICAgICBjdXJyZW50SW5wdXRzW2ldLnNvdXJjZS5pZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50SW5wdXRzW2ldLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLFxuICAgICAgICAgIHRvdGFsQW5nbGUsXG4gICAgICAgICAgcGFyYW1ldGVyVmFsdWVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbixcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uQW5nbGUsXG4gICAgICAgICAgY3VycmVudElucHV0c1tpXS5yZWZsZWN0LFxuICAgICAgICAgIHdlaWdodFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuX3BhcmFtZXRlckNhY2hlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSA9XG4gICAgICAgICAgcGFyYW1ldGVyVmFsdWVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdO1xuICAgICAgfVxuXG4gICAgICByYWRBbmdsZSA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKC10b3RhbEFuZ2xlLmFuZ2xlKTtcblxuICAgICAgdG90YWxUcmFuc2xhdGlvbi54ID1cbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5jb3MocmFkQW5nbGUpIC1cbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ICogQ3ViaXNtTWF0aC5zaW4ocmFkQW5nbGUpO1xuICAgICAgdG90YWxUcmFuc2xhdGlvbi55ID1cbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5zaW4ocmFkQW5nbGUpICtcbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ICogQ3ViaXNtTWF0aC5jb3MocmFkQW5nbGUpO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgcGFydGljbGVzIHBvc2l0aW9uLlxuICAgICAgdXBkYXRlUGFydGljbGVzRm9yU3RhYmlsaXphdGlvbihcbiAgICAgICAgY3VycmVudFBhcnRpY2xlcyxcbiAgICAgICAgY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudCxcbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbixcbiAgICAgICAgdG90YWxBbmdsZS5hbmdsZSxcbiAgICAgICAgdGhpcy5fb3B0aW9ucy53aW5kLFxuICAgICAgICBNb3ZlbWVudFRocmVzaG9sZCAqIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtXG4gICAgICApO1xuXG4gICAgICAvLyBVcGRhdGUgb3V0cHV0IHBhcmFtZXRlcnMuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTZXR0aW5nLm91dHB1dENvdW50OyArK2kpIHtcbiAgICAgICAgY29uc3QgcGFydGljbGVJbmRleCA9IGN1cnJlbnRPdXRwdXRzW2ldLnZlcnRleEluZGV4O1xuXG4gICAgICAgIGlmIChjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgICAgY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KFxuICAgICAgICAgICAgY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb24uaWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBhcnRpY2xlSW5kZXggPCAxIHx8XG4gICAgICAgICAgcGFydGljbGVJbmRleCA+PSBjdXJyZW50U2V0dGluZy5wYXJ0aWNsZUNvdW50XG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcbiAgICAgICAgdHJhbnNsYXRpb24gPSBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXhdLnBvc2l0aW9uLnN1YnN0cmFjdChcbiAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvblxuICAgICAgICApO1xuXG4gICAgICAgIG91dHB1dFZhbHVlID0gY3VycmVudE91dHB1dHNbaV0uZ2V0VmFsdWUoXG4gICAgICAgICAgdHJhbnNsYXRpb24sXG4gICAgICAgICAgY3VycmVudFBhcnRpY2xlcyxcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4LFxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldLnJlZmxlY3QsXG4gICAgICAgICAgdGhpcy5fb3B0aW9ucy5ncmF2aXR5XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFJpZ091dHB1dHMuYXQoc2V0dGluZ0luZGV4KS5vdXRwdXRzW2ldID0gb3V0cHV0VmFsdWU7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzUmlnT3V0cHV0cy5hdChzZXR0aW5nSW5kZXgpLm91dHB1dHNbaV0gPSBvdXRwdXRWYWx1ZTtcblxuICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4OiBudW1iZXIgPVxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg7XG5cbiAgICAgICAgY29uc3Qgb3V0UGFyYW1ldGVyQ2FjaGVzOiBGbG9hdDMyQXJyYXkgPVxuICAgICAgICAgICFGbG9hdDMyQXJyYXkucHJvdG90eXBlLnNsaWNlICYmICdzdWJhcnJheScgaW4gRmxvYXQzMkFycmF5LnByb3RvdHlwZVxuICAgICAgICAgICAgPyBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyVmFsdWVzLnN1YmFycmF5KGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIC8vIOWApOa4oeOBl+OBmeOCi+OBn+OCgeOAgUpTT04ucGFyc2UsIEpTT04uc3RyaW5naWZ5XG4gICAgICAgICAgICA6IHBhcmFtZXRlclZhbHVlcy5zbGljZShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KTtcblxuICAgICAgICB1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICBvdXRQYXJhbWV0ZXJDYWNoZXMsXG4gICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlc1tkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIG91dHB1dFZhbHVlLFxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g5YCk44KS5Y+N5pigXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IG9mZnNldDogbnVtYmVyID0gZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCwgb3V0UGFyYW1JbmRleCA9IDA7XG4gICAgICAgICAgb2Zmc2V0IDwgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzLmxlbmd0aDtcbiAgICAgICAgICBvZmZzZXQrKywgb3V0UGFyYW1JbmRleCsrXG4gICAgICAgICkge1xuICAgICAgICAgIHBhcmFtZXRlclZhbHVlc1tvZmZzZXRdID0gdGhpcy5fcGFyYW1ldGVyQ2FjaGVzW29mZnNldF0gPVxuICAgICAgICAgICAgb3V0UGFyYW1ldGVyQ2FjaGVzW291dFBhcmFtSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBruipleS+oVxuICAgKlxuICAgKiBQZW5kdWx1bSBpbnRlcnBvbGF0aW9uIHdlaWdodHNcbiAgICpcbiAgICog5oyv44KK5a2Q44Gu6KiI566X57WQ5p6c44Gv5L+d5a2Y44GV44KM44CB44OR44Op44Oh44O844K/44G444Gu5Ye65Yqb44Gv5L+d5a2Y44GV44KM44Gf5YmN5Zue44Gu57WQ5p6c44Gn6KOc6ZaT44GV44KM44G+44GZ44CCXG4gICAqIFRoZSByZXN1bHQgb2YgdGhlIHBlbmR1bHVtIGNhbGN1bGF0aW9uIGlzIHNhdmVkIGFuZFxuICAgKiB0aGUgb3V0cHV0IHRvIHRoZSBwYXJhbWV0ZXJzIGlzIGludGVycG9sYXRlZCB3aXRoIHRoZSBzYXZlZCBwcmV2aW91cyByZXN1bHQgb2YgdGhlIHBlbmR1bHVtIGNhbGN1bGF0aW9uLlxuICAgKlxuICAgKiDlm7PjgafnpLrjgZnjgahbMV3jgahbMl3jgafoo5zplpPjgZXjgozjgb7jgZnjgIJcbiAgICogVGhlIGZpZ3VyZSBzaG93cyB0aGUgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIFsxXSBhbmQgWzJdLlxuICAgKlxuICAgKiDoo5zplpPjga7ph43jgb/jga/mnIDmlrDjga7mjK/jgorlrZDoqIjnrpfjgr/jgqTjg5/jg7PjgrDjgajmrKHlm57jga7jgr/jgqTjg5/jg7PjgrDjga7plpPjgafopovjgZ/nj77lnKjmmYLplpPjgafmsbrlrprjgZnjgovjgIJcbiAgICogVGhlIHdlaWdodCBvZiB0aGUgaW50ZXJwb2xhdGlvbiBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgY3VycmVudCB0aW1lIHNlZW4gYmV0d2VlblxuICAgKiB0aGUgbGF0ZXN0IHBlbmR1bHVtIGNhbGN1bGF0aW9uIHRpbWluZyBhbmQgdGhlIG5leHQgdGltaW5nLlxuICAgKlxuICAgKiDlm7PjgafnpLrjgZnjgahbMl3jgahbNF3jga7plpPjgafjgb/jgZ8oMynjga7kvY3nva7jga7ph43jgb/jgavjgarjgovjgIJcbiAgICogRmlndXJlIHNob3dzIHRoZSB3ZWlnaHQgb2YgcG9zaXRpb24gKDMpIGFzIHNlZW4gYmV0d2VlbiBbMl0gYW5kIFs0XS5cbiAgICpcbiAgICog6Kej6YeI44Go44GX44Gm5oyv44KK5a2Q6KiI566X44Gu44K/44Kk44Of44Oz44Kw44Go6YeN44G/6KiI566X44Gu44K/44Kk44Of44Oz44Kw44GM44K644Os44KL44CCXG4gICAqIEFzIGFuIGludGVycHJldGF0aW9uLCB0aGUgcGVuZHVsdW0gY2FsY3VsYXRpb24gYW5kIHdlaWdodHMgYXJlIG1pc2FsaWduZWQuXG4gICAqXG4gICAqIHBoeXNpY3MzLmpzb27jgatGUFPmg4XloLHjgYzlrZjlnKjjgZfjgarjgYTloLTlkIjjga/luLjjgavliY3jga7mjK/jgorlrZDnirbmhYvjgafoqK3lrprjgZXjgozjgovjgIJcbiAgICogSWYgdGhlcmUgaXMgbm8gRlBTIGluZm9ybWF0aW9uIGluIHBoeXNpY3MzLmpzb24sIGl0IGlzIGFsd2F5cyBzZXQgaW4gdGhlIHByZXZpb3VzIHBlbmR1bHVtIHN0YXRlLlxuICAgKlxuICAgKiDjgZPjga7ku5Xmp5jjga/oo5zplpPnr4Tlm7LjgpLpgLjohLHjgZfjgZ/jgZPjgajjgYzljp/lm6Djga7pnIfjgYjjgZ/jgojjgYbjgaropovjgZ/nm67jgpLlm57pgb/jgpLnm67nmoTjgavjgZfjgabjgYTjgovjgIJcbiAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBzcGVjaWZpY2F0aW9uIGlzIHRvIGF2b2lkIHRoZSBxdWl2ZXJpbmcgYXBwZWFyYW5jZSBjYXVzZWQgYnkgZGV2aWF0aW9ucyBmcm9tIHRoZSBpbnRlcnBvbGF0aW9uIHJhbmdlLlxuICAgKlxuICAgKiAtLS0tLS0tLS0tLS0gdGltZSAtLS0tLS0tLS0tLS0tLT5cbiAgICpcbiAgICogICAgICAgICAgICAgICAgIHwrKysrK3wtLS0tLS18IDwtIHdlaWdodFxuICAgKiA9PVsxXT09PT0jPT09PT1bMl0tLS0oMyktLS0tKDQpXG4gICAqICAgICAgICAgIF4gb3V0cHV0IGNvbnRlbnRzXG4gICAqXG4gICAqIDE6X3ByZXZpb3VzUmlnT3V0cHV0c1xuICAgKiAyOl9jdXJyZW50UmlnT3V0cHV0c1xuICAgKiAzOl9jdXJyZW50UmVtYWluVGltZSAobm93IHJlbmRlcmluZylcbiAgICogNDpuZXh0IHBhcnRpY2xlcyB0aW1pbmdcbiAgICogQHBhcmFtIG1vZGVsIOeJqeeQhua8lOeul+OBrue1kOaenOOCkumBqeeUqOOBmeOCi+ODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGV2YWx1YXRlKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgbGV0IHRvdGFsQW5nbGU6IHsgYW5nbGU6IG51bWJlciB9O1xuICAgIGxldCB3ZWlnaHQ6IG51bWJlcjtcbiAgICBsZXQgcmFkQW5nbGU6IG51bWJlcjtcbiAgICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlcjtcbiAgICBjb25zdCB0b3RhbFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcbiAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gICAgbGV0IGN1cnJlbnRJbnB1dHM6IEN1YmlzbVBoeXNpY3NJbnB1dFtdO1xuICAgIGxldCBjdXJyZW50T3V0cHV0czogQ3ViaXNtUGh5c2ljc091dHB1dFtdO1xuICAgIGxldCBjdXJyZW50UGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXTtcblxuICAgIGlmICgwLjAgPj0gZGVsdGFUaW1lU2Vjb25kcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBwYXJhbWV0ZXJWYWx1ZXM6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyTWF4aW11bVZhbHVlczogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlckRlZmF1bHRWYWx1ZXM6IEZsb2F0MzJBcnJheTtcblxuICAgIGxldCBwaHlzaWNzRGVsdGFUaW1lOiBudW1iZXI7XG4gICAgdGhpcy5fY3VycmVudFJlbWFpblRpbWUgKz0gZGVsdGFUaW1lU2Vjb25kcztcbiAgICBpZiAodGhpcy5fY3VycmVudFJlbWFpblRpbWUgPiBNYXhEZWx0YVRpbWUpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRSZW1haW5UaW1lID0gMC4wO1xuICAgIH1cblxuICAgIHBhcmFtZXRlclZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy52YWx1ZXM7XG4gICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzO1xuICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWluaW11bVZhbHVlcztcbiAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLmRlZmF1bHRWYWx1ZXM7XG5cbiAgICBpZiAoKHRoaXMuX3BhcmFtZXRlckNhY2hlcz8ubGVuZ3RoID8/IDApIDwgbW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKSkge1xuICAgICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzID0gbmV3IEZsb2F0MzJBcnJheShtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpKTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzPy5sZW5ndGggPz8gMCkgPCBtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpKSB7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlcyA9IG5ldyBGbG9hdDMyQXJyYXkobW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKSk7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCk7ICsraikge1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlc1tqXSA9IHBhcmFtZXRlclZhbHVlc1tqXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGh5c2ljc1JpZy5mcHMgPiAwLjApIHtcbiAgICAgIHBoeXNpY3NEZWx0YVRpbWUgPSAxLjAgLyB0aGlzLl9waHlzaWNzUmlnLmZwcztcbiAgICB9IGVsc2Uge1xuICAgICAgcGh5c2ljc0RlbHRhVGltZSA9IGRlbHRhVGltZVNlY29uZHM7XG4gICAgfVxuXG4gICAgd2hpbGUgKHRoaXMuX2N1cnJlbnRSZW1haW5UaW1lID49IHBoeXNpY3NEZWx0YVRpbWUpIHtcbiAgICAgIC8vIGNvcHlSaWdPdXRwdXRzIF9jdXJyZW50UmlnT3V0cHV0cyB0byBfcHJldmlvdXNSaWdPdXRwdXRzXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgc2V0dGluZ0luZGV4ID0gMDtcbiAgICAgICAgc2V0dGluZ0luZGV4IDwgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudDtcbiAgICAgICAgKytzZXR0aW5nSW5kZXhcbiAgICAgICkge1xuICAgICAgICBjdXJyZW50U2V0dGluZyA9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoc2V0dGluZ0luZGV4KTtcbiAgICAgICAgY3VycmVudE91dHB1dHMgPSB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuZ2V0KFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VPdXRwdXRJbmRleFxuICAgICAgICApO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTZXR0aW5nLm91dHB1dENvdW50OyArK2kpIHtcbiAgICAgICAgICB0aGlzLl9wcmV2aW91c1JpZ091dHB1dHMuYXQoc2V0dGluZ0luZGV4KS5vdXRwdXRzW2ldID1cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSaWdPdXRwdXRzLmF0KHNldHRpbmdJbmRleCkub3V0cHV0c1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDlhaXlipvjgq3jg6Pjg4Pjgrfjg6Xjgajjg5Hjg6njg6Hjg7zjgr/jgafnt5rlvaLoo5zplpPjgZfjgaZVcGRhdGVQYXJ0aWNsZXPjgZnjgovjgr/jgqTjg5/jg7PjgrDjgafjga7lhaXlipvjgpLoqIjnrpfjgZnjgovjgIJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgaW5wdXQgYXQgdGhlIHRpbWluZyB0byBVcGRhdGVQYXJ0aWNsZXMgYnkgbGluZWFyIGludGVycG9sYXRpb24gd2l0aCB0aGUgX3BhcmFtZXRlcklucHV0Q2FjaGUgYW5kIHBhcmFtZXRlclZhbHVlLlxuICAgICAgLy8gX3BhcmFtZXRlckNhY2hl44Gv44Kw44Or44O844OX6ZaT44Gn44Gu5YCk44Gu5Lyd5pCs44Gu5b255Ymy44GM44GC44KL44Gu44GnX3BhcmFtZXRlcklucHV0Q2FjaGXjgajjga7liIbpm6LjgYzlv4XopoHjgIJcbiAgICAgIC8vIF9wYXJhbWV0ZXJDYWNoZSBuZWVkcyB0byBiZSBzZXBhcmF0ZWQgZnJvbSBfcGFyYW1ldGVySW5wdXRDYWNoZSBiZWNhdXNlIG9mIGl0cyByb2xlIGluIHByb3BhZ2F0aW5nIHZhbHVlcyBiZXR3ZWVuIGdyb3Vwcy5cbiAgICAgIGNvbnN0IGlucHV0V2VpZ2h0ID0gcGh5c2ljc0RlbHRhVGltZSAvIHRoaXMuX2N1cnJlbnRSZW1haW5UaW1lO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpOyArK2opIHtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzW2pdID1cbiAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlc1tqXSAqICgxLjAgLSBpbnB1dFdlaWdodCkgK1xuICAgICAgICAgIHBhcmFtZXRlclZhbHVlc1tqXSAqIGlucHV0V2VpZ2h0O1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlc1tqXSA9IHRoaXMuX3BhcmFtZXRlckNhY2hlc1tqXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNldHRpbmdJbmRleCA9IDA7XG4gICAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XG4gICAgICAgICsrc2V0dGluZ0luZGV4XG4gICAgICApIHtcbiAgICAgICAgdG90YWxBbmdsZSA9IHsgYW5nbGU6IDAuMCB9O1xuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPSAwLjA7XG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9IDAuMDtcbiAgICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XG4gICAgICAgIGN1cnJlbnRJbnB1dHMgPSB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5nZXQoXG4gICAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZUlucHV0SW5kZXhcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudE91dHB1dHMgPSB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuZ2V0KFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VPdXRwdXRJbmRleFxuICAgICAgICApO1xuICAgICAgICBjdXJyZW50UGFydGljbGVzID0gdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuZ2V0KFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VQYXJ0aWNsZUluZGV4XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gTG9hZCBpbnB1dCBwYXJhbWV0ZXJzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNldHRpbmcuaW5wdXRDb3VudDsgKytpKSB7XG4gICAgICAgICAgd2VpZ2h0ID0gY3VycmVudElucHV0c1tpXS53ZWlnaHQgLyBNYXhpbXVtV2VpZ2h0O1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgIGN1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChcbiAgICAgICAgICAgICAgY3VycmVudElucHV0c1tpXS5zb3VyY2UuaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudElucHV0c1tpXS5nZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUoXG4gICAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLFxuICAgICAgICAgICAgdG90YWxBbmdsZSxcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlckNhY2hlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbixcbiAgICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25BbmdsZSxcbiAgICAgICAgICAgIGN1cnJlbnRJbnB1dHNbaV0ucmVmbGVjdCxcbiAgICAgICAgICAgIHdlaWdodFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByYWRBbmdsZSA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKC10b3RhbEFuZ2xlLmFuZ2xlKTtcblxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPVxuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCAqIEN1YmlzbU1hdGguY29zKHJhZEFuZ2xlKSAtXG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ICogQ3ViaXNtTWF0aC5zaW4ocmFkQW5nbGUpO1xuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgPVxuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCAqIEN1YmlzbU1hdGguc2luKHJhZEFuZ2xlKSArXG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ICogQ3ViaXNtTWF0aC5jb3MocmFkQW5nbGUpO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBwYXJ0aWNsZXMgcG9zaXRpb24uXG4gICAgICAgIHVwZGF0ZVBhcnRpY2xlcyhcbiAgICAgICAgICBjdXJyZW50UGFydGljbGVzLFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnQsXG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbixcbiAgICAgICAgICB0b3RhbEFuZ2xlLmFuZ2xlLFxuICAgICAgICAgIHRoaXMuX29wdGlvbnMud2luZCxcbiAgICAgICAgICBNb3ZlbWVudFRocmVzaG9sZCAqIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtLFxuICAgICAgICAgIHBoeXNpY3NEZWx0YVRpbWUsXG4gICAgICAgICAgQWlyUmVzaXN0YW5jZVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBvdXRwdXQgcGFyYW1ldGVycy5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5vdXRwdXRDb3VudDsgKytpKSB7XG4gICAgICAgICAgY29uc3QgcGFydGljbGVJbmRleCA9IGN1cnJlbnRPdXRwdXRzW2ldLnZlcnRleEluZGV4O1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPVxuICAgICAgICAgICAgICBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvbi5pZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgcGFydGljbGVJbmRleCA8IDEgfHxcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXggPj0gY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xuICAgICAgICAgIHRyYW5zbGF0aW9uLnggPVxuICAgICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4XS5wb3NpdGlvbi54IC1cbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDFdLnBvc2l0aW9uLng7XG4gICAgICAgICAgdHJhbnNsYXRpb24ueSA9XG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXhdLnBvc2l0aW9uLnkgLVxuICAgICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMV0ucG9zaXRpb24ueTtcblxuICAgICAgICAgIG91dHB1dFZhbHVlID0gY3VycmVudE91dHB1dHNbaV0uZ2V0VmFsdWUoXG4gICAgICAgICAgICB0cmFuc2xhdGlvbixcbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMsXG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4LFxuICAgICAgICAgICAgY3VycmVudE91dHB1dHNbaV0ucmVmbGVjdCxcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICB0aGlzLl9jdXJyZW50UmlnT3V0cHV0cy5hdChzZXR0aW5nSW5kZXgpLm91dHB1dHNbaV0gPSBvdXRwdXRWYWx1ZTtcblxuICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg6IG51bWJlciA9XG4gICAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4O1xuICAgICAgICAgIGNvbnN0IG91dFBhcmFtZXRlckNhY2hlczogRmxvYXQzMkFycmF5ID1cbiAgICAgICAgICAgICFGbG9hdDMyQXJyYXkucHJvdG90eXBlLnNsaWNlICYmXG4gICAgICAgICAgICAnc3ViYXJyYXknIGluIEZsb2F0MzJBcnJheS5wcm90b3R5cGVcbiAgICAgICAgICAgICAgPyBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlckNhY2hlcy5zdWJhcnJheShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkgLy8g5YCk5rih44GX44GZ44KL44Gf44KB44CBSlNPTi5wYXJzZSwgSlNPTi5zdHJpbmdpZnlcbiAgICAgICAgICAgICAgOiB0aGlzLl9wYXJhbWV0ZXJDYWNoZXMuc2xpY2UoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCk7XG5cbiAgICAgICAgICB1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICAgIG91dFBhcmFtZXRlckNhY2hlcyxcbiAgICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZXNbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgb3V0cHV0VmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyDlgKTjgpLlj43mmKBcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgbGV0IG9mZnNldDogbnVtYmVyID0gZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCwgb3V0UGFyYW1JbmRleCA9IDA7XG4gICAgICAgICAgICBvZmZzZXQgPCB0aGlzLl9wYXJhbWV0ZXJDYWNoZXMubGVuZ3RoO1xuICAgICAgICAgICAgb2Zmc2V0KyssIG91dFBhcmFtSW5kZXgrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzW29mZnNldF0gPSBvdXRQYXJhbWV0ZXJDYWNoZXNbb3V0UGFyYW1JbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9jdXJyZW50UmVtYWluVGltZSAtPSBwaHlzaWNzRGVsdGFUaW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGFscGhhOiBudW1iZXIgPSB0aGlzLl9jdXJyZW50UmVtYWluVGltZSAvIHBoeXNpY3NEZWx0YVRpbWU7XG4gICAgdGhpcy5pbnRlcnBvbGF0ZShtb2RlbCwgYWxwaGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+e1kOaenOOBrumBqeeUqFxuICAgKiDmjK/jgorlrZDmvJTnrpfjga7mnIDmlrDjga7ntZDmnpzjgajkuIDjgaTliY3jga7ntZDmnpzjgYvjgonmjIflrprjgZfjgZ/ph43jgb/jgafpgannlKjjgZnjgovjgIJcbiAgICogQHBhcmFtIG1vZGVsIOeJqeeQhua8lOeul+OBrue1kOaenOOCkumBqeeUqOOBmeOCi+ODouODh+ODq1xuICAgKiBAcGFyYW0gd2VpZ2h0IOacgOaWsOe1kOaenOOBrumHjeOBv1xuICAgKi9cbiAgcHVibGljIGludGVycG9sYXRlKG1vZGVsOiBDdWJpc21Nb2RlbCwgd2VpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQgY3VycmVudE91dHB1dHM6IEN1YmlzbVBoeXNpY3NPdXRwdXRbXTtcbiAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gICAgbGV0IHBhcmFtZXRlclZhbHVlczogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlck1pbmltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTtcblxuICAgIHBhcmFtZXRlclZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy52YWx1ZXM7XG4gICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzO1xuICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWluaW11bVZhbHVlcztcblxuICAgIGZvciAoXG4gICAgICBsZXQgc2V0dGluZ0luZGV4ID0gMDtcbiAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XG4gICAgICArK3NldHRpbmdJbmRleFxuICAgICkge1xuICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XG4gICAgICBjdXJyZW50T3V0cHV0cyA9IHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5nZXQoXG4gICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VPdXRwdXRJbmRleFxuICAgICAgKTtcblxuICAgICAgLy8gTG9hZCBpbnB1dCBwYXJhbWV0ZXJzLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5vdXRwdXRDb3VudDsgKytpKSB7XG4gICAgICAgIGlmIChjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4OiBudW1iZXIgPVxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg7XG4gICAgICAgIGNvbnN0IG91dFBhcmFtZXRlclZhbHVlczogRmxvYXQzMkFycmF5ID1cbiAgICAgICAgICAhRmxvYXQzMkFycmF5LnByb3RvdHlwZS5zbGljZSAmJiAnc3ViYXJyYXknIGluIEZsb2F0MzJBcnJheS5wcm90b3R5cGVcbiAgICAgICAgICAgID8gSlNPTi5wYXJzZShcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlclZhbHVlcy5zdWJhcnJheShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSAvLyDlgKTmuKHjgZfjgZnjgovjgZ/jgoHjgIFKU09OLnBhcnNlLCBKU09OLnN0cmluZ2lmeVxuICAgICAgICAgICAgOiBwYXJhbWV0ZXJWYWx1ZXMuc2xpY2UoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCk7XG5cbiAgICAgICAgdXBkYXRlT3V0cHV0UGFyYW1ldGVyVmFsdWUoXG4gICAgICAgICAgb3V0UGFyYW1ldGVyVmFsdWVzLFxuICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZXNbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlc1tkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICB0aGlzLl9wcmV2aW91c1JpZ091dHB1dHMuYXQoc2V0dGluZ0luZGV4KS5vdXRwdXRzW2ldICogKDEgLSB3ZWlnaHQpICtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSaWdPdXRwdXRzLmF0KHNldHRpbmdJbmRleCkub3V0cHV0c1tpXSAqIHdlaWdodCxcbiAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIOWApOOCkuWPjeaYoFxuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBvZmZzZXQ6IG51bWJlciA9IGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgsIG91dFBhcmFtSW5kZXggPSAwO1xuICAgICAgICAgIG9mZnNldCA8IHBhcmFtZXRlclZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgb2Zmc2V0KyssIG91dFBhcmFtSW5kZXgrK1xuICAgICAgICApIHtcbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZXNbb2Zmc2V0XSA9IG91dFBhcmFtZXRlclZhbHVlc1tvdXRQYXJhbUluZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqrjg5fjgrfjg6fjg7Pjga7oqK3lrppcbiAgICogQHBhcmFtIG9wdGlvbnMg44Kq44OX44K344On44OzXG4gICAqL1xuICBwdWJsaWMgc2V0T3B0aW9ucyhvcHRpb25zOiBPcHRpb25zKTogdm9pZCB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICog44Kq44OX44K344On44Oz44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Kq44OX44K344On44OzXG4gICAqL1xuICBwdWJsaWMgZ2V0T3B0aW9uKCk6IE9wdGlvbnMge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3BoeXNpY3NSaWcgPSBudWxsO1xuXG4gICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgIHRoaXMuX29wdGlvbnMgPSBuZXcgT3B0aW9ucygpO1xuICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eS55ID0gLTEuMDtcbiAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHkueCA9IDAuMDtcbiAgICB0aGlzLl9vcHRpb25zLndpbmQueCA9IDAuMDtcbiAgICB0aGlzLl9vcHRpb25zLndpbmQueSA9IDAuMDtcbiAgICB0aGlzLl9jdXJyZW50UmlnT3V0cHV0cyA9IG5ldyBjc21WZWN0b3I8UGh5c2ljc091dHB1dD4oKTtcbiAgICB0aGlzLl9wcmV2aW91c1JpZ091dHB1dHMgPSBuZXcgY3NtVmVjdG9yPFBoeXNpY3NPdXRwdXQ+KCk7XG4gICAgdGhpcy5fY3VycmVudFJlbWFpblRpbWUgPSAwLjA7XG4gICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzID0gbnVsbDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlcyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9waHlzaWNzUmlnID0gdm9pZCAwO1xuICAgIHRoaXMuX3BoeXNpY3NSaWcgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMluOBmeOCi1xuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgbGV0IHN0cmFuZDogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW107XG4gICAgbGV0IGN1cnJlbnRTZXR0aW5nOiBDdWJpc21QaHlzaWNzU3ViUmlnO1xuICAgIGxldCByYWRpdXM6IEN1YmlzbVZlY3RvcjI7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IHNldHRpbmdJbmRleCA9IDA7XG4gICAgICBzZXR0aW5nSW5kZXggPCB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50O1xuICAgICAgKytzZXR0aW5nSW5kZXhcbiAgICApIHtcbiAgICAgIGN1cnJlbnRTZXR0aW5nID0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChzZXR0aW5nSW5kZXgpO1xuICAgICAgc3RyYW5kID0gdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuZ2V0KGN1cnJlbnRTZXR0aW5nLmJhc2VQYXJ0aWNsZUluZGV4KTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdG9wIG9mIHBhcnRpY2xlLlxuICAgICAgc3RyYW5kWzBdLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgIHN0cmFuZFswXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgc3RyYW5kWzBdLmluaXRpYWxQb3NpdGlvbi54LFxuICAgICAgICBzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uLnlcbiAgICAgICk7XG4gICAgICBzdHJhbmRbMF0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIC0xLjApO1xuICAgICAgc3RyYW5kWzBdLmxhc3RHcmF2aXR5LnkgKj0gLTEuMDtcbiAgICAgIHN0cmFuZFswXS52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgIHN0cmFuZFswXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSBwYXJ0aWNsZXMuXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnQ7ICsraSkge1xuICAgICAgICByYWRpdXMgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICAgIHJhZGl1cy55ID0gc3RyYW5kW2ldLnJhZGl1cztcbiAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICAgIHN0cmFuZFtpIC0gMV0uaW5pdGlhbFBvc2l0aW9uLnggKyByYWRpdXMueCxcbiAgICAgICAgICBzdHJhbmRbaSAtIDFdLmluaXRpYWxQb3NpdGlvbi55ICsgcmFkaXVzLnlcbiAgICAgICAgKTtcbiAgICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi54LFxuICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueVxuICAgICAgICApO1xuICAgICAgICBzdHJhbmRbaV0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi54LFxuICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueVxuICAgICAgICApO1xuICAgICAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIC0xLjApO1xuICAgICAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkueSAqPSAtMS4wO1xuICAgICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICAgIHN0cmFuZFtpXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfcGh5c2ljc1JpZzogQ3ViaXNtUGh5c2ljc1JpZzsgLy8g54mp55CG5ryU566X44Gu44OH44O844K/XG4gIF9vcHRpb25zOiBPcHRpb25zOyAvLyDjgqrjg5fjgrfjg6fjg7NcblxuICBfY3VycmVudFJpZ091dHB1dHM6IGNzbVZlY3RvcjxQaHlzaWNzT3V0cHV0PjsgLy8vPCDmnIDmlrDjga7mjK/jgorlrZDoqIjnrpfjga7ntZDmnpxcbiAgX3ByZXZpb3VzUmlnT3V0cHV0czogY3NtVmVjdG9yPFBoeXNpY3NPdXRwdXQ+OyAvLy88IOS4gOOBpOWJjeOBruaMr+OCiuWtkOioiOeul+OBrue1kOaenFxuXG4gIF9jdXJyZW50UmVtYWluVGltZTogbnVtYmVyOyAvLy88IOeJqeeQhua8lOeul+OBjOWHpueQhuOBl+OBpuOBhOOBquOBhOaZgumWk1xuXG4gIF9wYXJhbWV0ZXJDYWNoZXM6IEZsb2F0MzJBcnJheTsgLy8vPCBFdmFsdWF0ZeOBp+WIqeeUqOOBmeOCi+ODkeODqeODoeODvOOCv+OBruOCreODo+ODg+OCt+ODpVxuICBfcGFyYW1ldGVySW5wdXRDYWNoZXM6IEZsb2F0MzJBcnJheTsgLy8vPCBVcGRhdGVQYXJ0aWNsZXPjgYzli5XjgY/jgajjgY3jga7lhaXlipvjgpLjgq3jg6Pjg4Pjgrfjg6Vcbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7jgqrjg5fjgrfjg6fjg7NcbiAqL1xuZXhwb3J0IGNsYXNzIE9wdGlvbnMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgfVxuXG4gIGdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7IC8vIOmHjeWKm+aWueWQkVxuICB3aW5kOiBDdWJpc21WZWN0b3IyOyAvLyDpoqjjga7mlrnlkJFcbn1cblxuLyoqXG4gKiDjg5Hjg6njg6Hjg7zjgr/jgavpgannlKjjgZnjgovliY3jga7niannkIbmvJTnrpfjga7lh7rlipvntZDmnpxcbiAqL1xuZXhwb3J0IGNsYXNzIFBoeXNpY3NPdXRwdXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm91dHB1dHMgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oMCk7XG4gIH1cblxuICBvdXRwdXRzOiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g54mp55CG5ryU566X5Ye65Yqb57WQ5p6cXG59XG5cbi8qKlxuICogR2V0cyBzaWduLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBFdmFsdWF0aW9uIHRhcmdldCB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJuIFNpZ24gb2YgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNpZ24odmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gIGxldCByZXQgPSAwO1xuXG4gIGlmICh2YWx1ZSA+IDAuMCkge1xuICAgIHJldCA9IDE7XG4gIH0gZWxzZSBpZiAodmFsdWUgPCAwLjApIHtcbiAgICByZXQgPSAtMTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgdmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgd2VpZ2h0OiBudW1iZXJcbik6IHZvaWQge1xuICB0YXJnZXRUcmFuc2xhdGlvbi54ICs9XG4gICAgbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXG4gICAgICB2YWx1ZSxcbiAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcbiAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZSxcbiAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtLFxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0sXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCxcbiAgICAgIGlzSW52ZXJ0ZWRcbiAgICApICogd2VpZ2h0O1xufVxuXG5mdW5jdGlvbiBnZXRJbnB1dFRyYW5zbGF0aW9uWUZyb21Ob3JtYWxpemVkUGFyYW10ZXJWYWx1ZShcbiAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgdmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgd2VpZ2h0OiBudW1iZXJcbik6IHZvaWQge1xuICB0YXJnZXRUcmFuc2xhdGlvbi55ICs9XG4gICAgbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXG4gICAgICB2YWx1ZSxcbiAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcbiAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZSxcbiAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtLFxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0sXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCxcbiAgICAgIGlzSW52ZXJ0ZWRcbiAgICApICogd2VpZ2h0O1xufVxuXG5mdW5jdGlvbiBnZXRJbnB1dEFuZ2xlRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgdmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgbm9ybWFsaXphaXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gIHdlaWdodDogbnVtYmVyXG4pOiB2b2lkIHtcbiAgdGFyZ2V0QW5nbGUuYW5nbGUgKz1cbiAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICAgIHZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlLFxuICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlLm1pbmltdW0sXG4gICAgICBub3JtYWxpemF0aW9uQW5nbGUubWF4aW11bSxcbiAgICAgIG5vcm1hbGl6YXRpb25BbmdsZS5kZWZhbHV0LFxuICAgICAgaXNJbnZlcnRlZFxuICAgICkgKiB3ZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIGdldE91dHB1dFRyYW5zbGF0aW9uWChcbiAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuKTogbnVtYmVyIHtcbiAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXIgPSB0cmFuc2xhdGlvbi54O1xuXG4gIGlmIChpc0ludmVydGVkKSB7XG4gICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0VHJhbnNsYXRpb25ZKFxuICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICBpc0ludmVydGVkOiBib29sZWFuLFxuICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXG4pOiBudW1iZXIge1xuICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlciA9IHRyYW5zbGF0aW9uLnk7XG5cbiAgaWYgKGlzSW52ZXJ0ZWQpIHtcbiAgICBvdXRwdXRWYWx1ZSAqPSAtMS4wO1xuICB9XG4gIHJldHVybiBvdXRwdXRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0QW5nbGUoXG4gIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXG4gIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcbik6IG51bWJlciB7XG4gIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyO1xuXG4gIGlmIChwYXJ0aWNsZUluZGV4ID49IDIpIHtcbiAgICBwYXJlbnRHcmF2aXR5ID0gcGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi5zdWJzdHJhY3QoXG4gICAgICBwYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDJdLnBvc2l0aW9uXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRHcmF2aXR5ID0gcGFyZW50R3Jhdml0eS5tdWx0aXBseUJ5U2NhbGVyKC0xLjApO1xuICB9XG5cbiAgb3V0cHV0VmFsdWUgPSBDdWJpc21NYXRoLmRpcmVjdGlvblRvUmFkaWFuKHBhcmVudEdyYXZpdHksIHRyYW5zbGF0aW9uKTtcblxuICBpZiAoaXNJbnZlcnRlZCkge1xuICAgIG91dHB1dFZhbHVlICo9IC0xLjA7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0VmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldFJhbmdlVmFsdWUobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgY29uc3QgbWF4VmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWF4KG1pbiwgbWF4KTtcbiAgY29uc3QgbWluVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKG1pbiwgbWF4KTtcblxuICByZXR1cm4gQ3ViaXNtTWF0aC5hYnMobWF4VmFsdWUgLSBtaW5WYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRWYWx1ZShtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4obWluLCBtYXgpO1xuICByZXR1cm4gbWluVmFsdWUgKyBnZXRSYW5nZVZhbHVlKG1pbiwgbWF4KSAvIDIuMDtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblgoXG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gIGFuZ2xlU2NhbGU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJhbnNsYXRpb25TY2FsZS54KSk7XG59XG5cbmZ1bmN0aW9uIGdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25ZKFxuICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLFxuICBhbmdsZVNjYWxlOiBudW1iZXJcbik6IG51bWJlciB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRyYW5zbGF0aW9uU2NhbGUueSkpO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRwdXRTY2FsZUFuZ2xlKFxuICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLFxuICBhbmdsZVNjYWxlOiBudW1iZXJcbik6IG51bWJlciB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFuZ2xlU2NhbGUpKTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHBhcnRpY2xlcy5cbiAqXG4gKiBAcGFyYW0gc3RyYW5kICAgICAgICAgICAgICAgIFRhcmdldCBhcnJheSBvZiBwYXJ0aWNsZS5cbiAqIEBwYXJhbSBzdHJhbmRDb3VudCAgICAgICAgICAgQ291bnQgb2YgcGFydGljbGUuXG4gKiBAcGFyYW0gdG90YWxUcmFuc2xhdGlvbiAgICAgIFRvdGFsIHRyYW5zbGF0aW9uIHZhbHVlLlxuICogQHBhcmFtIHRvdGFsQW5nbGUgICAgICAgICAgICBUb3RhbCBhbmdsZS5cbiAqIEBwYXJhbSB3aW5kRGlyZWN0aW9uICAgICAgICAgRGlyZWN0aW9uIG9mIFdpbmQuXG4gKiBAcGFyYW0gdGhyZXNob2xkVmFsdWUgICAgICAgIFRocmVzaG9sZCBvZiBtb3ZlbWVudC5cbiAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzICAgICAgRGVsdGEgdGltZS5cbiAqIEBwYXJhbSBhaXJSZXNpc3RhbmNlICAgICAgICAgQWlyIHJlc2lzdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVBhcnRpY2xlcyhcbiAgc3RyYW5kOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgc3RyYW5kQ291bnQ6IG51bWJlcixcbiAgdG90YWxUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdG90YWxBbmdsZTogbnVtYmVyLFxuICB3aW5kRGlyZWN0aW9uOiBDdWJpc21WZWN0b3IyLFxuICB0aHJlc2hvbGRWYWx1ZTogbnVtYmVyLFxuICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIsXG4gIGFpclJlc2lzdGFuY2U6IG51bWJlclxuKSB7XG4gIGxldCB0b3RhbFJhZGlhbjogbnVtYmVyO1xuICBsZXQgZGVsYXk6IG51bWJlcjtcbiAgbGV0IHJhZGlhbjogbnVtYmVyO1xuICBsZXQgY3VycmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7XG4gIGxldCBkaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gIGxldCB2ZWxvY2l0eTogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgbGV0IGZvcmNlOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICBsZXQgbmV3RGlyZWN0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuXG4gIHN0cmFuZFswXS5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgIHRvdGFsVHJhbnNsYXRpb24ueCxcbiAgICB0b3RhbFRyYW5zbGF0aW9uLnlcbiAgKTtcblxuICB0b3RhbFJhZGlhbiA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKHRvdGFsQW5nbGUpO1xuICBjdXJyZW50R3Jhdml0eSA9IEN1YmlzbU1hdGgucmFkaWFuVG9EaXJlY3Rpb24odG90YWxSYWRpYW4pO1xuICBjdXJyZW50R3Jhdml0eS5ub3JtYWxpemUoKTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IHN0cmFuZENvdW50OyArK2kpIHtcbiAgICBzdHJhbmRbaV0uZm9yY2UgPSBjdXJyZW50R3Jhdml0eVxuICAgICAgLm11bHRpcGx5QnlTY2FsZXIoc3RyYW5kW2ldLmFjY2VsZXJhdGlvbilcbiAgICAgIC5hZGQod2luZERpcmVjdGlvbik7XG5cbiAgICBzdHJhbmRbaV0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24ueCxcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi55XG4gICAgKTtcblxuICAgIGRlbGF5ID0gc3RyYW5kW2ldLmRlbGF5ICogZGVsdGFUaW1lU2Vjb25kcyAqIDMwLjA7XG5cbiAgICBkaXJlY3Rpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpIC0gMV0ucG9zaXRpb24pO1xuXG4gICAgcmFkaWFuID1cbiAgICAgIEN1YmlzbU1hdGguZGlyZWN0aW9uVG9SYWRpYW4oc3RyYW5kW2ldLmxhc3RHcmF2aXR5LCBjdXJyZW50R3Jhdml0eSkgL1xuICAgICAgYWlyUmVzaXN0YW5jZTtcblxuICAgIGRpcmVjdGlvbi54ID1cbiAgICAgIEN1YmlzbU1hdGguY29zKHJhZGlhbikgKiBkaXJlY3Rpb24ueCAtXG4gICAgICBkaXJlY3Rpb24ueSAqIEN1YmlzbU1hdGguc2luKHJhZGlhbik7XG4gICAgZGlyZWN0aW9uLnkgPVxuICAgICAgQ3ViaXNtTWF0aC5zaW4ocmFkaWFuKSAqIGRpcmVjdGlvbi54ICtcbiAgICAgIGRpcmVjdGlvbi55ICogQ3ViaXNtTWF0aC5jb3MocmFkaWFuKTtcblxuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpIC0gMV0ucG9zaXRpb24uYWRkKGRpcmVjdGlvbik7XG5cbiAgICB2ZWxvY2l0eSA9IHN0cmFuZFtpXS52ZWxvY2l0eS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KTtcbiAgICBmb3JjZSA9IHN0cmFuZFtpXS5mb3JjZS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KTtcblxuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5hZGQodmVsb2NpdHkpLmFkZChmb3JjZSk7XG5cbiAgICBuZXdEaXJlY3Rpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpIC0gMV0ucG9zaXRpb24pO1xuICAgIG5ld0RpcmVjdGlvbi5ub3JtYWxpemUoKTtcblxuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpIC0gMV0ucG9zaXRpb24uYWRkKFxuICAgICAgbmV3RGlyZWN0aW9uLm11bHRpcGx5QnlTY2FsZXIoc3RyYW5kW2ldLnJhZGl1cylcbiAgICApO1xuXG4gICAgaWYgKEN1YmlzbU1hdGguYWJzKHN0cmFuZFtpXS5wb3NpdGlvbi54KSA8IHRocmVzaG9sZFZhbHVlKSB7XG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24ueCA9IDAuMDtcbiAgICB9XG5cbiAgICBpZiAoZGVsYXkgIT0gMC4wKSB7XG4gICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpXS5sYXN0UG9zaXRpb24pO1xuICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5LmRpdmlzaW9uQnlTY2FsYXIoZGVsYXkpO1xuICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5Lm11bHRpcGx5QnlTY2FsZXIoXG4gICAgICAgIHN0cmFuZFtpXS5tb2JpbGl0eVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBzdHJhbmRbaV0uZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgc3RyYW5kW2ldLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICBjdXJyZW50R3Jhdml0eS54LFxuICAgICAgY3VycmVudEdyYXZpdHkueVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBVcGRhdGVzIHBhcnRpY2xlcyBmb3Igc3RhYmlsaXphdGlvbi5cbiAqXG4gKiBAcGFyYW0gc3RyYW5kICAgICAgICAgICAgICAgIFRhcmdldCBhcnJheSBvZiBwYXJ0aWNsZS5cbiAqIEBwYXJhbSBzdHJhbmRDb3VudCAgICAgICAgICAgQ291bnQgb2YgcGFydGljbGUuXG4gKiBAcGFyYW0gdG90YWxUcmFuc2xhdGlvbiAgICAgIFRvdGFsIHRyYW5zbGF0aW9uIHZhbHVlLlxuICogQHBhcmFtIHRvdGFsQW5nbGUgICAgICAgICAgICBUb3RhbCBhbmdsZS5cbiAqIEBwYXJhbSB3aW5kRGlyZWN0aW9uICAgICAgICAgRGlyZWN0aW9uIG9mIFdpbmQuXG4gKiBAcGFyYW0gdGhyZXNob2xkVmFsdWUgICAgICAgIFRocmVzaG9sZCBvZiBtb3ZlbWVudC5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlUGFydGljbGVzRm9yU3RhYmlsaXphdGlvbihcbiAgc3RyYW5kOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgc3RyYW5kQ291bnQ6IG51bWJlcixcbiAgdG90YWxUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdG90YWxBbmdsZTogbnVtYmVyLFxuICB3aW5kRGlyZWN0aW9uOiBDdWJpc21WZWN0b3IyLFxuICB0aHJlc2hvbGRWYWx1ZTogbnVtYmVyXG4pIHtcbiAgbGV0IHRvdGFsUmFkaWFuOiBudW1iZXI7XG4gIGxldCBjdXJyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMjtcbiAgbGV0IGZvcmNlOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuXG4gIHN0cmFuZFswXS5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgIHRvdGFsVHJhbnNsYXRpb24ueCxcbiAgICB0b3RhbFRyYW5zbGF0aW9uLnlcbiAgKTtcblxuICB0b3RhbFJhZGlhbiA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKHRvdGFsQW5nbGUpO1xuICBjdXJyZW50R3Jhdml0eSA9IEN1YmlzbU1hdGgucmFkaWFuVG9EaXJlY3Rpb24odG90YWxSYWRpYW4pO1xuICBjdXJyZW50R3Jhdml0eS5ub3JtYWxpemUoKTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IHN0cmFuZENvdW50OyArK2kpIHtcbiAgICBzdHJhbmRbaV0uZm9yY2UgPSBjdXJyZW50R3Jhdml0eVxuICAgICAgLm11bHRpcGx5QnlTY2FsZXIoc3RyYW5kW2ldLmFjY2VsZXJhdGlvbilcbiAgICAgIC5hZGQod2luZERpcmVjdGlvbik7XG5cbiAgICBzdHJhbmRbaV0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24ueCxcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi55XG4gICAgKTtcblxuICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICBmb3JjZSA9IHN0cmFuZFtpXS5mb3JjZTtcbiAgICBmb3JjZS5ub3JtYWxpemUoKTtcblxuICAgIGZvcmNlID0gZm9yY2UubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0ucmFkaXVzKTtcbiAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBzdHJhbmRbaSAtIDFdLnBvc2l0aW9uLmFkZChmb3JjZSk7XG5cbiAgICBpZiAoQ3ViaXNtTWF0aC5hYnMoc3RyYW5kW2ldLnBvc2l0aW9uLngpIDwgdGhyZXNob2xkVmFsdWUpIHtcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi54ID0gMC4wO1xuICAgIH1cblxuICAgIHN0cmFuZFtpXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgIGN1cnJlbnRHcmF2aXR5LngsXG4gICAgICBjdXJyZW50R3Jhdml0eS55XG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIFVwZGF0ZXMgb3V0cHV0IHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSAgICAgICAgICAgIFRhcmdldCBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWVNaW5pbXVtICAgICBNaW5pbXVtIG9mIHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZU1heGltdW0gICAgIE1heGltdW0gb2YgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHRyYW5zbGF0aW9uICAgICAgICAgICAgICAgVHJhbnNsYXRpb24gdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxuICBwYXJhbWV0ZXJWYWx1ZTogRmxvYXQzMkFycmF5LFxuICBwYXJhbWV0ZXJWYWx1ZU1pbmltdW06IG51bWJlcixcbiAgcGFyYW1ldGVyVmFsdWVNYXhpbXVtOiBudW1iZXIsXG4gIHRyYW5zbGF0aW9uOiBudW1iZXIsXG4gIG91dHB1dDogQ3ViaXNtUGh5c2ljc091dHB1dFxuKTogdm9pZCB7XG4gIGxldCBvdXRwdXRTY2FsZTogbnVtYmVyO1xuICBsZXQgdmFsdWU6IG51bWJlcjtcbiAgbGV0IHdlaWdodDogbnVtYmVyO1xuXG4gIG91dHB1dFNjYWxlID0gb3V0cHV0LmdldFNjYWxlKG91dHB1dC50cmFuc2xhdGlvblNjYWxlLCBvdXRwdXQuYW5nbGVTY2FsZSk7XG5cbiAgdmFsdWUgPSB0cmFuc2xhdGlvbiAqIG91dHB1dFNjYWxlO1xuXG4gIGlmICh2YWx1ZSA8IHBhcmFtZXRlclZhbHVlTWluaW11bSkge1xuICAgIGlmICh2YWx1ZSA8IG91dHB1dC52YWx1ZUJlbG93TWluaW11bSkge1xuICAgICAgb3V0cHV0LnZhbHVlQmVsb3dNaW5pbXVtID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFsdWUgPSBwYXJhbWV0ZXJWYWx1ZU1pbmltdW07XG4gIH0gZWxzZSBpZiAodmFsdWUgPiBwYXJhbWV0ZXJWYWx1ZU1heGltdW0pIHtcbiAgICBpZiAodmFsdWUgPiBvdXRwdXQudmFsdWVFeGNlZWRlZE1heGltdW0pIHtcbiAgICAgIG91dHB1dC52YWx1ZUV4Y2VlZGVkTWF4aW11bSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHZhbHVlID0gcGFyYW1ldGVyVmFsdWVNYXhpbXVtO1xuICB9XG5cbiAgd2VpZ2h0ID0gb3V0cHV0LndlaWdodCAvIE1heGltdW1XZWlnaHQ7XG5cbiAgaWYgKHdlaWdodCA+PSAxLjApIHtcbiAgICBwYXJhbWV0ZXJWYWx1ZVswXSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gcGFyYW1ldGVyVmFsdWVbMF0gKiAoMS4wIC0gd2VpZ2h0KSArIHZhbHVlICogd2VpZ2h0O1xuICAgIHBhcmFtZXRlclZhbHVlWzBdID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXG4gIHZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlck1pbmltdW06IG51bWJlcixcbiAgcGFyYW1ldGVyTWF4aW11bTogbnVtYmVyLFxuICBwYXJhbWV0ZXJEZWZhdWx0OiBudW1iZXIsXG4gIG5vcm1hbGl6ZWRNaW5pbXVtOiBudW1iZXIsXG4gIG5vcm1hbGl6ZWRNYXhpbXVtOiBudW1iZXIsXG4gIG5vcm1hbGl6ZWREZWZhdWx0OiBudW1iZXIsXG4gIGlzSW52ZXJ0ZWQ6IGJvb2xlYW5cbikge1xuICBsZXQgcmVzdWx0ID0gMC4wO1xuXG4gIGNvbnN0IG1heFZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1heChwYXJhbWV0ZXJNYXhpbXVtLCBwYXJhbWV0ZXJNaW5pbXVtKTtcblxuICBpZiAobWF4VmFsdWUgPCB2YWx1ZSkge1xuICAgIHZhbHVlID0gbWF4VmFsdWU7XG4gIH1cblxuICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4ocGFyYW1ldGVyTWF4aW11bSwgcGFyYW1ldGVyTWluaW11bSk7XG5cbiAgaWYgKG1pblZhbHVlID4gdmFsdWUpIHtcbiAgICB2YWx1ZSA9IG1pblZhbHVlO1xuICB9XG5cbiAgY29uc3QgbWluTm9ybVZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihcbiAgICBub3JtYWxpemVkTWluaW11bSxcbiAgICBub3JtYWxpemVkTWF4aW11bVxuICApO1xuICBjb25zdCBtYXhOb3JtVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWF4KFxuICAgIG5vcm1hbGl6ZWRNaW5pbXVtLFxuICAgIG5vcm1hbGl6ZWRNYXhpbXVtXG4gICk7XG4gIGNvbnN0IG1pZGRsZU5vcm1WYWx1ZTogbnVtYmVyID0gbm9ybWFsaXplZERlZmF1bHQ7XG5cbiAgY29uc3QgbWlkZGxlVmFsdWU6IG51bWJlciA9IGdldERlZmF1bHRWYWx1ZShtaW5WYWx1ZSwgbWF4VmFsdWUpO1xuICBjb25zdCBwYXJhbVZhbHVlOiBudW1iZXIgPSB2YWx1ZSAtIG1pZGRsZVZhbHVlO1xuXG4gIHN3aXRjaCAoc2lnbihwYXJhbVZhbHVlKSkge1xuICAgIGNhc2UgMToge1xuICAgICAgY29uc3Qgbkxlbmd0aDogbnVtYmVyID0gbWF4Tm9ybVZhbHVlIC0gbWlkZGxlTm9ybVZhbHVlO1xuICAgICAgY29uc3QgcExlbmd0aDogbnVtYmVyID0gbWF4VmFsdWUgLSBtaWRkbGVWYWx1ZTtcblxuICAgICAgaWYgKHBMZW5ndGggIT0gMC4wKSB7XG4gICAgICAgIHJlc3VsdCA9IHBhcmFtVmFsdWUgKiAobkxlbmd0aCAvIHBMZW5ndGgpO1xuICAgICAgICByZXN1bHQgKz0gbWlkZGxlTm9ybVZhbHVlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAtMToge1xuICAgICAgY29uc3Qgbkxlbmd0aDogbnVtYmVyID0gbWluTm9ybVZhbHVlIC0gbWlkZGxlTm9ybVZhbHVlO1xuICAgICAgY29uc3QgcExlbmd0aDogbnVtYmVyID0gbWluVmFsdWUgLSBtaWRkbGVWYWx1ZTtcblxuICAgICAgaWYgKHBMZW5ndGggIT0gMC4wKSB7XG4gICAgICAgIHJlc3VsdCA9IHBhcmFtVmFsdWUgKiAobkxlbmd0aCAvIHBMZW5ndGgpO1xuICAgICAgICByZXN1bHQgKz0gbWlkZGxlTm9ybVZhbHVlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAwOiB7XG4gICAgICByZXN1bHQgPSBtaWRkbGVOb3JtVmFsdWU7XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXNJbnZlcnRlZCA/IHJlc3VsdCA6IHJlc3VsdCAqIC0xLjA7XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXBoeXNpY3MnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3MgPSAkLkN1YmlzbVBoeXNpY3M7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3MgPSAkLkN1YmlzbVBoeXNpY3M7XG4gIGV4cG9ydCBjb25zdCBPcHRpb25zID0gJC5PcHRpb25zO1xuICBleHBvcnQgdHlwZSBPcHRpb25zID0gJC5PcHRpb25zO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21WZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7pgannlKjlhYjjga7nqK7poZ5cbiAqL1xuZXhwb3J0IGVudW0gQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUge1xuICBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZV9QYXJhbWV0ZXIsIC8vIOODkeODqeODoeODvOOCv+OBq+WvvuOBl+OBpumBqeeUqFxufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruWFpeWKm+OBrueorumhnlxuICovXG5leHBvcnQgZW51bSBDdWJpc21QaHlzaWNzU291cmNlIHtcbiAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9YLCAvLyBY6Lu444Gu5L2N572u44GL44KJXG4gIEN1YmlzbVBoeXNpY3NTb3VyY2VfWSwgLy8gWei7uOOBruS9jee9ruOBi+OCiVxuICBDdWJpc21QaHlzaWNzU291cmNlX0FuZ2xlLCAvLyDop5LluqbjgYvjgolcbn1cblxuLyoqXG4gKiBAYnJpZWYg54mp55CG5ryU566X44Gn5L2/55So44GZ44KL5aSW6YOo44Gu5YqbXG4gKlxuICog54mp55CG5ryU566X44Gn5L2/55So44GZ44KL5aSW6YOo44Gu5Yqb44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBQaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMud2luZCA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICB9XG4gIGdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7IC8vIOmHjeWKm1xuICB3aW5kOiBDdWJpc21WZWN0b3IyOyAvLyDpoqhcbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIge1xuICBpZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv1xuICB0YXJnZXRUeXBlOiBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZTsgLy8g6YGp55So5YWI44Gu56iu6aGeXG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu5q2j6KaP5YyW5oOF5aCxXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbiB7XG4gIG1pbmltdW06IG51bWJlcjsgLy8g5pyA5aSn5YCkXG4gIG1heGltdW06IG51bWJlcjsgLy8g5pyA5bCP5YCkXG4gIGRlZmFsdXQ6IG51bWJlcjsgLy8g44OH44OV44Kp44Or44OI5YCkXG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu5ryU566X5aeU5L2/55So44GZ44KL54mp55CG54K544Gu5oOF5aCxXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzUGFydGljbGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICB9XG5cbiAgaW5pdGlhbFBvc2l0aW9uOiBDdWJpc21WZWN0b3IyOyAvLyDliJ3mnJ/kvY3nva5cbiAgbW9iaWxpdHk6IG51bWJlcjsgLy8g5YuV44GN44KE44GZ44GVXG4gIGRlbGF5OiBudW1iZXI7IC8vIOmBheOCjFxuICBhY2NlbGVyYXRpb246IG51bWJlcjsgLy8g5Yqg6YCf5bqmXG4gIHJhZGl1czogbnVtYmVyOyAvLyDot53pm6JcbiAgcG9zaXRpb246IEN1YmlzbVZlY3RvcjI7IC8vIOePvuWcqOOBruS9jee9rlxuICBsYXN0UG9zaXRpb246IEN1YmlzbVZlY3RvcjI7IC8vIOacgOW+jOOBruS9jee9rlxuICBsYXN0R3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g5pyA5b6M44Gu6YeN5YqbXG4gIGZvcmNlOiBDdWJpc21WZWN0b3IyOyAvLyDnj77lnKjjgYvjgYvjgaPjgabjgYTjgovliptcbiAgdmVsb2NpdHk6IEN1YmlzbVZlY3RvcjI7IC8vIOePvuWcqOOBrumAn+W6plxufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBrueuoeeQhlxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1N1YlJpZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubm9ybWFsaXphdGlvblBvc2l0aW9uID0gbmV3IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uKCk7XG4gICAgdGhpcy5ub3JtYWxpemF0aW9uQW5nbGUgPSBuZXcgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24oKTtcbiAgfVxuICBpbnB1dENvdW50OiBudW1iZXI7IC8vIOWFpeWKm+OBruWAi+aVsFxuICBvdXRwdXRDb3VudDogbnVtYmVyOyAvLyDlh7rlipvjga7lgIvmlbBcbiAgcGFydGljbGVDb3VudDogbnVtYmVyOyAvLyDniannkIbngrnjga7lgIvmlbBcbiAgYmFzZUlucHV0SW5kZXg6IG51bWJlcjsgLy8g5YWl5Yqb44Gu5pyA5Yid44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIGJhc2VPdXRwdXRJbmRleDogbnVtYmVyOyAvLyDlh7rlipvjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgYmFzZVBhcnRpY2xlSW5kZXg6IG51bWJlcjsgLy8g54mp55CG54K544Gu5pyA5Yid44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247IC8vIOato+imj+WMluOBleOCjOOBn+S9jee9rlxuICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uOyAvLyDmraPopo/ljJbjgZXjgozjgZ/op5LluqZcbn1cblxuLyoqXG4gKiDmraPopo/ljJbjgZXjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7lj5blvpfplqLmlbDjga7lrqPoqIBcbiAqIEBwYXJhbSB0YXJnZXRUcmFuc2xhdGlvbiAgICAgLy8g5ryU566X57WQ5p6c44Gu56e75YuV5YCkXG4gKiBAcGFyYW0gdGFyZ2V0QW5nbGUgICAgICAgICAgIC8vIOa8lOeul+e1kOaenOOBruinkuW6plxuICogQHBhcmFtIHZhbHVlICAgICAgICAgICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAqIEBwYXJhbSBwYXJhbWV0ZXJNaW5pbXVuVmFsdWUgLy8g44OR44Op44Oh44O844K/44Gu5pyA5bCP5YCkXG4gKiBAcGFyYW0gcGFyYW1ldGVyTWF4aW11bVZhbHVlIC8vIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApFxuICogQHBhcmFtIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSAvLyDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKRcbiAqIEBwYXJhbSBub3JtYWxpemF0aW9uUG9zaXRpb24gLy8g5q2j6KaP5YyW44GV44KM44Gf5L2N572uXG4gKiBAcGFyYW0gbm9ybWFsaXphdGlvbkFuZ2xlICAgIC8vIOato+imj+WMluOBleOCjOOBn+inkuW6plxuICogQHBhcmFtIGlzSW52ZXJ0ZWQgICAgICAgICAgICAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvvvJ9cbiAqIEBwYXJhbSB3ZWlnaHQgICAgICAgICAgICAgICAgLy8g6YeN44G/XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2Ugbm9ybWFsaXplZFBoeXNpY3NQYXJhbWV0ZXJWYWx1ZUdldHRlciB7XG4gIChcbiAgICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICB0YXJnZXRBbmdsZTogeyBhbmdsZTogbnVtYmVyIH0sXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNaW5pbXVuVmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IG51bWJlcixcbiAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICAgIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgICB3ZWlnaHQ6IG51bWJlclxuICApOiB2b2lkO1xufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruWApOOBruWPluW+l+mWouaVsOOBruWuo+iogFxuICogQHBhcmFtIHRyYW5zbGF0aW9uIOenu+WLleWApFxuICogQHBhcmFtIHBhcnRpY2xlcyDniannkIbngrnjga7jg6rjgrnjg4hcbiAqIEBwYXJhbSBpc0ludmVydGVkIOWApOOBjOWPjeaYoOOBleOCjOOBpuOBhOOCi+OBi1xuICogQHBhcmFtIHBhcmVudEdyYXZpdHkg6YeN5YqbXG4gKiBAcmV0dXJuIOWApFxuICovXG5leHBvcnQgaW50ZXJmYWNlIHBoeXNpY3NWYWx1ZUdldHRlciB7XG4gIChcbiAgICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICAgIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxuICAgIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcbiAgKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruOCueOCseODvOODq+OBruWPluW+l+mWouaVsOOBruWuo+iogFxuICogQHBhcmFtIHRyYW5zbGF0aW9uU2NhbGUg56e75YuV5YCk44Gu44K544Kx44O844OrXG4gKiBAcGFyYW0gYW5nbGVTY2FsZSAgICDop5Lluqbjga7jgrnjgrHjg7zjg6tcbiAqIEByZXR1cm4g44K544Kx44O844Or5YCkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgcGh5c2ljc1NjYWxlR2V0dGVyIHtcbiAgKHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsIGFuZ2xlU2NhbGU6IG51bWJlcik6IG51bWJlcjtcbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7lhaXlipvmg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NJbnB1dCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc291cmNlID0gbmV3IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIoKTtcbiAgfVxuICBzb3VyY2U6IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXI7IC8vIOWFpeWKm+WFg+OBruODkeODqeODoeODvOOCv1xuICBzb3VyY2VQYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDlhaXlipvlhYPjga7jg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgd2VpZ2h0OiBudW1iZXI7IC8vIOmHjeOBv1xuICB0eXBlOiBudW1iZXI7IC8vIOWFpeWKm+OBrueorumhnlxuICByZWZsZWN0OiBib29sZWFuOyAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlOiBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyOyAvLyDmraPopo/ljJbjgZXjgozjgZ/jg5Hjg6njg6Hjg7zjgr/lgKTjga7lj5blvpfplqLmlbBcbn1cblxuLyoqXG4gKiBAYnJpZWYg54mp55CG5ryU566X44Gu5Ye65Yqb5oOF5aCxXG4gKlxuICog54mp55CG5ryU566X44Gu5Ye65Yqb5oOF5aCx44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzT3V0cHV0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDdWJpc21QaHlzaWNzUGFyYW1ldGVyKCk7XG4gICAgdGhpcy50cmFuc2xhdGlvblNjYWxlID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gIH1cblxuICBkZXN0aW5hdGlvbjogQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjsgLy8g5Ye65Yqb5YWI44Gu44OR44Op44Oh44O844K/XG4gIGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg6IG51bWJlcjsgLy8g5Ye65Yqb5YWI44Gu44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIHZlcnRleEluZGV4OiBudW1iZXI7IC8vIOaMr+OCiuWtkOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyOyAvLyDnp7vli5XlgKTjga7jgrnjgrHjg7zjg6tcbiAgYW5nbGVTY2FsZTogbnVtYmVyOyAvLyDop5Lluqbjga7jgrnjgrHjg7zjg6tcbiAgd2VpZ2h0OiBudW1iZXI7IC8vIOmHjeOBv1xuICB0eXBlOiBDdWJpc21QaHlzaWNzU291cmNlOyAvLyDlh7rlipvjga7nqK7poZ5cbiAgcmVmbGVjdDogYm9vbGVhbjsgLy8g5YCk44GM5Y+N6Lui44GV44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gIHZhbHVlQmVsb3dNaW5pbXVtOiBudW1iZXI7IC8vIOacgOWwj+WApOOCkuS4i+WbnuOBo+OBn+aZguOBruWApFxuICB2YWx1ZUV4Y2VlZGVkTWF4aW11bTogbnVtYmVyOyAvLyDmnIDlpKflgKTjgpLjgZPjgYjjgZ/mmYLjga7lgKRcbiAgZ2V0VmFsdWU6IHBoeXNpY3NWYWx1ZUdldHRlcjsgLy8g54mp55CG5ryU566X44Gu5YCk44Gu5Y+W5b6X6Zai5pWwXG4gIGdldFNjYWxlOiBwaHlzaWNzU2NhbGVHZXR0ZXI7IC8vIOeJqeeQhua8lOeul+OBruOCueOCseODvOODq+WApOOBruWPluW+l+mWouaVsFxufVxuXG4vKipcbiAqIEBicmllZiDniannkIbmvJTnrpfjga7jg4fjg7zjgr9cbiAqXG4gKiDniannkIbmvJTnrpfjga7jg4fjg7zjgr/jgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NSaWcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNldHRpbmdzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzU3ViUmlnPigpO1xuICAgIHRoaXMuaW5wdXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzSW5wdXQ+KCk7XG4gICAgdGhpcy5vdXRwdXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzT3V0cHV0PigpO1xuICAgIHRoaXMucGFydGljbGVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzUGFydGljbGU+KCk7XG4gICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5mcHMgPSAwLjA7XG4gIH1cblxuICBzdWJSaWdDb3VudDogbnVtYmVyOyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7lgIvmlbBcbiAgc2V0dGluZ3M6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzU3ViUmlnPjsgLy8g54mp55CG5ryU566X44Gu54mp55CG54K544Gu566h55CG44Gu44Oq44K544OIXG4gIGlucHV0czogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NJbnB1dD47IC8vIOeJqeeQhua8lOeul+OBruWFpeWKm+OBruODquOCueODiFxuICBvdXRwdXRzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc091dHB1dD47IC8vIOeJqeeQhua8lOeul+OBruWHuuWKm+OBruODquOCueODiFxuICBwYXJ0aWNsZXM6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzUGFydGljbGU+OyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7jg6rjgrnjg4hcbiAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g6YeN5YqbXG4gIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqFxuICBmcHM6IG51bWJlcjsgLy/niannkIbmvJTnrpfli5XkvZxGUFNcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcGh5c2ljc2ludGVybmFsJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzSW5wdXQgPSAkLkN1YmlzbVBoeXNpY3NJbnB1dDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc0lucHV0ID0gJC5DdWJpc21QaHlzaWNzSW5wdXQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbiA9ICQuQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uID0gJC5DdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NPdXRwdXQgPSAkLkN1YmlzbVBoeXNpY3NPdXRwdXQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NPdXRwdXQgPSAkLkN1YmlzbVBoeXNpY3NPdXRwdXQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzUGFyYW1ldGVyID0gJC5DdWJpc21QaHlzaWNzUGFyYW1ldGVyO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzUGFyYW1ldGVyID0gJC5DdWJpc21QaHlzaWNzUGFyYW1ldGVyO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlID0gJC5DdWJpc21QaHlzaWNzUGFydGljbGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSA9ICQuQ3ViaXNtUGh5c2ljc1BhcnRpY2xlO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1JpZyA9ICQuQ3ViaXNtUGh5c2ljc1JpZztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1JpZyA9ICQuQ3ViaXNtUGh5c2ljc1JpZztcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NTb3VyY2UgPSAkLkN1YmlzbVBoeXNpY3NTb3VyY2U7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NTb3VyY2UgPSAkLkN1YmlzbVBoeXNpY3NTb3VyY2U7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzU3ViUmlnID0gJC5DdWJpc21QaHlzaWNzU3ViUmlnO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzU3ViUmlnID0gJC5DdWJpc21QaHlzaWNzU3ViUmlnO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUgPSAkLkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSA9ICQuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGU7XG4gIGV4cG9ydCBjb25zdCBQaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcyA9ICQuUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXM7XG4gIGV4cG9ydCB0eXBlIFBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzID0gJC5QaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcztcbiAgZXhwb3J0IHR5cGUgbm9ybWFsaXplZFBoeXNpY3NQYXJhbWV0ZXJWYWx1ZUdldHRlciA9XG4gICAgJC5ub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyO1xuICBleHBvcnQgdHlwZSBwaHlzaWNzU2NhbGVHZXR0ZXIgPSAkLnBoeXNpY3NTY2FsZUdldHRlcjtcbiAgZXhwb3J0IHR5cGUgcGh5c2ljc1ZhbHVlR2V0dGVyID0gJC5waHlzaWNzVmFsdWVHZXR0ZXI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21WZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcbmltcG9ydCB7IEN1YmlzbUpzb24gfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcblxuLy8gSlNPTiBrZXlzXG5jb25zdCBQb3NpdGlvbiA9ICdQb3NpdGlvbic7XG5jb25zdCBYID0gJ1gnO1xuY29uc3QgWSA9ICdZJztcbmNvbnN0IEFuZ2xlID0gJ0FuZ2xlJztcbmNvbnN0IFR5cGUgPSAnVHlwZSc7XG5jb25zdCBJZCA9ICdJZCc7XG5cbi8vIE1ldGFcbmNvbnN0IE1ldGEgPSAnTWV0YSc7XG5jb25zdCBFZmZlY3RpdmVGb3JjZXMgPSAnRWZmZWN0aXZlRm9yY2VzJztcbmNvbnN0IFRvdGFsSW5wdXRDb3VudCA9ICdUb3RhbElucHV0Q291bnQnO1xuY29uc3QgVG90YWxPdXRwdXRDb3VudCA9ICdUb3RhbE91dHB1dENvdW50JztcbmNvbnN0IFBoeXNpY3NTZXR0aW5nQ291bnQgPSAnUGh5c2ljc1NldHRpbmdDb3VudCc7XG5jb25zdCBHcmF2aXR5ID0gJ0dyYXZpdHknO1xuY29uc3QgV2luZCA9ICdXaW5kJztcbmNvbnN0IFZlcnRleENvdW50ID0gJ1ZlcnRleENvdW50JztcbmNvbnN0IEZwcyA9ICdGcHMnO1xuXG4vLyBQaHlzaWNzU2V0dGluZ3NcbmNvbnN0IFBoeXNpY3NTZXR0aW5ncyA9ICdQaHlzaWNzU2V0dGluZ3MnO1xuY29uc3QgTm9ybWFsaXphdGlvbiA9ICdOb3JtYWxpemF0aW9uJztcbmNvbnN0IE1pbmltdW0gPSAnTWluaW11bSc7XG5jb25zdCBNYXhpbXVtID0gJ01heGltdW0nO1xuY29uc3QgRGVmYXVsdCA9ICdEZWZhdWx0JztcbmNvbnN0IFJlZmxlY3QgPSAnUmVmbGVjdCc7XG5jb25zdCBXZWlnaHQgPSAnV2VpZ2h0JztcblxuLy8gSW5wdXRcbmNvbnN0IElucHV0ID0gJ0lucHV0JztcbmNvbnN0IFNvdXJjZSA9ICdTb3VyY2UnO1xuXG4vLyBPdXRwdXRcbmNvbnN0IE91dHB1dCA9ICdPdXRwdXQnO1xuY29uc3QgU2NhbGUgPSAnU2NhbGUnO1xuY29uc3QgVmVydGV4SW5kZXggPSAnVmVydGV4SW5kZXgnO1xuY29uc3QgRGVzdGluYXRpb24gPSAnRGVzdGluYXRpb24nO1xuXG4vLyBQYXJ0aWNsZVxuY29uc3QgVmVydGljZXMgPSAnVmVydGljZXMnO1xuY29uc3QgTW9iaWxpdHkgPSAnTW9iaWxpdHknO1xuY29uc3QgRGVsYXkgPSAnRGVsYXknO1xuY29uc3QgUmFkaXVzID0gJ1JhZGl1cyc7XG5jb25zdCBBY2NlbGVyYXRpb24gPSAnQWNjZWxlcmF0aW9uJztcblxuLyoqXG4gKiBwaHlzaWNzMy5qc29u44Gu44Kz44Oz44OG44OK44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzSnNvbiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIGJ1ZmZlciBwaHlzaWNzMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XG4gIH1cblxuICAvKipcbiAgICog6YeN5Yqb44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g6YeN5YqbXG4gICAqL1xuICBwdWJsaWMgZ2V0R3Jhdml0eSgpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhHcmF2aXR5KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoR3Jhdml0eSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAudG9GbG9hdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog6aKo44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g6aKoXG4gICAqL1xuICBwdWJsaWMgZ2V0V2luZCgpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXaW5kKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoV2luZClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAudG9GbG9hdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X6Kit5a6aRlBT44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g54mp55CG5ryU566X6Kit5a6aRlBTXG4gICAqL1xuICBwdWJsaWMgZ2V0RnBzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGcHMpXG4gICAgICAudG9GbG9hdCgwLjApO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhuW6l+OBrueuoeeQhuOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOeJqeeQhuW6l+OBrueuoeeQhuOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFN1YlJpZ0NvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ0NvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog5YWl5Yqb44Gu57eP5ZCI6KiI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu57eP5ZCI6KiIXG4gICAqL1xuICBwdWJsaWMgZ2V0VG90YWxJbnB1dENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbElucHV0Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICogQHJldHVybiDlh7rlipvjga7nt4/lkIjoqIhcbiAgICovXG4gIHB1YmxpYyBnZXRUb3RhbE91dHB1dENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbE91dHB1dENvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0VmVydGV4Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRleENvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5bCP5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruacgOWwj+WApFxuICAgKi9cbiAgcHVibGljIGdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1pbmltdW1WYWx1ZShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWluaW11bSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1heGltdW1WYWx1ZShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWF4aW11bSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu44OH44OV44Kp44Or44OI5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruODh+ODleOCqeODq+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbkRlZmF1bHRWYWx1ZShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRGVmYXVsdClcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5bCP5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruacgOWwj+WApFxuICAgKi9cbiAgcHVibGljIGdldE5vcm1hbGl6YXRpb25BbmdsZU1pbmltdW1WYWx1ZShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEFuZ2xlKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWluaW11bSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWF4aW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNYXhpbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu44OH44OV44Kp44Or44OI5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlRGVmYXVsdFZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWZhdWx0KVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhaXlipvjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0SW5wdXRDb3VudChwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcbiAgICAgIC5nZXRWZWN0b3IoKVxuICAgICAgLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhaXlipvjga7ph43jgb/jga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBpbnB1dEluZGV4IOWFpeWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWFpeWKm+OBrumHjeOBv1xuICAgKi9cbiAgcHVibGljIGdldElucHV0V2VpZ2h0KFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBpbnB1dEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXZWlnaHQpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBruWPjei7ouOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu5Y+N6LuiXG4gICAqL1xuICBwdWJsaWMgZ2V0SW5wdXRSZWZsZWN0KFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBpbnB1dEluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbnB1dEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUmVmbGVjdClcbiAgICAgIC50b0Jvb2xlYW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhaXlipvjga7nqK7poZ7jga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBpbnB1dEluZGV4IOWFpeWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWFpeWKm+OBrueorumhnlxuICAgKi9cbiAgcHVibGljIGdldElucHV0VHlwZShwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsIGlucHV0SW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbnB1dEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVHlwZSlcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhaXlipvlhYPjga5JROOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb5YWD44GuSURcbiAgICovXG4gIHB1YmxpYyBnZXRJbnB1dFNvdXJjZUlkKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBpbnB1dEluZGV4OiBudW1iZXJcbiAgKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNvdXJjZSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dENvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgIC5nZXRWZWN0b3IoKVxuICAgICAgLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7niannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvjga7niannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXRPdXRwdXRWZXJ0ZXhJbmRleChcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgb3V0cHV0SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KG91dHB1dEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGV4SW5kZXgpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7op5Lluqbjga7jgrnjgrHjg7zjg6vjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvjga7op5Lluqbjga7jgrnjgrHjg7zjg6tcbiAgICovXG4gIHB1YmxpYyBnZXRPdXRwdXRBbmdsZVNjYWxlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTY2FsZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb44Gu6YeN44G/44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu6YeN44G/XG4gICAqL1xuICBwdWJsaWMgZ2V0T3V0cHV0V2VpZ2h0KFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXZWlnaHQpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+WFiOOBrklE44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5Ye65Yqb5YWI44GuSURcbiAgICovXG4gIHB1YmxpYyBnZXRPdXRwdXREZXN0aW5hdGlvbklkKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICk6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKERlc3RpbmF0aW9uKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7nqK7poZ7jga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvjga7nqK7poZ5cbiAgICovXG4gIHB1YmxpYyBnZXRPdXRwdXRUeXBlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUeXBlKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBruWPjei7ouOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBruWPjei7olxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dFJlZmxlY3QoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSZWZsZWN0KVxuICAgICAgLnRvQm9vbGVhbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhueCueOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfnlLfoqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDniannkIbngrnjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJ0aWNsZUNvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhueCueOBruWLleOBjeOChOOBmeOBleOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWLleOBjeOChOOBmeOBlVxuICAgKi9cbiAgcHVibGljIGdldFBhcnRpY2xlTW9iaWxpdHkoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTW9iaWxpdHkpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhueCueOBrumBheOCjOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBrumBheOCjFxuICAgKi9cbiAgcHVibGljIGdldFBhcnRpY2xlRGVsYXkoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRGVsYXkpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhueCueOBruWKoOmAn+W6puOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrppcbiAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWKoOmAn+W6plxuICAgKi9cbiAgcHVibGljIGdldFBhcnRpY2xlQWNjZWxlcmF0aW9uKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICB2ZXJ0ZXhJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEFjY2VsZXJhdGlvbilcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu6Led6Zui44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu6Led6ZuiXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVSYWRpdXMoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUmFkaXVzKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbngrnjga7kvY3nva7jga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2ZXJ0ZXhJbmRlIOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruS9jee9rlxuICAgKi9cbiAgcHVibGljIGdldFBhcnRpY2xlUG9zaXRpb24oXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgcmV0LnggPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NpdGlvbilcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFgpXG4gICAgICAudG9GbG9hdCgpO1xuICAgIHJldC55ID0gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhZKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgX2pzb246IEN1YmlzbUpzb247IC8vIHBoeXNpY3MzLmpzb27jg4fjg7zjgr9cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcGh5c2ljc2pzb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NKc29uID0gJC5DdWJpc21QaHlzaWNzSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc0pzb24gPSAkLkN1YmlzbVBoeXNpY3NKc29uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdHJpeDQ0JztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuXG4vKipcbiAqIOODouODh+ODq+aPj+eUu+OCkuWHpueQhuOBmeOCi+ODrOODs+ODgOODqVxuICpcbiAqIOOCteODluOCr+ODqeOCueOBq+eSsOWig+S+neWtmOOBruaPj+eUu+WRveS7pOOCkuiomOi/sOOBmeOCi+OAglxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3ViaXNtUmVuZGVyZXIge1xuICAvKipcbiAgICog44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GX44Gm5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEByZXR1cm4g44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21SZW5kZXJlciB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K544KS6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShyZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXIpOiB2b2lkIHtcbiAgICByZW5kZXJlciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXG4gICAqIOW8leaVsOOBq+a4oeOBl+OBn+ODouODh+ODq+OBi+OCieODrOODs+ODgOODqeOBruWIneacn+WMluWHpueQhuOBq+W/heimgeOBquaDheWgseOCkuWPluOCiuWHuuOBmeOBk+OBqOOBjOOBp+OBjeOCi1xuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGRyYXdNb2RlbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5nZXRNb2RlbCgpID09IG51bGwpIHJldHVybjtcblxuICAgIHRoaXMuZG9EcmF3TW9kZWwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiX44KS44K744OD44OI44GZ44KLXG4gICAqIOmFjeWIl+OBr+ikh+ijveOBleOCjOOCi+OBruOBp+OAgeWFg+OBrumFjeWIl+OBr+WkluOBp+egtOajhOOBl+OBpuiJr+OBhFxuICAgKiBAcGFyYW0gbWF0cml4NDQgTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl1xuICAgKi9cbiAgcHVibGljIHNldE12cE1hdHJpeChtYXRyaXg0NDogQ3ViaXNtTWF0cml4NDQpOiB2b2lkIHtcbiAgICB0aGlzLl9tdnBNYXRyaXg0eDQuc2V0TWF0cml4KG1hdHJpeDQ0LmdldEFycmF5KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgZ2V0TXZwTWF0cml4KCk6IEN1YmlzbU1hdHJpeDQ0IHtcbiAgICByZXR1cm4gdGhpcy5fbXZwTWF0cml4NHg0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruiJsuOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiDlkIToibIwLjB+MS4w44Gu6ZaT44Gn5oyH5a6a44GZ44KL77yIMS4w44GM5qiZ5rqW44Gu54q25oWL77yJXG4gICAqIEBwYXJhbSByZWQg6LWk44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAqIEBwYXJhbSBncmVlbiDnt5Hjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcbiAgICogQHBhcmFtIGJsdWUg6Z2S44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAqIEBwYXJhbSBhbHBoYSDOseODgeODo+ODs+ODjeODq+OBruWApFxuICAgKi9cbiAgcHVibGljIHNldE1vZGVsQ29sb3IoXG4gICAgcmVkOiBudW1iZXIsXG4gICAgZ3JlZW46IG51bWJlcixcbiAgICBibHVlOiBudW1iZXIsXG4gICAgYWxwaGE6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICBpZiAocmVkIDwgMC4wKSB7XG4gICAgICByZWQgPSAwLjA7XG4gICAgfSBlbHNlIGlmIChyZWQgPiAxLjApIHtcbiAgICAgIHJlZCA9IDEuMDtcbiAgICB9XG5cbiAgICBpZiAoZ3JlZW4gPCAwLjApIHtcbiAgICAgIGdyZWVuID0gMC4wO1xuICAgIH0gZWxzZSBpZiAoZ3JlZW4gPiAxLjApIHtcbiAgICAgIGdyZWVuID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChibHVlIDwgMC4wKSB7XG4gICAgICBibHVlID0gMC4wO1xuICAgIH0gZWxzZSBpZiAoYmx1ZSA+IDEuMCkge1xuICAgICAgYmx1ZSA9IDEuMDtcbiAgICB9XG5cbiAgICBpZiAoYWxwaGEgPCAwLjApIHtcbiAgICAgIGFscGhhID0gMC4wO1xuICAgIH0gZWxzZSBpZiAoYWxwaGEgPiAxLjApIHtcbiAgICAgIGFscGhhID0gMS4wO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsQ29sb3IuUiA9IHJlZDtcbiAgICB0aGlzLl9tb2RlbENvbG9yLkcgPSBncmVlbjtcbiAgICB0aGlzLl9tb2RlbENvbG9yLkIgPSBibHVlO1xuICAgIHRoaXMuX21vZGVsQ29sb3IuQSA9IGFscGhhO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruiJsuOCkuWPluW+l+OBmeOCi1xuICAgKiDlkIToibIwLjB+MS4w44Gu6ZaT44Gn5oyH5a6a44GZ44KLKDEuMOOBjOaomea6luOBrueKtuaFiylcbiAgICpcbiAgICogQHJldHVybiBSR0JB44Gu44Kr44Op44O85oOF5aCxXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxDb2xvcigpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuX21vZGVsQ29sb3IpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuZfnrpfmuIjjgb/OseOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiDmnInlirnjgavjgZnjgovjgarjgol0cnVl44CB54Sh5Yq544Gr44GZ44KL44Gq44KJZmFsc2XjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzZXRJc1ByZW11bHRpcGxpZWRBbHBoYShlbmFibGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYSA9IGVuYWJsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuZfnrpfmuIjjgb/OseOBruacieWKueODu+eEoeWKueOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg5LmX566X5riI44G/44GuzrHmnInlirlcbiAgICogQHJldHVybiBmYWxzZSDkuZfnrpfmuIjjgb/jga7OseeEoeWKuVxuICAgKi9cbiAgcHVibGljIGlzUHJlbXVsdGlwbGllZEFscGhhKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqvjg6rjg7PjgrDvvIjniYfpnaLmj4/nlLvvvInjga7mnInlirnjg7vnhKHlirnjgpLjgrvjg4Pjg4jjgZnjgovjgIJcbiAgICog5pyJ5Yq544Gr44GZ44KL44Gq44KJdHJ1ZeOAgeeEoeWKueOBq+OBmeOCi+OBquOCiWZhbHNl44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0SXNDdWxsaW5nKGN1bGxpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9pc0N1bGxpbmcgPSBjdWxsaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuWPluW+l+OBmeOCi+OAglxuICAgKiBAcmV0dXJuIHRydWUg44Kr44Oq44Oz44Kw5pyJ5Yq5XG4gICAqIEByZXR1cm4gZmFsc2Ug44Kr44Oq44Oz44Kw54Sh5Yq5XG4gICAqL1xuICBwdWJsaWMgaXNDdWxsaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0N1bGxpbmc7XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/44KS44K744OD44OI44GZ44KLXG4gICAqIOODkeODqeODoeODvOOCv+WApOOBruW9semfv+W6puOBr+ODrOODs+ODgOODqeOBruWun+ijheOBq+S+neWtmOOBmeOCi1xuICAgKiBAcGFyYW0gbiDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAgICovXG4gIHB1YmxpYyBzZXRBbmlzb3Ryb3B5KG46IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2FuaXNvdHJvcHkgPSBuO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+OBrueVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcmV0dXJuIOeVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv1xuICAgKi9cbiAgcHVibGljIGdldEFuaXNvdHJvcHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYW5pc290cm9weTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6rjg7PjgrDjgZnjgovjg6Ljg4fjg6vjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6rjg7PjgrDjgZnjgovjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbCgpOiBDdWJpc21Nb2RlbCB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2lzQ3VsbGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG4gICAgdGhpcy5fYW5pc290cm9weSA9IDAuMDtcbiAgICB0aGlzLl9tb2RlbCA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWxDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcblxuICAgIC8vIOWNmOS9jeihjOWIl+OBq+WIneacn+WMllxuICAgIHRoaXMuX212cE1hdHJpeDR4NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX212cE1hdHJpeDR4NC5sb2FkSWRlbnRpdHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vmj4/nlLvjga7lrp/oo4VcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkb0RyYXdNb2RlbCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgotcbiAgICog44Od44Oq44K044Oz44Oh44OD44K344Ol44Go44OG44Kv44K544OB44Oj55Wq5Y+344KS44K744OD44OI44Gn5rih44GZ44CCXG4gICAqIEBwYXJhbSB0ZXh0dXJlTm8g5o+P55S744GZ44KL44OG44Kv44K544OB44Oj55Wq5Y+3XG4gICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXG4gICAqIEBwYXJhbSBpbmRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpemggueCueOBruOCpOODs+ODh+ODg+OCr+OCuemFjeWIl1xuICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXG4gICAqIEBwYXJhbSB1dkFycmF5IHV26YWN5YiXXG4gICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXG4gICAqIEBwYXJhbSBpbnZlcnRlZE1hc2sg44Oe44K544Kv5L2/55So5pmC44Gu44Oe44K544Kv44Gu5Y+N6Lui5L2/55SoXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZHJhd01lc2goXG4gICAgdGV4dHVyZU5vOiBudW1iZXIsXG4gICAgaW5kZXhDb3VudDogbnVtYmVyLFxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXG4gICAgaW5kZXhBcnJheTogVWludDE2QXJyYXksXG4gICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgbXVsdGlwbHlDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIHNjcmVlbkNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgb3BhY2l0eTogbnVtYmVyLFxuICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXG4gICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOBjOS/neaMgeOBmeOCi+mdmeeahOOBquODquOCveODvOOCueOCkumWi+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdGF0aWNSZWxlYXNlOiBhbnk7XG5cbiAgcHJvdGVjdGVkIF9tdnBNYXRyaXg0eDQ6IEN1YmlzbU1hdHJpeDQ0OyAvLyBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXG4gIHByb3RlY3RlZCBfbW9kZWxDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yOyAvLyDjg6Ljg4fjg6voh6rkvZPjga7jgqvjg6njg7zvvIhSR0JB77yJXG4gIHByb3RlY3RlZCBfaXNDdWxsaW5nOiBib29sZWFuOyAvLyDjgqvjg6rjg7PjgrDjgYzmnInlirnjgarjgol0cnVlXG4gIHByb3RlY3RlZCBfaXNQcmVtdWx0aXBsaWVkQWxwaGE6IGJvb2xlYW47IC8vIOS5l+eul+a4iOOBv86x44Gq44KJdHJ1ZVxuICBwcm90ZWN0ZWQgX2FuaXNvdHJvcHk6IGFueTsgLy8g44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gIHByb3RlY3RlZCBfbW9kZWw6IEN1YmlzbU1vZGVsOyAvLyDjg6zjg7Pjg4Djg6rjg7PjgrDlr77osaHjga7jg6Ljg4fjg6tcbn1cblxuZXhwb3J0IGVudW0gQ3ViaXNtQmxlbmRNb2RlIHtcbiAgQ3ViaXNtQmxlbmRNb2RlX05vcm1hbCA9IDAsIC8vIOmAmuW4uFxuICBDdWJpc21CbGVuZE1vZGVfQWRkaXRpdmUgPSAxLCAvLyDliqDnrpdcbiAgQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlID0gMiwgLy8g5LmX566XXG59XG5cbi8qKlxuICog44OG44Kv44K544OB44Oj44Gu6Imy44KSUkdCQeOBp+aJseOBhuOBn+OCgeOBruOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5SID0gMS4wO1xuICAgIHRoaXMuRyA9IDEuMDtcbiAgICB0aGlzLkIgPSAxLjA7XG4gICAgdGhpcy5BID0gMS4wO1xuICB9XG5cbiAgUjogbnVtYmVyOyAvLyDotaTjg4Hjg6Pjg7Pjg43jg6tcbiAgRzogbnVtYmVyOyAvLyDnt5Hjg4Hjg6Pjg7Pjg43jg6tcbiAgQjogbnVtYmVyOyAvLyDpnZLjg4Hjg6Pjg7Pjg43jg6tcbiAgQTogbnVtYmVyOyAvLyDOseODgeODo+ODs+ODjeODq1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21yZW5kZXJlcic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtQmxlbmRNb2RlID0gJC5DdWJpc21CbGVuZE1vZGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUJsZW5kTW9kZSA9ICQuQ3ViaXNtQmxlbmRNb2RlO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUmVuZGVyZXIgPSAkLkN1YmlzbVJlbmRlcmVyO1xuICBleHBvcnQgdHlwZSBDdWJpc21SZW5kZXJlciA9ICQuQ3ViaXNtUmVuZGVyZXI7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21UZXh0dXJlQ29sb3IgPSAkLkN1YmlzbVRleHR1cmVDb2xvcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtVGV4dHVyZUNvbG9yID0gJC5DdWJpc21UZXh0dXJlQ29sb3I7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDb25zdGFudCB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBjc21SZWN0IH0gZnJvbSAnLi4vdHlwZS9jc21yZWN0Zic7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Mb2dFcnJvciB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCB7XG4gIEN1YmlzbUJsZW5kTW9kZSxcbiAgQ3ViaXNtUmVuZGVyZXIsXG4gIEN1YmlzbVRleHR1cmVDb2xvcixcbn0gZnJvbSAnLi9jdWJpc21yZW5kZXJlcic7XG5cbmNvbnN0IENvbG9yQ2hhbm5lbENvdW50ID0gNDsgLy8g5a6f6aiT5pmC44GrMeODgeODo+ODs+ODjeODq+OBruWgtOWQiOOBrzHjgIFSR0LjgaDjgZHjga7loLTlkIjjga8z44CB44Ki44Or44OV44Kh44KC5ZCr44KB44KL5aC05ZCI44GvNFxuXG5jb25zdCBzaGFkZXJDb3VudCA9IDEwOyAvLyDjgrfjgqfjg7zjg4Djg7zjga7mlbAgPSDjg57jgrnjgq/nlJ/miJDnlKggKyAo6YCa5bi455SoICsg5Yqg566XICsg5LmX566XKSAqICjjg57jgrnjgq/nhKHjga7kuZfnrpfmuIjjgqLjg6vjg5XjgqHlr77lv5zniYggKyDjg57jgrnjgq/mnInjga7kuZfnrpfmuIjjgqLjg6vjg5XjgqHlr77lv5zniYggKyDjg57jgrnjgq/mnInlj43ou6Ljga7kuZfnrpfmuIjjgqLjg6vjg5XjgqHlr77lv5zniYgpXG5sZXQgc19pbnN0YW5jZTogQ3ViaXNtU2hhZGVyX1dlYkdMO1xubGV0IHNfdmlld3BvcnQ6IG51bWJlcltdO1xubGV0IHNfZmJvOiBXZWJHTEZyYW1lYnVmZmVyO1xuXG4vKipcbiAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWHpueQhuOCkuWun+ihjOOBmeOCi+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMIHtcbiAgLyoqXG4gICAqIOOCq+ODqeODvOODgeODo+ODs+ODjeODq++8iFJHQkHvvInjga7jg5Xjg6njgrDjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGNoYW5uZWxObyDjgqvjg6njg7zjg4Hjg6Pjg7Pjg43jg6vvvIhSR0JB77yJ44Gu55Wq5Y+377yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yKGNoYW5uZWxObzogbnVtYmVyKTogQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhbm5lbENvbG9ycy5hdChjaGFubmVsTm8pO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuODs+ODneODqeODquOBruODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCueOCkuWPluW+l+OBmeOCi1xuICAgKiBGcmFtZUJ1ZmZlck9iamVjdOOBjOWtmOWcqOOBl+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+eUn+aIkOOBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxuICAgKi9cbiAgcHVibGljIGdldE1hc2tSZW5kZXJUZXh0dXJlKCk6IFdlYkdMRnJhbWVidWZmZXIge1xuICAgIGxldCByZXQ6IFdlYkdMRnJhbWVidWZmZXIgPSAwO1xuXG4gICAgLy8g44OG44Oz44Od44Op44Oq44GuUmVuZGVyVGV4dHVyZeOCkuWPluW+l+OBmeOCi1xuICAgIGlmICh0aGlzLl9tYXNrVGV4dHVyZSAmJiB0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlICE9IDApIHtcbiAgICAgIC8vIOWJjeWbnuS9v+OBo+OBn+OCguOBruOCkui/lOOBmVxuICAgICAgdGhpcy5fbWFza1RleHR1cmUuZnJhbWVObyA9IHRoaXMuX2N1cnJlbnRGcmFtZU5vO1xuICAgICAgcmV0ID0gdGhpcy5fbWFza1RleHR1cmUudGV4dHVyZTtcbiAgICB9XG5cbiAgICBpZiAocmV0ID09IDApIHtcbiAgICAgIC8vIEZyYW1lQnVmZmVyT2JqZWN044GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44CB5paw44GX44GP55Sf5oiQ44GZ44KLXG5cbiAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODkOODg+ODleOCoeOCteOCpOOCuuOCkuWPluW+l1xuICAgICAgY29uc3Qgc2l6ZTogbnVtYmVyID0gdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTtcblxuICAgICAgdGhpcy5fY29sb3JCdWZmZXIgPSB0aGlzLmdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLl9jb2xvckJ1ZmZlcik7XG4gICAgICB0aGlzLmdsLnRleEltYWdlMkQoXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy5nbC5SR0JBLFxuICAgICAgICBzaXplLFxuICAgICAgICBzaXplLFxuICAgICAgICAwLFxuICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgIHRoaXMuZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfV1JBUF9TLFxuICAgICAgICB0aGlzLmdsLkNMQU1QX1RPX0VER0VcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFX1dSQVBfVCxcbiAgICAgICAgdGhpcy5nbC5DTEFNUF9UT19FREdFXG4gICAgICApO1xuICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxuICAgICAgICB0aGlzLmdsLkxJTkVBUlxuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfTUFHX0ZJTFRFUixcbiAgICAgICAgdGhpcy5nbC5MSU5FQVJcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cbiAgICAgIHJldCA9IHRoaXMuZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHJldCk7XG4gICAgICB0aGlzLmdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxuICAgICAgICB0aGlzLmdsLkZSQU1FQlVGRkVSLFxuICAgICAgICB0aGlzLmdsLkNPTE9SX0FUVEFDSE1FTlQwLFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgIHRoaXMuX2NvbG9yQnVmZmVyLFxuICAgICAgICAwXG4gICAgICApO1xuICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgc19mYm8pO1xuXG4gICAgICB0aGlzLl9tYXNrVGV4dHVyZSA9IG5ldyBDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2UoXG4gICAgICAgIHRoaXMuX2N1cnJlbnRGcmFtZU5vLFxuICAgICAgICByZXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gZ2wgV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgICovXG4gIHB1YmxpYyBzZXRHTChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5nbCA9IGdsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCueOCr+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOe+pOWFqOS9k+OCkuWbsuOCgOefqeW9ou+8iOODouODh+ODq+W6p+aomeezu++8ieOCkuioiOeul+OBmeOCi1xuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEBwYXJhbSBjbGlwcGluZ0NvbnRleHQg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBwdWJsaWMgY2FsY0NsaXBwZWREcmF3VG90YWxCb3VuZHMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIGNsaXBwaW5nQ29udGV4dDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0XG4gICk6IHZvaWQge1xuICAgIC8vIOiiq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr++8iOODnuOCueOCr+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8ieOBruWFqOS9k+OBruefqeW9olxuICAgIGxldCBjbGlwcGVkRHJhd1RvdGFsTWluWDogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICBsZXQgY2xpcHBlZERyYXdUb3RhbE1pblk6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhYOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgIGxldCBjbGlwcGVkRHJhd1RvdGFsTWF4WTogbnVtYmVyID0gTnVtYmVyLk1JTl9WQUxVRTtcblxuICAgIC8vIOOBk+OBruODnuOCueOCr+OBjOWun+mam+OBq+W/heimgeOBi+WIpOWumuOBmeOCi1xuICAgIC8vIOOBk+OBruOCr+ODquODg+ODlOODs+OCsOOCkuWIqeeUqOOBmeOCi+OAjOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOAjeOBjOOBsuOBqOOBpOOBp+OCguS9v+eUqOWPr+iDveOBp+OBguOCjOOBsOODnuOCueOCr+OCkueUn+aIkOOBmeOCi+W/heimgeOBjOOBguOCi1xuICAgIGNvbnN0IGNsaXBwZWREcmF3Q291bnQ6IG51bWJlciA9XG4gICAgICBjbGlwcGluZ0NvbnRleHQuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdC5sZW5ndGg7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGNsaXBwZWREcmF3YWJsZUluZGV4ID0gMDtcbiAgICAgIGNsaXBwZWREcmF3YWJsZUluZGV4IDwgY2xpcHBlZERyYXdDb3VudDtcbiAgICAgIGNsaXBwZWREcmF3YWJsZUluZGV4KytcbiAgICApIHtcbiAgICAgIC8vIOODnuOCueOCr+OCkuS9v+eUqOOBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaPj+eUu+OBleOCjOOCi+efqeW9ouOCkuaxguOCgeOCi1xuICAgICAgY29uc3QgZHJhd2FibGVJbmRleDogbnVtYmVyID1cbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGVkRHJhd2FibGVJbmRleExpc3RbY2xpcHBlZERyYXdhYmxlSW5kZXhdO1xuXG4gICAgICBjb25zdCBkcmF3YWJsZVZlcnRleENvdW50OiBudW1iZXIgPVxuICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdhYmxlSW5kZXgpO1xuICAgICAgY29uc3QgZHJhd2FibGVWZXJ0ZXhlczogRmxvYXQzMkFycmF5ID1cbiAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4KTtcblxuICAgICAgbGV0IG1pblg6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICBsZXQgbWluWTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIGxldCBtYXhYOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgICAgbGV0IG1heFk6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XG5cbiAgICAgIGNvbnN0IGxvb3A6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4Q291bnQgKiBDb25zdGFudC52ZXJ0ZXhTdGVwO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHBpOiBudW1iZXIgPSBDb25zdGFudC52ZXJ0ZXhPZmZzZXQ7XG4gICAgICAgIHBpIDwgbG9vcDtcbiAgICAgICAgcGkgKz0gQ29uc3RhbnQudmVydGV4U3RlcFxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHg6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4ZXNbcGldO1xuICAgICAgICBjb25zdCB5OiBudW1iZXIgPSBkcmF3YWJsZVZlcnRleGVzW3BpICsgMV07XG5cbiAgICAgICAgaWYgKHggPCBtaW5YKSB7XG4gICAgICAgICAgbWluWCA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHggPiBtYXhYKSB7XG4gICAgICAgICAgbWF4WCA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgICAgbWluWSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8g5pyJ5Yq544Gq54K544GM5LiA44Gk44KC5Y+W44KM44Gq44GL44Gj44Gf44Gu44Gn44K544Kt44OD44OXXG4gICAgICBpZiAobWluWCA9PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyDlhajkvZPjga7nn6nlvaLjgavlj43mmKBcbiAgICAgIGlmIChtaW5YIDwgY2xpcHBlZERyYXdUb3RhbE1pblgpIHtcbiAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1pblggPSBtaW5YO1xuICAgICAgfVxuICAgICAgaWYgKG1pblkgPCBjbGlwcGVkRHJhd1RvdGFsTWluWSkge1xuICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWluWSA9IG1pblk7XG4gICAgICB9XG4gICAgICBpZiAobWF4WCA+IGNsaXBwZWREcmF3VG90YWxNYXhYKSB7XG4gICAgICAgIGNsaXBwZWREcmF3VG90YWxNYXhYID0gbWF4WDtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhZID4gY2xpcHBlZERyYXdUb3RhbE1heFkpIHtcbiAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1heFkgPSBtYXhZO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2xpcHBlZERyYXdUb3RhbE1pblggPT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC54ID0gMC4wO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC55ID0gMC4wO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC53aWR0aCA9IDAuMDtcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0ID0gMC4wO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2lzVXNpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHc6IG51bWJlciA9IGNsaXBwZWREcmF3VG90YWxNYXhYIC0gY2xpcHBlZERyYXdUb3RhbE1pblg7XG4gICAgICAgIGNvbnN0IGg6IG51bWJlciA9IGNsaXBwZWREcmF3VG90YWxNYXhZIC0gY2xpcHBlZERyYXdUb3RhbE1pblk7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnggPSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QueSA9IGNsaXBwZWREcmF3VG90YWxNaW5ZO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC53aWR0aCA9IHc7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LmhlaWdodCA9IGg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlID0gbnVsbDtcbiAgICB0aGlzLl9jb2xvckJ1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5fY3VycmVudEZyYW1lTm8gPSAwO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemUgPSAyNTY7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2sgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD4oKTtcbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PigpO1xuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVRleHR1cmVDb2xvcj4oKTtcbiAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsID0gbmV3IGNzbVJlY3QoKTtcbiAgICB0aGlzLl90bXBNYXRyaXggPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICB0aGlzLl90bXBNYXRyaXhGb3JNYXNrID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fdG1wTWF0cml4Rm9yRHJhdyA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbnVsbDtcblxuICAgIGxldCB0bXA6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICB0bXAuUiA9IDEuMDtcbiAgICB0bXAuRyA9IDAuMDtcbiAgICB0bXAuQiA9IDAuMDtcbiAgICB0bXAuQSA9IDAuMDtcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XG5cbiAgICB0bXAgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgdG1wLlIgPSAwLjA7XG4gICAgdG1wLkcgPSAxLjA7XG4gICAgdG1wLkIgPSAwLjA7XG4gICAgdG1wLkEgPSAwLjA7XG4gICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xuXG4gICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgIHRtcC5SID0gMC4wO1xuICAgIHRtcC5HID0gMC4wO1xuICAgIHRtcC5CID0gMS4wO1xuICAgIHRtcC5BID0gMC4wO1xuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcblxuICAgIHRtcCA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICB0bXAuUiA9IDAuMDtcbiAgICB0bXAuRyA9IDAuMDtcbiAgICB0bXAuQiA9IDAuMDtcbiAgICB0bXAuQSA9IDEuMDtcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoaSkpIHtcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoaSkucmVsZWFzZSgpO1xuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5zZXQoaSwgdm9pZCAwKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCBudWxsKTtcbiAgICB9XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2sgPSBudWxsO1xuXG4gICAgLy8gX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF344GvX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNr44Gr44GC44KL44Kk44Oz44K544K/44Oz44K544KS5oyH44GX44Gm44GE44KL44CC5LiK6KiY44Gu5Yem55CG44Gr44KI44KK6KaB57Sg44GU44Go44GuREVMRVRF44Gv5LiN6KaB44CCXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcuc2V0KGksIG51bGwpO1xuICAgIH1cbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdyA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5fbWFza1RleHR1cmUpIHtcbiAgICAgIHRoaXMuZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5fbWFza1RleHR1cmUudGV4dHVyZSk7XG4gICAgICB0aGlzLl9tYXNrVGV4dHVyZSA9IG51bGw7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jaGFubmVsQ29sb3JzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnNldChpLCBudWxsKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzID0gbnVsbDtcblxuICAgIC8vIOODhuOCr+OCueODgeODo+ino+aUvlxuICAgIHRoaXMuZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLl9jb2xvckJ1ZmZlcik7XG4gICAgdGhpcy5fY29sb3JCdWZmZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODnuODjeODvOOCuOODo+OBruWIneacn+WMluWHpueQhlxuICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/jgYbmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7nmbvpjLLjgpLooYzjgYZcbiAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudCDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcbiAgICogQHBhcmFtIGRyYXdhYmxlTWFza3Mg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K544Gu44Oq44K544OIXG4gICAqIEBwYXJhbSBkcmF3YWJsZUNvdW50cyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICBkcmF3YWJsZUNvdW50OiBudW1iZXIsXG4gICAgZHJhd2FibGVNYXNrczogSW50MzJBcnJheVtdLFxuICAgIGRyYXdhYmxlTWFza0NvdW50czogSW50MzJBcnJheVxuICApOiB2b2lkIHtcbiAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/jgYbmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjgZnjgbnjgabnmbvpjLLjgZnjgotcbiAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga/jgIHpgJrluLjmlbDlgIvnqIvluqbjgavpmZDlrprjgZfjgabkvb/jgYbjgoLjga7jgajjgZnjgotcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7IGkrKykge1xuICAgICAgaWYgKGRyYXdhYmxlTWFza0NvdW50c1tpXSA8PSAwKSB7XG4gICAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBjOS9v+eUqOOBleOCjOOBpuOBhOOBquOBhOOCouODvOODiOODoeODg+OCt+ODpe+8iOWkmuOBj+OBruWgtOWQiOS9v+eUqOOBl+OBquOBhO+8iVxuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5wdXNoQmFjayhudWxsKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIOaXouOBq+OBguOCi0NsaXBDb250ZXh044Go5ZCM44GY44GL44OB44Kn44OD44Kv44GZ44KLXG4gICAgICBsZXQgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLmZpbmRTYW1lQ2xpcChcbiAgICAgICAgZHJhd2FibGVNYXNrc1tpXSxcbiAgICAgICAgZHJhd2FibGVNYXNrQ291bnRzW2ldXG4gICAgICApO1xuICAgICAgaWYgKGNsaXBwaW5nQ29udGV4dCA9PSBudWxsKSB7XG4gICAgICAgIC8vIOWQjOS4gOOBruODnuOCueOCr+OBjOWtmOWcqOOBl+OBpuOBhOOBquOBhOWgtOWQiOOBr+eUn+aIkOOBmeOCi1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQgPSBuZXcgQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgZHJhd2FibGVNYXNrc1tpXSxcbiAgICAgICAgICBkcmF3YWJsZU1hc2tDb3VudHNbaV1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2sucHVzaEJhY2soY2xpcHBpbmdDb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgY2xpcHBpbmdDb250ZXh0LmFkZENsaXBwZWREcmF3YWJsZShpKTtcblxuICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcucHVzaEJhY2soY2xpcHBpbmdDb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS5L2c5oiQ44GZ44KL44CC44Oi44OH44Or5o+P55S75pmC44Gr5a6f6KGM44GZ44KL44CCXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHNldHVwQ2xpcHBpbmdDb250ZXh0KFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICByZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXJfV2ViR0xcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fY3VycmVudEZyYW1lTm8rKztcblxuICAgIC8vIOWFqOOBpuOBruOCr+ODquODg+ODlOODs+OCsOOCkueUqOaEj+OBmeOCi1xuICAgIC8vIOWQjOOBmOOCr+ODquODg+ODl++8iOikh+aVsOOBruWgtOWQiOOBr+OBvuOBqOOCgeOBpuS4gOOBpOOBruOCr+ODquODg+ODl++8ieOCkuS9v+OBhuWgtOWQiOOBrzHluqbjgaDjgZHoqK3lrprjgZnjgotcbiAgICBsZXQgdXNpbmdDbGlwQ291bnQgPSAwO1xuICAgIGZvciAoXG4gICAgICBsZXQgY2xpcEluZGV4ID0gMDtcbiAgICAgIGNsaXBJbmRleCA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmdldFNpemUoKTtcbiAgICAgIGNsaXBJbmRleCsrXG4gICAgKSB7XG4gICAgICAvLyAx44Gk44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gr6Zai44GX44GmXG4gICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID1cbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoY2xpcEluZGV4KTtcblxuICAgICAgLy8g44GT44Gu44Kv44Oq44OD44OX44KS5Yip55So44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI576k5YWo5L2T44KS5Zuy44KA55+p5b2i44KS6KiI566XXG4gICAgICB0aGlzLmNhbGNDbGlwcGVkRHJhd1RvdGFsQm91bmRzKG1vZGVsLCBjYyk7XG5cbiAgICAgIGlmIChjYy5faXNVc2luZykge1xuICAgICAgICB1c2luZ0NsaXBDb3VudCsrOyAvLyDkvb/nlKjkuK3jgajjgZfjgabjgqvjgqbjg7Pjg4hcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg57jgrnjgq/kvZzmiJDlh6bnkIZcbiAgICBpZiAodXNpbmdDbGlwQ291bnQgPiAwKSB7XG4gICAgICAvLyDnlJ/miJDjgZfjgZ9GcmFtZUJ1ZmZlcuOBqOWQjOOBmOOCteOCpOOCuuOBp+ODk+ODpeODvOODneODvOODiOOCkuioreWumlxuICAgICAgdGhpcy5nbC52aWV3cG9ydChcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSxcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZVxuICAgICAgKTtcblxuICAgICAgLy8g44Oe44K544Kv44KSYWN0aXZl44Gr44GZ44KLXG4gICAgICB0aGlzLl9tYXNrUmVuZGVyVGV4dHVyZSA9IHRoaXMuZ2V0TWFza1JlbmRlclRleHR1cmUoKTtcblxuICAgICAgLy8g44Oi44OH44Or5o+P55S75pmC44GrRHJhd01lc2hOb3fjgavmuKHjgZXjgozjgovlpInmj5so44Oi44OH44OrdG/jg6/jg7zjg6vjg4nluqfmqJnlpInmj5spXG4gICAgICBjb25zdCBtb2RlbFRvV29ybGRGOiBDdWJpc21NYXRyaXg0NCA9IHJlbmRlcmVyLmdldE12cE1hdHJpeCgpO1xuXG4gICAgICByZW5kZXJlci5wcmVEcmF3KCk7IC8vIOODkOODg+ODleOCoeOCkuOCr+ODquOCouOBmeOCi1xuXG4gICAgICAvLyDlkITjg57jgrnjgq/jga7jg6zjgqTjgqLjgqbjg4jjgpLmsbrlrprjgZfjgabjgYTjgY9cbiAgICAgIHRoaXMuc2V0dXBMYXlvdXRCb3VuZHModXNpbmdDbGlwQ291bnQpO1xuXG4gICAgICAvLyAtLS0tLS0tLS0tIOODnuOCueOCr+aPj+eUu+WHpueQhiAtLS0tLS0tLS0tXG4gICAgICAvLyDjg57jgrnjgq/nlKhSZW5kZXJUZXh0dXJl44KSYWN0aXZl44Gr44K744OD44OIXG4gICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCB0aGlzLl9tYXNrUmVuZGVyVGV4dHVyZSk7XG5cbiAgICAgIC8vIOODnuOCueOCr+OCkuOCr+ODquOCouOBmeOCi1xuICAgICAgLy8gKOS7ruS7leanmCkgMeOBjOeEoeWKue+8iOaPj+OBi+OCjOOBquOBhO+8iemgmOWfn+OAgTDjgYzmnInlirnvvIjmj4/jgYvjgozjgovvvInpoJjln5/jgILvvIjjgrfjgqfjg7zjg4Djg7xDZCpDc+OBpzDjgavov5HjgYTlgKTjgpLjgYvjgZHjgabjg57jgrnjgq/jgpLkvZzjgovjgIIx44KS44GL44GR44KL44Go5L2V44KC6LW344GT44KJ44Gq44GE77yJXG4gICAgICB0aGlzLmdsLmNsZWFyQ29sb3IoMS4wLCAxLjAsIDEuMCwgMS4wKTtcbiAgICAgIHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUKTtcblxuICAgICAgLy8g5a6f6Zqb44Gr44Oe44K544Kv44KS55Sf5oiQ44GZ44KLXG4gICAgICAvLyDlhajjgabjga7jg57jgrnjgq/jgpLjganjga7jgojjgYbjgavjg6zjgqTjgqLjgqbjg4jjgZfjgabmj4/jgY/jgYvjgpLmsbrlrprjgZfjgIFDbGlwQ29udGV4dCwgQ2xpcHBlZERyYXdDb250ZXh044Gr6KiY5oa244GZ44KLXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgY2xpcEluZGV4ID0gMDtcbiAgICAgICAgY2xpcEluZGV4IDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpO1xuICAgICAgICBjbGlwSW5kZXgrK1xuICAgICAgKSB7XG4gICAgICAgIC8vIC0tLSDlrp/pmpvjgasx44Gk44Gu44Oe44K544Kv44KS5o+P44GPIC0tLVxuICAgICAgICBjb25zdCBjbGlwQ29udGV4dDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID1cbiAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjbGlwSW5kZXgpO1xuICAgICAgICBjb25zdCBhbGxDbGlwZWREcmF3UmVjdDogY3NtUmVjdCA9IGNsaXBDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Q7IC8vIOOBk+OBruODnuOCueOCr+OCkuS9v+OBhuOAgeOBmeOBueOBpuOBruaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruirlueQhuW6p+aomeS4iuOBruWbsuOBv+efqeW9olxuICAgICAgICBjb25zdCBsYXlvdXRCb3VuZHNPblRleDAxOiBjc21SZWN0ID0gY2xpcENvbnRleHQuX2xheW91dEJvdW5kczsgLy8g44GT44Gu5Lit44Gr44Oe44K544Kv44KS5Y+O44KB44KLXG5cbiAgICAgICAgLy8g44Oi44OH44Or5bqn5qiZ5LiK44Gu55+p5b2i44KS44CB6YGp5a6c44Oe44O844K444Oz44KS5LuY44GR44Gm5L2/44GGXG4gICAgICAgIGNvbnN0IE1BUkdJTiA9IDAuMDU7XG4gICAgICAgIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuc2V0UmVjdChhbGxDbGlwZWREcmF3UmVjdCk7XG4gICAgICAgIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuZXhwYW5kKFxuICAgICAgICAgIGFsbENsaXBlZERyYXdSZWN0LndpZHRoICogTUFSR0lOLFxuICAgICAgICAgIGFsbENsaXBlZERyYXdSZWN0LmhlaWdodCAqIE1BUkdJTlxuICAgICAgICApO1xuICAgICAgICAvLyMjIyMjIyMjIyMg5pys5p2l44Gv5Ymy44KK5b2T44Gm44KJ44KM44Gf6aCY5Z+f44Gu5YWo5L2T44KS5L2/44KP44Ga5b+F6KaB5pyA5L2O6ZmQ44Gu44K144Kk44K644GM44KI44GEXG5cbiAgICAgICAgLy8g44K344Kn44O844OA55So44Gu6KiI566X5byP44KS5rGC44KB44KL44CC5Zue6Lui44KS6ICD5oWu44GX44Gq44GE5aC05ZCI44Gv5Lul5LiL44Gu44Go44GK44KKXG4gICAgICAgIC8vIG1vdmVQZXJpb2QnID0gbW92ZVBlcmlvZCAqIHNjYWxlWCArIG9mZlhcdFx0ICBbWyBtb3ZlUGVyaW9kJyA9IChtb3ZlUGVyaW9kIC0gdG1wQm91bmRzT25Nb2RlbC5tb3ZlUGVyaW9kKSpzY2FsZSArIGxheW91dEJvdW5kc09uVGV4MDEubW92ZVBlcmlvZCBdXVxuICAgICAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9XG4gICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS53aWR0aCAvIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwud2lkdGg7XG4gICAgICAgIGNvbnN0IHNjYWxlWTogbnVtYmVyID1cbiAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLmhlaWdodCAvIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuaGVpZ2h0O1xuXG4gICAgICAgIC8vIOODnuOCueOCr+eUn+aIkOaZguOBq+S9v+OBhuihjOWIl+OCkuaxguOCgeOCi1xuICAgICAgICB7XG4gICAgICAgICAgLy8g44K344Kn44O844OA44Gr5rih44GZ6KGM5YiX44KS5rGC44KB44KLIDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCDopoHmnIDpganljJbvvIjpgIbpoIbjgavoqIjnrpfjgZnjgozjgbDjgrfjg7Pjg5fjg6vjgavjgafjgY3jgovvvIlcbiAgICAgICAgICB0aGlzLl90bXBNYXRyaXgubG9hZElkZW50aXR5KCk7XG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gbGF5b3V0MC4uMSDjgpIgLTEuLjHjgavlpInmj5tcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZSgtMS4wLCAtMS4wKTtcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5zY2FsZVJlbGF0aXZlKDIuMCwgMi4wKTtcbiAgICAgICAgICB9XG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gdmlldyB0byBsYXlvdXQwLi4xXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXG4gICAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEueCxcbiAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS55XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnNjYWxlUmVsYXRpdmUoc2NhbGVYLCBzY2FsZVkpOyAvLyBuZXcgPSBbdHJhbnNsYXRlXVtzY2FsZV1cbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgLXRoaXMuX3RtcEJvdW5kc09uTW9kZWwueCxcbiAgICAgICAgICAgICAgLXRoaXMuX3RtcEJvdW5kc09uTW9kZWwueVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVt0cmFuc2xhdGVdXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHRtcE1hdHJpeEZvck1hc2vjgYzoqIjnrpfntZDmnpxcbiAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JNYXNrLnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXguZ2V0QXJyYXkoKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLy0tLS0tLS0tLSBkcmF35pmC44GuIG1hc2sg5Y+C54Wn55So6KGM5YiX44KS6KiI566XXG4gICAgICAgIHtcbiAgICAgICAgICAvLyDjgrfjgqfjg7zjg4DjgavmuKHjgZnooYzliJfjgpLmsYLjgoHjgosgPDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8IOimgeacgOmBqeWMlu+8iOmAhumghuOBq+ioiOeul+OBmeOCjOOBsOOCt+ODs+ODl+ODq+OBq+OBp+OBjeOCi++8iVxuICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5sb2FkSWRlbnRpdHkoKTtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXG4gICAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEueCxcbiAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS55XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnNjYWxlUmVsYXRpdmUoc2NhbGVYLCBzY2FsZVkpOyAvLyBuZXcgPSBbdHJhbnNsYXRlXVtzY2FsZV1cbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgLXRoaXMuX3RtcEJvdW5kc09uTW9kZWwueCxcbiAgICAgICAgICAgICAgLXRoaXMuX3RtcEJvdW5kc09uTW9kZWwueVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVt0cmFuc2xhdGVdXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeEZvckRyYXcuc2V0TWF0cml4KHRoaXMuX3RtcE1hdHJpeC5nZXRBcnJheSgpKTtcbiAgICAgICAgfVxuICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yTWFzay5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4Rm9yTWFzay5nZXRBcnJheSgpKTtcbiAgICAgICAgY2xpcENvbnRleHQuX21hdHJpeEZvckRyYXcuc2V0TWF0cml4KHRoaXMuX3RtcE1hdHJpeEZvckRyYXcuZ2V0QXJyYXkoKSk7XG5cbiAgICAgICAgY29uc3QgY2xpcERyYXdDb3VudDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGlwRHJhd0NvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjbGlwRHJhd0luZGV4OiBudW1iZXIgPSBjbGlwQ29udGV4dC5fY2xpcHBpbmdJZExpc3RbaV07XG5cbiAgICAgICAgICAvLyDpoILngrnmg4XloLHjgYzmm7TmlrDjgZXjgozjgabjgYrjgonjgZrjgIHkv6HpoLzmgKfjgYzjgarjgYTloLTlkIjjga/mj4/nlLvjgpLjg5HjgrnjgZnjgotcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhbW9kZWwuZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZShjbGlwRHJhd0luZGV4KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVuZGVyZXIuc2V0SXNDdWxsaW5nKFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVDdWxsaW5nKGNsaXBEcmF3SW5kZXgpICE9IGZhbHNlXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIOS7iuWbnuWwgueUqOOBruWkieaPm+OCkumBqeeUqOOBl+OBpuaPj+OBj1xuICAgICAgICAgIC8vIOODgeODo+ODs+ODjeODq+OCguWIh+OCiuabv+OBiOOCi+W/heimgeOBjOOBguOCiyhBLFIsRyxCKVxuICAgICAgICAgIHJlbmRlcmVyLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soY2xpcENvbnRleHQpO1xuICAgICAgICAgIHJlbmRlcmVyLmRyYXdNZXNoKFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVUZXh0dXJlSW5kZXgoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0aWNlcyhjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4VXZzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0TXVsdGlwbHlDb2xvcihjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgIG1vZGVsLmdldFNjcmVlbkNvbG9yKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVPcGFjaXR5KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwsIC8vIOOCr+ODquODg+ODlOODs+OCsOOBr+mAmuW4uOaPj+eUu+OCkuW8t+WItlxuICAgICAgICAgICAgZmFsc2UgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gv44Kv44Oq44OD44OU44Oz44Kw44Gu5Y+N6Lui5L2/55So44Gv5YWo44GP6Zai5L+C44GM44Gq44GEXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyAtLS0g5b6M5Yem55CGIC0tLVxuICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgc19mYm8pOyAvLyDmj4/nlLvlr77osaHjgpLmiLvjgZlcbiAgICAgIHJlbmRlcmVyLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sobnVsbCk7XG5cbiAgICAgIHRoaXMuZ2wudmlld3BvcnQoXG4gICAgICAgIHNfdmlld3BvcnRbMF0sXG4gICAgICAgIHNfdmlld3BvcnRbMV0sXG4gICAgICAgIHNfdmlld3BvcnRbMl0sXG4gICAgICAgIHNfdmlld3BvcnRbM11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOaXouOBq+ODnuOCueOCr+OCkuS9nOOBo+OBpuOBhOOCi+OBi+OCkueiuuiqjVxuICAgKiDkvZzjgaPjgabjgYTjgovmp5jjgafjgYLjgozjgbDoqbLlvZPjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZlcbiAgICog5L2c44Gj44Gm44GE44Gq44GR44KM44GwTlVMTOOCkui/lOOBmVxuICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jg6rjgrnjg4hcbiAgICogQHBhcmFtIGRyYXdhYmxlTWFza0NvdW50cyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcbiAgICogQHJldHVybiDoqbLlvZPjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgYzlrZjlnKjjgZnjgozjgbDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZfjgIHjgarjgZHjgozjgbBOVUxM44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZmluZFNhbWVDbGlwKFxuICAgIGRyYXdhYmxlTWFza3M6IEludDMyQXJyYXksXG4gICAgZHJhd2FibGVNYXNrQ291bnRzOiBudW1iZXJcbiAgKTogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcbiAgICAvLyDkvZzmiJDmuIjjgb9DbGlwcGluZ0NvbnRleHTjgajkuIDoh7TjgZnjgovjgYvnorroqo1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBjb25zdCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpO1xuICAgICAgY29uc3QgY291bnQ6IG51bWJlciA9IGNsaXBwaW5nQ29udGV4dC5fY2xpcHBpbmdJZENvdW50O1xuXG4gICAgICAvLyDlgIvmlbDjgYzpgZXjgYbloLTlkIjjga/liKXnialcbiAgICAgIGlmIChjb3VudCAhPSBkcmF3YWJsZU1hc2tDb3VudHMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBzYW1lQ291bnQgPSAwO1xuXG4gICAgICAvLyDlkIzjgZhJROOCkuaMgeOBpOOBi+eiuuiqjeOAgumFjeWIl+OBruaVsOOBjOWQjOOBmOOBquOBruOBp+OAgeS4gOiHtOOBl+OBn+WAi+aVsOOBjOWQjOOBmOOBquOCieWQjOOBmOeJqeOCkuaMgeOBpOOBqOOBmeOCi1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGNsaXBJZDogbnVtYmVyID0gY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGluZ0lkTGlzdFtqXTtcblxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGNvdW50OyBrKyspIHtcbiAgICAgICAgICBpZiAoZHJhd2FibGVNYXNrc1trXSA9PSBjbGlwSWQpIHtcbiAgICAgICAgICAgIHNhbWVDb3VudCsrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzYW1lQ291bnQgPT0gY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGNsaXBwaW5nQ29udGV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDsgLy8g6KaL44Gk44GL44KJ44Gq44GL44Gj44GfXG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS6YWN572u44GZ44KL44Os44Kk44Ki44Km44OIXG4gICAqIOS4gOOBpOOBruODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OCkualteWKm+OBhOOBo+OBseOBhOOBq+S9v+OBo+OBpuODnuOCueOCr+OCkuODrOOCpOOCouOCpuODiOOBmeOCi1xuICAgKiDjg57jgrnjgq/jgrDjg6vjg7zjg5fjga7mlbDjgYw05Lul5LiL44Gq44KJUkdCQeWQhOODgeODo+ODs+ODjeODq+OBq+S4gOOBpOOBmuOBpOODnuOCueOCr+OCkumFjee9ruOBl+OAgTXku6XkuIo25Lul5LiL44Gq44KJUkdCQeOCkjIsMiwxLDHjgajphY3nva7jgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHVzaW5nQ2xpcENvdW50IOmFjee9ruOBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOBruaVsFxuICAgKi9cbiAgcHVibGljIHNldHVwTGF5b3V0Qm91bmRzKHVzaW5nQ2xpcENvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyDjgbLjgajjgaTjga5SZW5kZXJUZXh0dXJl44KS5qW15Yqb44GE44Gj44Gx44GE44Gr5L2/44Gj44Gm44Oe44K544Kv44KS44Os44Kk44Ki44Km44OI44GZ44KLXG4gICAgLy8g44Oe44K544Kv44Kw44Or44O844OX44Gu5pWw44GMNOS7peS4i+OBquOCiVJHQkHlkITjg4Hjg6Pjg7Pjg43jg6vjgasx44Gk44Ga44Gk44Oe44K544Kv44KS6YWN572u44GX44CBNeS7peS4ijbku6XkuIvjgarjgolSR0JB44KSMiwyLDEsMeOBqOmFjee9ruOBmeOCi1xuXG4gICAgLy8gUkdCQeOCkumghueVquOBq+S9v+OBo+OBpuOBhOOBj1xuICAgIGxldCBkaXY6IG51bWJlciA9IHVzaW5nQ2xpcENvdW50IC8gQ29sb3JDaGFubmVsQ291bnQ7IC8vIDHjg4Hjg6Pjg7Pjg43jg6vjgavphY3nva7jgZnjgovln7rmnKzjga7jg57jgrnjgq9cbiAgICBsZXQgbW9kOiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAlIENvbG9yQ2hhbm5lbENvdW50OyAvLyDkvZnjgorjgIHjgZPjga7nlarlj7fjga7jg4Hjg6Pjg7Pjg43jg6vjgb7jgafjgavkuIDjgaTjgZrjgaTphY3liIbjgZnjgotcblxuICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xuICAgIGRpdiA9IH5+ZGl2O1xuICAgIG1vZCA9IH5+bW9kO1xuXG4gICAgLy8gUkdCQeOBneOCjOOBnuOCjOOBruODgeODo+ODs+ODjeODq+OCkueUqOaEj+OBl+OBpuOBhOOBj++8iDA6UiwgMTpHLCAyOkIsIDM6Qe+8iVxuICAgIGxldCBjdXJDbGlwSW5kZXggPSAwOyAvLyDpoIbnlarjgavoqK3lrprjgZfjgabjgYTjgY9cblxuICAgIGZvciAobGV0IGNoYW5uZWxObyA9IDA7IGNoYW5uZWxObyA8IENvbG9yQ2hhbm5lbENvdW50OyBjaGFubmVsTm8rKykge1xuICAgICAgLy8g44GT44Gu44OB44Oj44Oz44ON44Or44Gr44Os44Kk44Ki44Km44OI44GZ44KL5pWwXG4gICAgICBjb25zdCBsYXlvdXRDb3VudDogbnVtYmVyID0gZGl2ICsgKGNoYW5uZWxObyA8IG1vZCA/IDEgOiAwKTtcblxuICAgICAgLy8g5YiG5Ymy5pa55rOV44KS5rG65a6a44GZ44KLXG4gICAgICBpZiAobGF5b3V0Q291bnQgPT0gMCkge1xuICAgICAgICAvLyDkvZXjgoLjgZfjgarjgYRcbiAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPT0gMSkge1xuICAgICAgICAvLyDlhajjgabjgpLjgZ3jga7jgb7jgb7kvb/jgYZcbiAgICAgICAgY29uc3QgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9XG4gICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoY3VyQ2xpcEluZGV4KyspO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLnggPSAwLjA7XG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMueSA9IDAuMDtcbiAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy53aWR0aCA9IDEuMDtcbiAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy5oZWlnaHQgPSAxLjA7XG4gICAgICB9IGVsc2UgaWYgKGxheW91dENvdW50ID09IDIpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXlvdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHhwb3M6IG51bWJlciA9IGkgJSAyO1xuXG4gICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICAgICAgeHBvcyA9IH5+eHBvcztcblxuICAgICAgICAgIGNvbnN0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICAgIGN1ckNsaXBJbmRleCsrXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjYy5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xuXG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0geHBvcyAqIDAuNTtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnkgPSAwLjA7XG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy53aWR0aCA9IDAuNTtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcbiAgICAgICAgICAvLyBVVuOCkjLjgaTjgavliIbop6PjgZfjgabkvb/jgYZcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA8PSA0KSB7XG4gICAgICAgIC8vIDTliIblibLjgZfjgabkvb/jgYZcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXlvdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHhwb3M6IG51bWJlciA9IGkgJSAyO1xuICAgICAgICAgIGxldCB5cG9zOiBudW1iZXIgPSBpIC8gMjtcblxuICAgICAgICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xuICAgICAgICAgIHhwb3MgPSB+fnhwb3M7XG4gICAgICAgICAgeXBvcyA9IH5+eXBvcztcblxuICAgICAgICAgIGNvbnN0IGNjID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoY3VyQ2xpcEluZGV4KyspO1xuICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG5cbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zICogMC41O1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IHlwb3MgKiAwLjU7XG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy53aWR0aCA9IDAuNTtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDAuNTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA8PSA5KSB7XG4gICAgICAgIC8vIDnliIblibLjgZfjgabkvb/jgYZcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXlvdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHhwb3MgPSBpICUgMztcbiAgICAgICAgICBsZXQgeXBvcyA9IGkgLyAzO1xuXG4gICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICAgICAgeHBvcyA9IH5+eHBvcztcbiAgICAgICAgICB5cG9zID0gfn55cG9zO1xuXG4gICAgICAgICAgY29uc3QgY2M6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICAgICAgY3VyQ2xpcEluZGV4KytcbiAgICAgICAgICApO1xuICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG5cbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zIC8gMy4wO1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IHlwb3MgLyAzLjA7XG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy53aWR0aCA9IDEuMCAvIDMuMDtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMCAvIDMuMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g44Oe44K544Kv44Gu5Yi26ZmQ5p6a5pWw44KS6LaF44GI44Gf5aC05ZCI44Gu5Yem55CGXG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdub3Qgc3VwcG9ydGVkIG1hc2sgY291bnQgOiB7MH0nLCBsYXlvdXRDb3VudCk7XG5cbiAgICAgICAgLy8gU2V0dXBTaGFkZXJQcm9ncmFt44Gn44Kq44O844OQ44O844Ki44Kv44K744K544GM55m655Sf44GZ44KL44Gu44Gn5Luu44Gn5pWw5YCk44KS5YWl44KM44KLXG4gICAgICAgIC8vIOOCguOBoeOCjeOCk+aPj+eUu+e1kOaenOOBr+ato+OBl+OBhOOCguOBruOBp+OBr+OBquOBj+OBquOCi1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGF5b3V0Q291bnQ7IGluZGV4KyspIHtcbiAgICAgICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoXG4gICAgICAgICAgICBjdXJDbGlwSW5kZXgrK1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjYy5fbGF5b3V0Q2hhbm5lbE5vID0gMDtcblxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueCA9IDAuMDtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnkgPSAwLjA7XG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy53aWR0aCA9IDEuMDtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqvjg6njg7zjg5Djg4Pjg5XjgqHjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjgqvjg6njg7zjg5Djg4Pjg5XjgqFcbiAgICovXG4gIHB1YmxpYyBnZXRDb2xvckJ1ZmZlcigpOiBXZWJHTFRleHR1cmUge1xuICAgIHJldHVybiB0aGlzLl9jb2xvckJ1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvpnaLmj4/nlLvjgavkvb/nlKjjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg6rjgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDnlLvpnaLmj4/nlLvjgavkvb/nlKjjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdygpOiBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBzZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemUgPSBzaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTtcbiAgfVxuXG4gIHB1YmxpYyBfbWFza1JlbmRlclRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXI7IC8vIOODnuOCueOCr+eUqOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxuICBwdWJsaWMgX2NvbG9yQnVmZmVyOiBXZWJHTFRleHR1cmU7IC8vIOODnuOCueOCr+eUqOOCq+ODqeODvOODkOODg+ODleOCoeODvOOBruOCouODieODrOOCuVxuICBwdWJsaWMgX2N1cnJlbnRGcmFtZU5vOiBudW1iZXI7IC8vIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+S4juOBiOOCi+ODleODrOODvOODoOeVquWPt1xuXG4gIHB1YmxpYyBfY2hhbm5lbENvbG9yczogY3NtVmVjdG9yPEN1YmlzbVRleHR1cmVDb2xvcj47XG4gIHB1YmxpYyBfbWFza1RleHR1cmU6IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZTsgLy8g44Oe44K544Kv55So44Gu44OG44Kv44K544OB44Oj44Oq44K944O844K544Gu44Oq44K544OIXG4gIHB1YmxpYyBfY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2s6IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+OyAvLyDjg57jgrnjgq/nlKjjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjga7jg6rjgrnjg4hcbiAgcHVibGljIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdzogY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD47IC8vIOaPj+eUu+eUqOOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOBruODquOCueODiFxuICBwdWJsaWMgX2NsaXBwaW5nTWFza0J1ZmZlclNpemU6IG51bWJlcjsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44OQ44OD44OV44Kh44K144Kk44K677yI5Yid5pyf5YCkOjI1Nu+8iVxuXG4gIHByaXZhdGUgX3RtcE1hdHJpeDogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+ioiOeul+eUqOOBruihjOWIl1xuICBwcml2YXRlIF90bXBNYXRyaXhGb3JNYXNrOiBDdWJpc21NYXRyaXg0NDsgLy8g44Oe44K544Kv6KiI566X55So44Gu6KGM5YiXXG4gIHByaXZhdGUgX3RtcE1hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/oqIjnrpfnlKjjga7ooYzliJdcbiAgcHJpdmF0ZSBfdG1wQm91bmRzT25Nb2RlbDogY3NtUmVjdDsgLy8g44Oe44K544Kv6YWN572u6KiI566X55So44Gu55+p5b2iXG5cbiAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgLy8gV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbn1cblxuLyoqXG4gKiDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgr3jg7zjgrnjgpLlrprnvqnjgZnjgovmp4vpgKDkvZNcbiAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBp+S9v+eUqOOBmeOCi1xuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlIHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gZnJhbWVObyDjg6zjg7Pjg4Djg6njg7zjga7jg5Xjg6zjg7zjg6Dnlarlj7dcbiAgICogQHBhcmFtIHRleHR1cmUg44OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoZnJhbWVObzogbnVtYmVyLCB0ZXh0dXJlOiBXZWJHTEZyYW1lYnVmZmVyKSB7XG4gICAgdGhpcy5mcmFtZU5vID0gZnJhbWVObztcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuICB9XG5cbiAgcHVibGljIGZyYW1lTm86IG51bWJlcjsgLy8g44Os44Oz44OA44Op44Gu44OV44Os44O844Og55Wq5Y+3XG4gIHB1YmxpYyB0ZXh0dXJlOiBXZWJHTEZyYW1lYnVmZmVyOyAvLyDjg4bjgq/jgrnjg4Hjg6Pjga7jgqLjg4njg6zjgrlcbn1cblxuLyoqXG4gKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgrPjg7Pjg4bjgq3jgrnjg4hcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBtYW5hZ2VyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wsXG4gICAgY2xpcHBpbmdEcmF3YWJsZUluZGljZXM6IEludDMyQXJyYXksXG4gICAgY2xpcENvdW50OiBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5fb3duZXIgPSBtYW5hZ2VyO1xuXG4gICAgLy8g44Kv44Oq44OD44OX44GX44Gm44GE44KL77yI77yd44Oe44K544Kv55So44Gu77yJRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcbiAgICB0aGlzLl9jbGlwcGluZ0lkTGlzdCA9IGNsaXBwaW5nRHJhd2FibGVJbmRpY2VzO1xuXG4gICAgLy8g44Oe44K544Kv44Gu5pWwXG4gICAgdGhpcy5fY2xpcHBpbmdJZENvdW50ID0gY2xpcENvdW50O1xuXG4gICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbmV3IGNzbVJlY3QoKTtcbiAgICB0aGlzLl9sYXlvdXRCb3VuZHMgPSBuZXcgY3NtUmVjdCgpO1xuXG4gICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ID0gW107XG5cbiAgICB0aGlzLl9tYXRyaXhGb3JNYXNrID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fbWF0cml4Rm9yRHJhdyA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xheW91dEJvdW5kcyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9sYXlvdXRCb3VuZHMgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9hbGxDbGlwcGVkRHJhd1JlY3QgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkui/veWKoOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCDjgq/jg6rjg4Pjg5Tjg7PjgrDlr77osaHjgavov73liqDjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBhZGRDbGlwcGVkRHJhd2FibGUoZHJhd2FibGVJbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0LnB1c2goZHJhd2FibGVJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44GT44Gu44Oe44K544Kv44KS566h55CG44GZ44KL44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYW5hZ2VyKCk6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCB7XG4gICAgcmV0dXJuIHRoaXMuX293bmVyO1xuICB9XG5cbiAgcHVibGljIHNldEdsKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLl9vd25lci5zZXRHTChnbCk7XG4gIH1cblxuICBwdWJsaWMgX2lzVXNpbmc6IGJvb2xlYW47IC8vIOePvuWcqOOBruaPj+eUu+eKtuaFi+OBp+ODnuOCueOCr+OBrua6luWCmeOBjOW/heimgeOBquOCiXRydWVcbiAgcHVibGljIHJlYWRvbmx5IF9jbGlwcGluZ0lkTGlzdDogSW50MzJBcnJheTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GuSUTjg6rjgrnjg4hcbiAgcHVibGljIF9jbGlwcGluZ0lkQ291bnQ6IG51bWJlcjsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5pWwXG4gIHB1YmxpYyBfbGF5b3V0Q2hhbm5lbE5vOiBudW1iZXI7IC8vIFJHQkHjga7jgYTjgZrjgozjga7jg4Hjg6Pjg7Pjg43jg6vjgavjgZPjga7jgq/jg6rjg4Pjg5fjgpLphY3nva7jgZnjgovjgYvvvIgwOlIsIDE6RywgMjpCLCAzOkHvvIlcbiAgcHVibGljIF9sYXlvdXRCb3VuZHM6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+eUqOODgeODo+ODs+ODjeODq+OBruOBqeOBrumgmOWfn+OBq+ODnuOCueOCr+OCkuWFpeOCjOOCi+OBi++8iFZpZXfluqfmqJktMX4xLCBVVuOBrzB+MeOBq+ebtOOBme+8iVxuICBwdWJsaWMgX2FsbENsaXBwZWREcmF3UmVjdDogY3NtUmVjdDsgLy8g44GT44Gu44Kv44Oq44OD44OU44Oz44Kw44Gn44CB44Kv44Oq44OD44OU44Oz44Kw44GV44KM44KL44GZ44G544Gm44Gu5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5Zuy44G/55+p5b2i77yI5q+O5Zue5pu05paw77yJXG4gIHB1YmxpYyBfbWF0cml4Rm9yTWFzazogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+OBruS9jee9ruioiOeul+e1kOaenOOCkuS/neaMgeOBmeOCi+ihjOWIl1xuICBwdWJsaWMgX21hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcbiAgcHVibGljIF9jbGlwcGVkRHJhd2FibGVJbmRleExpc3Q6IG51bWJlcltdOyAvLyDjgZPjga7jg57jgrnjgq/jgavjgq/jg6rjg4Pjg5fjgZXjgozjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jg6rjgrnjg4hcblxuICBwcml2YXRlIF9vd25lcjogQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMOyAvLyDjgZPjga7jg57jgrnjgq/jgpLnrqHnkIbjgZfjgabjgYTjgovjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7Pjgrlcbn1cblxuLyoqXG4gKiBXZWJHTOeUqOOBruOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkueUn+aIkOODu+egtOajhOOBmeOCi+OCr+ODqeOCuVxuICog44K344Oz44Kw44Or44OI44Oz44Gq44Kv44Op44K544Gn44GC44KK44CBQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNl44GL44KJ44Ki44Kv44K744K544GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21TaGFkZXJfV2ViR0wge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KL77yI44K344Oz44Kw44Or44OI44Oz77yJXG4gICAqIEByZXR1cm4g44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IEN1YmlzbVNoYWRlcl9XZWJHTCB7XG4gICAgaWYgKHNfaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IG5ldyBDdWJpc21TaGFkZXJfV2ViR0woKTtcblxuICAgICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gICAgfVxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkumWi+aUvuOBmeOCi++8iOOCt+ODs+OCsOODq+ODiOODs++8iVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGVJbnN0YW5jZSgpOiB2b2lkIHtcbiAgICBpZiAoc19pbnN0YW5jZSkge1xuICAgICAgc19pbnN0YW5jZS5yZWxlYXNlKCk7XG4gICAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcHJpdmF0ZeOBquOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zaGFkZXJTZXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21TaGFkZXJTZXQ+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbGVhc2VTaGFkZXJQcm9ncmFtKCk7XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gu5LiA6YCj44Gu44K744OD44OI44Ki44OD44OX44KS5a6f6KGM44GZ44KLXG4gICAqIEBwYXJhbSByZW5kZXJlciDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQHBhcmFtIHRleHR1cmVJZCBHUFXjga7jg4bjgq/jgrnjg4Hjg6NJRFxuICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXG4gICAqIEBwYXJhbSB2ZXJ0ZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnphY3liJdcbiAgICogQHBhcmFtIGluZGV4QXJyYXkg44Kk44Oz44OH44OD44Kv44K544OQ44OD44OV44Kh44Gu6aCC54K56YWN5YiXXG4gICAqIEBwYXJhbSB1dkFycmF5IHV26YWN5YiXXG4gICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXG4gICAqIEBwYXJhbSBiYXNlQ29sb3Ig44OZ44O844K544Kr44Op44O8XG4gICAqIEBwYXJhbSBpc1ByZW11bHRpcGxpZWRBbHBoYSDkuZfnrpfmuIjjgb/jgqLjg6vjg5XjgqHjgYvjganjgYbjgYtcbiAgICogQHBhcmFtIG1hdHJpeDR4NCBNb2RlbC1WaWV3LVByb2plY3Rpb27ooYzliJdcbiAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/jgpLlj43ou6LjgZfjgabkvb/nlKjjgZnjgovjg5Xjg6njgrBcbiAgICovXG4gIHB1YmxpYyBzZXR1cFNoYWRlclByb2dyYW0oXG4gICAgcmVuZGVyZXI6IEN1YmlzbVJlbmRlcmVyX1dlYkdMLFxuICAgIHRleHR1cmVJZDogV2ViR0xUZXh0dXJlLFxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXG4gICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgYnVmZmVyRGF0YToge1xuICAgICAgdmVydGV4OiBXZWJHTEJ1ZmZlcjtcbiAgICAgIHV2OiBXZWJHTEJ1ZmZlcjtcbiAgICAgIGluZGV4OiBXZWJHTEJ1ZmZlcjtcbiAgICB9LFxuICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxuICAgIGJhc2VDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIG11bHRpcGx5Q29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcixcbiAgICBzY3JlZW5Db2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIGlzUHJlbXVsdGlwbGllZEFscGhhOiBib29sZWFuLFxuICAgIG1hdHJpeDR4NDogQ3ViaXNtTWF0cml4NDQsXG4gICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXG4gICk6IHZvaWQge1xuICAgIGlmICghaXNQcmVtdWx0aXBsaWVkQWxwaGEpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdOb1ByZW11bHRpcGxpZWRBbHBoYSBpcyBub3QgYWxsb3dlZCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zaGFkZXJTZXRzLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlU2hhZGVycygpO1xuICAgIH1cblxuICAgIC8vIEJsZW5kaW5nXG4gICAgbGV0IFNSQ19DT0xPUjogbnVtYmVyO1xuICAgIGxldCBEU1RfQ09MT1I6IG51bWJlcjtcbiAgICBsZXQgU1JDX0FMUEhBOiBudW1iZXI7XG4gICAgbGV0IERTVF9BTFBIQTogbnVtYmVyO1xuXG4gICAgaWYgKHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKSAhPSBudWxsKSB7XG4gICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYJcbiAgICAgIGNvbnN0IHNoYWRlclNldDogQ3ViaXNtU2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfU2V0dXBNYXNrXG4gICAgICApO1xuICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHNoYWRlclNldC5zaGFkZXJQcm9ncmFtKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6Kit5a6aXG4gICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG4gICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZUlkKTtcbiAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHNoYWRlclNldC5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiwgMCk7XG5cbiAgICAgIC8vIOmggueCuemFjeWIl+OBruioreWumihWQk8pXG4gICAgICBpZiAoYnVmZmVyRGF0YS52ZXJ0ZXggPT0gbnVsbCkge1xuICAgICAgICBidWZmZXJEYXRhLnZlcnRleCA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEudmVydGV4KTtcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShcbiAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgIHZlcnRleEFycmF5LFxuICAgICAgICB0aGlzLmdsLkRZTkFNSUNfRFJBV1xuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyU2V0LmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcbiAgICAgICAgMixcbiAgICAgICAgdGhpcy5nbC5GTE9BVCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIDAsXG4gICAgICAgIDBcbiAgICAgICk7XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+mggueCueOBruioreWumlxuICAgICAgaWYgKGJ1ZmZlckRhdGEudXYgPT0gbnVsbCkge1xuICAgICAgICBidWZmZXJEYXRhLnV2ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS51dik7XG4gICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHV2QXJyYXksIHRoaXMuZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyU2V0LmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24pO1xuICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbixcbiAgICAgICAgMixcbiAgICAgICAgdGhpcy5nbC5GTE9BVCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIDAsXG4gICAgICAgIDBcbiAgICAgICk7XG5cbiAgICAgIC8vIOODgeODo+ODs+ODjeODq1xuICAgICAgY29uc3QgY2hhbm5lbE5vOiBudW1iZXIgPVxuICAgICAgICByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkuX2xheW91dENoYW5uZWxObztcbiAgICAgIGNvbnN0IGNvbG9yQ2hhbm5lbDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gcmVuZGVyZXJcbiAgICAgICAgLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKVxuICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgLmdldENoYW5uZWxGbGFnQXNDb2xvcihjaGFubmVsTm8pO1xuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbixcbiAgICAgICAgY29sb3JDaGFubmVsLlIsXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5HLFxuICAgICAgICBjb2xvckNoYW5uZWwuQixcbiAgICAgICAgY29sb3JDaGFubmVsLkFcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuZ2wudW5pZm9ybU1hdHJpeDRmdihcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkuX21hdHJpeEZvck1hc2suZ2V0QXJyYXkoKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVjdDogY3NtUmVjdCA9XG4gICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKS5fbGF5b3V0Qm91bmRzO1xuXG4gICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbixcbiAgICAgICAgcmVjdC54ICogMi4wIC0gMS4wLFxuICAgICAgICByZWN0LnkgKiAyLjAgLSAxLjAsXG4gICAgICAgIHJlY3QuZ2V0UmlnaHQoKSAqIDIuMCAtIDEuMCxcbiAgICAgICAgcmVjdC5nZXRCb3R0b20oKSAqIDIuMCAtIDEuMFxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uLFxuICAgICAgICBtdWx0aXBseUNvbG9yLlIsXG4gICAgICAgIG11bHRpcGx5Q29sb3IuRyxcbiAgICAgICAgbXVsdGlwbHlDb2xvci5CLFxuICAgICAgICBtdWx0aXBseUNvbG9yLkFcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24sXG4gICAgICAgIHNjcmVlbkNvbG9yLlIsXG4gICAgICAgIHNjcmVlbkNvbG9yLkcsXG4gICAgICAgIHNjcmVlbkNvbG9yLkIsXG4gICAgICAgIHNjcmVlbkNvbG9yLkFcbiAgICAgICk7XG5cbiAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuWkVSTztcbiAgICAgIERTVF9DT0xPUiA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19DT0xPUjtcbiAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuWkVSTztcbiAgICAgIERTVF9BTFBIQSA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcbiAgICB9IC8vIOODnuOCueOCr+eUn+aIkOS7peWkluOBruWgtOWQiFxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgbWFza2VkOiBib29sZWFuID1cbiAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpICE9IG51bGw7IC8vIOOBk+OBruaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBr+ODnuOCueOCr+WvvuixoeOBi1xuICAgICAgY29uc3Qgb2Zmc2V0OiBudW1iZXIgPSBtYXNrZWQgPyAoaW52ZXJ0ZWRNYXNrID8gMiA6IDEpIDogMDtcblxuICAgICAgbGV0IHNoYWRlclNldDogQ3ViaXNtU2hhZGVyU2V0ID0gbmV3IEN1YmlzbVNoYWRlclNldCgpO1xuXG4gICAgICBzd2l0Y2ggKGNvbG9yQmxlbmRNb2RlKSB7XG4gICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWw6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgc2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX05vcm1hbFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICk7XG4gICAgICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgIERTVF9BTFBIQSA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfQWRkaXRpdmU6XG4gICAgICAgICAgc2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX0FkZFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICk7XG4gICAgICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5aRVJPO1xuICAgICAgICAgIERTVF9BTFBIQSA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZTpcbiAgICAgICAgICBzaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICk7XG4gICAgICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5EU1RfQ09MT1I7XG4gICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuWkVSTztcbiAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHNoYWRlclNldC5zaGFkZXJQcm9ncmFtKTtcblxuICAgICAgLy8g6aCC54K56YWN5YiX44Gu6Kit5a6aXG4gICAgICBpZiAoYnVmZmVyRGF0YS52ZXJ0ZXggPT0gbnVsbCkge1xuICAgICAgICBidWZmZXJEYXRhLnZlcnRleCA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEudmVydGV4KTtcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShcbiAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgIHZlcnRleEFycmF5LFxuICAgICAgICB0aGlzLmdsLkRZTkFNSUNfRFJBV1xuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyU2V0LmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcbiAgICAgICAgMixcbiAgICAgICAgdGhpcy5nbC5GTE9BVCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIDAsXG4gICAgICAgIDBcbiAgICAgICk7XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+mggueCueOBruioreWumlxuICAgICAgaWYgKGJ1ZmZlckRhdGEudXYgPT0gbnVsbCkge1xuICAgICAgICBidWZmZXJEYXRhLnV2ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS51dik7XG4gICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHV2QXJyYXksIHRoaXMuZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyU2V0LmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24pO1xuICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbixcbiAgICAgICAgMixcbiAgICAgICAgdGhpcy5nbC5GTE9BVCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIDAsXG4gICAgICAgIDBcbiAgICAgICk7XG5cbiAgICAgIGlmIChtYXNrZWQpIHtcbiAgICAgICAgdGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTEpO1xuICAgICAgICBjb25zdCB0ZXg6IFdlYkdMVGV4dHVyZSA9IHJlbmRlcmVyXG4gICAgICAgICAgLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKVxuICAgICAgICAgIC5nZXRDbGlwcGluZ01hbmFnZXIoKVxuICAgICAgICAgIC5nZXRDb2xvckJ1ZmZlcigpO1xuICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4KTtcbiAgICAgICAgdGhpcy5nbC51bmlmb3JtMWkoc2hhZGVyU2V0LnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uLCAxKTtcblxuICAgICAgICAvLyB2aWV35bqn5qiZ44KSQ2xpcHBpbmdDb250ZXh044Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KL44Gf44KB44Gu6KGM5YiX44KS6Kit5a6aXG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybU1hdHJpeDRmdihcbiAgICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbixcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCkuX21hdHJpeEZvckRyYXcuZ2V0QXJyYXkoKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIOS9v+eUqOOBmeOCi+OCq+ODqeODvOODgeODo+ODs+ODjeODq+OCkuioreWumlxuICAgICAgICBjb25zdCBjaGFubmVsTm86IG51bWJlciA9XG4gICAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpLl9sYXlvdXRDaGFubmVsTm87XG4gICAgICAgIGNvbnN0IGNvbG9yQ2hhbm5lbDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gcmVuZGVyZXJcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgLmdldENsaXBwaW5nTWFuYWdlcigpXG4gICAgICAgICAgLmdldENoYW5uZWxGbGFnQXNDb2xvcihjaGFubmVsTm8pO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24sXG4gICAgICAgICAgY29sb3JDaGFubmVsLlIsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkcsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkIsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkFcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6Kit5a6aXG4gICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG4gICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZUlkKTtcbiAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHNoYWRlclNldC5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiwgMCk7XG5cbiAgICAgIC8vIOW6p+aomeWkieaPm1xuICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybU1hdHJpeExvY2F0aW9uLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgbWF0cml4NHg0LmdldEFycmF5KClcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uLFxuICAgICAgICBiYXNlQ29sb3IuUixcbiAgICAgICAgYmFzZUNvbG9yLkcsXG4gICAgICAgIGJhc2VDb2xvci5CLFxuICAgICAgICBiYXNlQ29sb3IuQVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uLFxuICAgICAgICBtdWx0aXBseUNvbG9yLlIsXG4gICAgICAgIG11bHRpcGx5Q29sb3IuRyxcbiAgICAgICAgbXVsdGlwbHlDb2xvci5CLFxuICAgICAgICBtdWx0aXBseUNvbG9yLkFcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24sXG4gICAgICAgIHNjcmVlbkNvbG9yLlIsXG4gICAgICAgIHNjcmVlbkNvbG9yLkcsXG4gICAgICAgIHNjcmVlbkNvbG9yLkIsXG4gICAgICAgIHNjcmVlbkNvbG9yLkFcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gSUJP44KS5L2c5oiQ44GX44CB44OH44O844K/44KS6Lui6YCBXG4gICAgaWYgKGJ1ZmZlckRhdGEuaW5kZXggPT0gbnVsbCkge1xuICAgICAgYnVmZmVyRGF0YS5pbmRleCA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgfVxuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLmluZGV4KTtcbiAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXG4gICAgICB0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxuICAgICAgaW5kZXhBcnJheSxcbiAgICAgIHRoaXMuZ2wuRFlOQU1JQ19EUkFXXG4gICAgKTtcbiAgICB0aGlzLmdsLmJsZW5kRnVuY1NlcGFyYXRlKFNSQ19DT0xPUiwgRFNUX0NPTE9SLCBTUkNfQUxQSEEsIERTVF9BTFBIQSk7XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZVNoYWRlclByb2dyYW0oKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaGFkZXJTZXRzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0odGhpcy5fc2hhZGVyU2V0cy5hdChpKS5zaGFkZXJQcm9ncmFtKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSA9IDA7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLnNldChpLCB2b2lkIDApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5zZXQoaSwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuWIneacn+WMluOBmeOCi1xuICAgKiBAcGFyYW0gdmVydFNoYWRlclNyYyDpoILngrnjgrfjgqfjg7zjg4Djga7jgr3jg7zjgrlcbiAgICogQHBhcmFtIGZyYWdTaGFkZXJTcmMg44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44K944O844K5XG4gICAqL1xuICBwdWJsaWMgZ2VuZXJhdGVTaGFkZXJzKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hhZGVyQ291bnQ7IGkrKykge1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5wdXNoQmFjayhuZXcgQ3ViaXNtU2hhZGVyU2V0KCkpO1xuICAgIH1cblxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMubG9hZFNoYWRlclByb2dyYW0oXG4gICAgICB2ZXJ0ZXhTaGFkZXJTcmNTZXR1cE1hc2ssXG4gICAgICBmcmFnbWVudFNoYWRlclNyY3NldHVwTWFza1xuICAgICk7XG5cbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgdmVydGV4U2hhZGVyU3JjLFxuICAgICAgZnJhZ21lbnRTaGFkZXJTcmNQcmVtdWx0aXBsaWVkQWxwaGFcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSA9IHRoaXMubG9hZFNoYWRlclByb2dyYW0oXG4gICAgICB2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQsXG4gICAgICBmcmFnbWVudFNoYWRlclNyY01hc2tQcmVtdWx0aXBsaWVkQWxwaGFcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSA9IHRoaXMubG9hZFNoYWRlclByb2dyYW0oXG4gICAgICB2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQsXG4gICAgICBmcmFnbWVudFNoYWRlclNyY01hc2tJbnZlcnRlZFByZW11bHRpcGxpZWRBbHBoYVxuICAgICk7XG5cbiAgICAvLyDliqDnrpfjgoLpgJrluLjjgajlkIzjgZjjgrfjgqfjg7zjg4Djg7zjgpLliKnnlKjjgZnjgotcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW07XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbTtcblxuICAgIC8vIOS5l+eul+OCgumAmuW4uOOBqOWQjOOBmOOCt+OCp+ODvOODgOODvOOCkuWIqeeUqOOBmeOCi1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW07XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtO1xuXG4gICAgLy8gU2V0dXBNYXNrXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOmAmuW4uO+8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfbWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDpgJrluLjvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfbWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g6YCa5bi477yI44Kv44Oq44OD44OU44Oz44Kw44O75Y+N6LuiLCBQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfbWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g5Yqg566X77yIUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOWKoOeul++8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDliqDnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6LjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfbWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g5LmX566X77yIUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOS5l+eul++8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDkuZfnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6LjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3VfbWF0cml4J1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoOOCkuODreODvOODieOBl+OBpuOCouODieODrOOCueOCkui/lOOBmVxuICAgKiBAcGFyYW0gdmVydGV4U2hhZGVyU291cmNlICAgIOmggueCueOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgKiBAcGFyYW0gZnJhZ21lbnRTaGFkZXJTb3VyY2UgIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgKiBAcmV0dXJuIOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoOOBruOCouODieODrOOCuVxuICAgKi9cbiAgcHVibGljIGxvYWRTaGFkZXJQcm9ncmFtKFxuICAgIHZlcnRleFNoYWRlclNvdXJjZTogc3RyaW5nLFxuICAgIGZyYWdtZW50U2hhZGVyU291cmNlOiBzdHJpbmdcbiAgKTogV2ViR0xQcm9ncmFtIHtcbiAgICAvLyBDcmVhdGUgU2hhZGVyIFByb2dyYW1cbiAgICBsZXQgc2hhZGVyUHJvZ3JhbTogV2ViR0xQcm9ncmFtID0gdGhpcy5nbC5jcmVhdGVQcm9ncmFtKCk7XG5cbiAgICBsZXQgdmVydFNoYWRlciA9IHRoaXMuY29tcGlsZVNoYWRlclNvdXJjZShcbiAgICAgIHRoaXMuZ2wuVkVSVEVYX1NIQURFUixcbiAgICAgIHZlcnRleFNoYWRlclNvdXJjZVxuICAgICk7XG5cbiAgICBpZiAoIXZlcnRTaGFkZXIpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdWZXJ0ZXggc2hhZGVyIGNvbXBpbGUgZXJyb3IhJyk7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgZnJhZ1NoYWRlciA9IHRoaXMuY29tcGlsZVNoYWRlclNvdXJjZShcbiAgICAgIHRoaXMuZ2wuRlJBR01FTlRfU0hBREVSLFxuICAgICAgZnJhZ21lbnRTaGFkZXJTb3VyY2VcbiAgICApO1xuICAgIGlmICghZnJhZ1NoYWRlcikge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ1ZlcnRleCBzaGFkZXIgY29tcGlsZSBlcnJvciEnKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCB2ZXJ0ZXggc2hhZGVyIHRvIHByb2dyYW1cbiAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0U2hhZGVyKTtcblxuICAgIC8vIEF0dGFjaCBmcmFnbWVudCBzaGFkZXIgdG8gcHJvZ3JhbVxuICAgIHRoaXMuZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIGZyYWdTaGFkZXIpO1xuXG4gICAgLy8gbGluayBwcm9ncmFtXG4gICAgdGhpcy5nbC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcbiAgICBjb25zdCBsaW5rU3RhdHVzID0gdGhpcy5nbC5nZXRQcm9ncmFtUGFyYW1ldGVyKFxuICAgICAgc2hhZGVyUHJvZ3JhbSxcbiAgICAgIHRoaXMuZ2wuTElOS19TVEFUVVNcbiAgICApO1xuXG4gICAgLy8g44Oq44Oz44Kv44Gr5aSx5pWX44GX44Gf44KJ44K344Kn44O844OA44O844KS5YmK6ZmkXG4gICAgaWYgKCFsaW5rU3RhdHVzKSB7XG4gICAgICBDdWJpc21Mb2dFcnJvcignRmFpbGVkIHRvIGxpbmsgcHJvZ3JhbTogezB9Jywgc2hhZGVyUHJvZ3JhbSk7XG5cbiAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHZlcnRTaGFkZXIpO1xuICAgICAgdmVydFNoYWRlciA9IDA7XG5cbiAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKGZyYWdTaGFkZXIpO1xuICAgICAgZnJhZ1NoYWRlciA9IDA7XG5cbiAgICAgIGlmIChzaGFkZXJQcm9ncmFtKSB7XG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcbiAgICAgICAgc2hhZGVyUHJvZ3JhbSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8vIFJlbGVhc2UgdmVydGV4IGFuZCBmcmFnbWVudCBzaGFkZXJzLlxuICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHZlcnRTaGFkZXIpO1xuICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKGZyYWdTaGFkZXIpO1xuXG4gICAgcmV0dXJuIHNoYWRlclByb2dyYW07XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS44Kz44Oz44OR44Kk44Or44GZ44KLXG4gICAqIEBwYXJhbSBzaGFkZXJUeXBlIOOCt+OCp+ODvOODgOOCv+OCpOODlyhWZXJ0ZXgvRnJhZ21lbnQpXG4gICAqIEBwYXJhbSBzaGFkZXJTb3VyY2Ug44K344Kn44O844OA44K944O844K544Kz44O844OJXG4gICAqXG4gICAqIEByZXR1cm4g44Kz44Oz44OR44Kk44Or44GV44KM44Gf44K344Kn44O844OA44O844OX44Ot44Kw44Op44OgXG4gICAqL1xuICBwdWJsaWMgY29tcGlsZVNoYWRlclNvdXJjZShcbiAgICBzaGFkZXJUeXBlOiBHTGVudW0sXG4gICAgc2hhZGVyU291cmNlOiBzdHJpbmdcbiAgKTogV2ViR0xQcm9ncmFtIHtcbiAgICBjb25zdCBzb3VyY2U6IHN0cmluZyA9IHNoYWRlclNvdXJjZTtcblxuICAgIGNvbnN0IHNoYWRlcjogV2ViR0xQcm9ncmFtID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIoc2hhZGVyVHlwZSk7XG4gICAgdGhpcy5nbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzb3VyY2UpO1xuICAgIHRoaXMuZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXG4gICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgIGNvbnN0IGxvZzogc3RyaW5nID0gdGhpcy5nbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XG4gICAgICBDdWJpc21Mb2dFcnJvcignU2hhZGVyIGNvbXBpbGUgbG9nOiB7MH0gJywgbG9nKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0dXM6IGFueSA9IHRoaXMuZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKFxuICAgICAgc2hhZGVyLFxuICAgICAgdGhpcy5nbC5DT01QSUxFX1NUQVRVU1xuICAgICk7XG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hhZGVyO1xuICB9XG5cbiAgcHVibGljIHNldEdsKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gIH1cblxuICBfc2hhZGVyU2V0czogY3NtVmVjdG9yPEN1YmlzbVNoYWRlclNldD47IC8vIOODreODvOODieOBl+OBn+OCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuS/neaMgeOBmeOCi+WkieaVsFxuICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0OyAvLyB3ZWJnbOOCs+ODs+ODhuOCreOCueODiFxufVxuXG4vKipcbiAqIEN1YmlzbVNoYWRlcl9XZWJHTOOBruOCpOODs+ODiuODvOOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtU2hhZGVyU2V0IHtcbiAgc2hhZGVyUHJvZ3JhbTogV2ViR0xQcm9ncmFtOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6Djga7jgqLjg4njg6zjgrlcbiAgYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbjogR0x1aW50OyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhQb3NpdGlvbu+8iVxuICBhdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uOiBHTHVpbnQ7IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFRleENvb3Jk77yJXG4gIHVuaWZvcm1NYXRyaXhMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iE1hdHJpeO+8iVxuICB1bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIQ2xpcE1hdHJpeO+8iVxuICBzYW1wbGVyVGV4dHVyZTBMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFRleHR1cmUw77yJXG4gIHNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4dHVyZTHvvIlcbiAgdW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIQmFzZUNvbG9y77yJXG4gIHVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIQ2hhbm5lbEZsYWfvvIlcbiAgdW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iE11bHRpcGx5Q29sb3LvvIlcbiAgdW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhTY3JlZW5Db2xvcu+8iVxufVxuXG5leHBvcnQgZW51bSBTaGFkZXJOYW1lcyB7XG4gIC8vIFNldHVwTWFza1xuICBTaGFkZXJOYW1lc19TZXR1cE1hc2ssXG5cbiAgLy8gTm9ybWFsXG4gIFNoYWRlck5hbWVzX05vcm1hbFByZW11bHRpcGxpZWRBbHBoYSxcbiAgU2hhZGVyTmFtZXNfTm9ybWFsTWFza2VkUHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19Ob21yYWxNYXNrZWRJbnZlcnRlZFByZW11bHRpcGxpZWRBbHBoYSxcblxuICAvLyBBZGRcbiAgU2hhZGVyTmFtZXNfQWRkUHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19BZGRNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGEsXG4gIFNoYWRlck5hbWVzX0FkZE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYUludmVydGVkLFxuXG4gIC8vIE11bHRcbiAgU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSxcbiAgU2hhZGVyTmFtZXNfTXVsdE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcbiAgU2hhZGVyTmFtZXNfTXVsdE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYUludmVydGVkLFxufVxuXG5leHBvcnQgY29uc3QgdmVydGV4U2hhZGVyU3JjU2V0dXBNYXNrID1cbiAgJ2F0dHJpYnV0ZSB2ZWM0ICAgICBhX3Bvc2l0aW9uOycgK1xuICAnYXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7JyArXG4gICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X215UG9zOycgK1xuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfY2xpcE1hdHJpeDsnICtcbiAgJ3ZvaWQgbWFpbigpJyArXG4gICd7JyArXG4gICcgICBnbF9Qb3NpdGlvbiA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICcgICB2X215UG9zID0gdV9jbGlwTWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgJyAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkOycgK1xuICAnICAgdl90ZXhDb29yZC55ID0gMS4wIC0gdl90ZXhDb29yZC55OycgK1xuICAnfSc7XG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2sgPVxuICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X215UG9zOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfYmFzZUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfY2hhbm5lbEZsYWc7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDsnICtcbiAgJ3ZvaWQgbWFpbigpJyArXG4gICd7JyArXG4gICcgICBmbG9hdCBpc0luc2lkZSA9ICcgK1xuICAnICAgICAgIHN0ZXAodV9iYXNlQ29sb3IueCwgdl9teVBvcy54L3ZfbXlQb3MudyknICtcbiAgJyAgICAgICAqIHN0ZXAodV9iYXNlQ29sb3IueSwgdl9teVBvcy55L3ZfbXlQb3MudyknICtcbiAgJyAgICAgICAqIHN0ZXAodl9teVBvcy54L3ZfbXlQb3MudywgdV9iYXNlQ29sb3IueiknICtcbiAgJyAgICAgICAqIHN0ZXAodl9teVBvcy55L3ZfbXlQb3MudywgdV9iYXNlQ29sb3Iudyk7JyArXG4gICcgICBnbF9GcmFnQ29sb3IgPSB1X2NoYW5uZWxGbGFnICogdGV4dHVyZTJEKHNfdGV4dHVyZTAsIHZfdGV4Q29vcmQpLmEgKiBpc0luc2lkZTsnICtcbiAgJ30nO1xuXG4vLy0tLS0tIOODkOODvOODhuODg+OCr+OCueOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoCAtLS0tLVxuLy8gTm9ybWFsICYgQWRkICYgTXVsdCDlhbHpgJpcbmV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmMgPVxuICAnYXR0cmlidXRlIHZlYzQgICAgIGFfcG9zaXRpb247JyArIC8vdi52ZXJ0ZXhcbiAgJ2F0dHJpYnV0ZSB2ZWMyICAgICBhX3RleENvb3JkOycgKyAvL3YudGV4Y29vcmRcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgKyAvL3YyZi50ZXhjb29yZFxuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfbWF0cml4OycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIGdsX1Bvc2l0aW9uID0gdV9tYXRyaXggKiBhX3Bvc2l0aW9uOycgK1xuICAnICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQ7JyArXG4gICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICd9JztcblxuLy8gTm9ybWFsICYgQWRkICYgTXVsdCDlhbHpgJrvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgZ/jgoLjga7jga7mj4/nlLvnlKjvvIlcbmV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQgPVxuICAnYXR0cmlidXRlIHZlYzQgICAgIGFfcG9zaXRpb247JyArXG4gICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfY2xpcFBvczsnICtcbiAgJ3VuaWZvcm0gbWF0NCAgICAgICB1X21hdHJpeDsnICtcbiAgJ3VuaWZvcm0gbWF0NCAgICAgICB1X2NsaXBNYXRyaXg7JyArXG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICcgICB2X2NsaXBQb3MgPSB1X2NsaXBNYXRyaXggKiBhX3Bvc2l0aW9uOycgK1xuICAnICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQ7JyArXG4gICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICd9JztcblxuLy8tLS0tLSDjg5Xjg6njgrDjg6Hjg7Pjg4jjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6AgLS0tLS1cbi8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCaIO+8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuZXhwb3J0IGNvbnN0IGZyYWdtZW50U2hhZGVyU3JjUHJlbXVsdGlwbGllZEFscGhhID1cbiAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArIC8vdjJmLnRleGNvb3JkXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDsnICsgLy9fTWFpblRleFxuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfbXVsdGlwbHlDb2xvcjsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X3NjcmVlbkNvbG9yOycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCwgdl90ZXhDb29yZCk7JyArXG4gICcgICB0ZXhDb2xvci5yZ2IgPSB0ZXhDb2xvci5yZ2IgKiB1X211bHRpcGx5Q29sb3IucmdiOycgK1xuICAnICAgdGV4Q29sb3IucmdiID0gKHRleENvbG9yLnJnYiArIHVfc2NyZWVuQ29sb3IucmdiICogdGV4Q29sb3IuYSkgLSAodGV4Q29sb3IucmdiICogdV9zY3JlZW5Db2xvci5yZ2IpOycgK1xuICAnICAgdmVjNCBjb2xvciA9IHRleENvbG9yICogdV9iYXNlQ29sb3I7JyArXG4gICcgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnJnYiwgY29sb3IuYSk7JyArXG4gICd9JztcblxuLy8gTm9ybWFsIO+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBn+OCguOBruOBruaPj+eUu+eUqOOAgVByZW11bHRpcGxpZWRBbHBoYeWFvOeUqO+8iVxuZXhwb3J0IGNvbnN0IGZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYSA9XG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfY2xpcFBvczsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2Jhc2VDb2xvcjsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2NoYW5uZWxGbGFnOycgK1xuICAndW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMTsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X211bHRpcGx5Q29sb3I7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9zY3JlZW5Db2xvcjsnICtcbiAgJ3ZvaWQgbWFpbigpJyArXG4gICd7JyArXG4gICcgICB2ZWM0IHRleENvbG9yID0gdGV4dHVyZTJEKHNfdGV4dHVyZTAsIHZfdGV4Q29vcmQpOycgK1xuICAnICAgdGV4Q29sb3IucmdiID0gdGV4Q29sb3IucmdiICogdV9tdWx0aXBseUNvbG9yLnJnYjsnICtcbiAgJyAgIHRleENvbG9yLnJnYiA9ICh0ZXhDb2xvci5yZ2IgKyB1X3NjcmVlbkNvbG9yLnJnYiAqIHRleENvbG9yLmEpIC0gKHRleENvbG9yLnJnYiAqIHVfc2NyZWVuQ29sb3IucmdiKTsnICtcbiAgJyAgIHZlYzQgY29sX2Zvcm1hc2sgPSB0ZXhDb2xvciAqIHVfYmFzZUNvbG9yOycgK1xuICAnICAgdmVjNCBjbGlwTWFzayA9ICgxLjAgLSB0ZXh0dXJlMkQoc190ZXh0dXJlMSwgdl9jbGlwUG9zLnh5IC8gdl9jbGlwUG9zLncpKSAqIHVfY2hhbm5lbEZsYWc7JyArXG4gICcgICBmbG9hdCBtYXNrVmFsID0gY2xpcE1hc2suciArIGNsaXBNYXNrLmcgKyBjbGlwTWFzay5iICsgY2xpcE1hc2suYTsnICtcbiAgJyAgIGNvbF9mb3JtYXNrID0gY29sX2Zvcm1hc2sgKiBtYXNrVmFsOycgK1xuICAnICAgZ2xfRnJhZ0NvbG9yID0gY29sX2Zvcm1hc2s7JyArXG4gICd9JztcblxuLy8gTm9ybWFsICYgQWRkICYgTXVsdCDlhbHpgJrvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgablj43ou6Lkvb/nlKjjga7mj4/nlLvnlKjjgIFQcmVtdWx0aXBsaWVkQWxwaGHjga7loLTlkIjvvIlcbmV4cG9ydCBjb25zdCBmcmFnbWVudFNoYWRlclNyY01hc2tJbnZlcnRlZFByZW11bHRpcGxpZWRBbHBoYSA9XG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICd2YXJ5aW5nIHZlYzQgICAgICB2X2NsaXBQb3M7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBzX3RleHR1cmUwOycgK1xuICAndW5pZm9ybSBzYW1wbGVyMkQgc190ZXh0dXJlMTsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgIHVfY2hhbm5lbEZsYWc7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICB1X2Jhc2VDb2xvcjsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgIHVfbXVsdGlwbHlDb2xvcjsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgIHVfc2NyZWVuQ29sb3I7JyArXG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgdmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRChzX3RleHR1cmUwLCB2X3RleENvb3JkKTsnICtcbiAgJyAgIHRleENvbG9yLnJnYiA9IHRleENvbG9yLnJnYiAqIHVfbXVsdGlwbHlDb2xvci5yZ2I7JyArXG4gICcgICB0ZXhDb2xvci5yZ2IgPSAodGV4Q29sb3IucmdiICsgdV9zY3JlZW5Db2xvci5yZ2IgKiB0ZXhDb2xvci5hKSAtICh0ZXhDb2xvci5yZ2IgKiB1X3NjcmVlbkNvbG9yLnJnYik7JyArXG4gICcgICB2ZWM0IGNvbF9mb3JtYXNrID0gdGV4Q29sb3IgKiB1X2Jhc2VDb2xvcjsnICtcbiAgJyAgIHZlYzQgY2xpcE1hc2sgPSAoMS4wIC0gdGV4dHVyZTJEKHNfdGV4dHVyZTEsIHZfY2xpcFBvcy54eSAvIHZfY2xpcFBvcy53KSkgKiB1X2NoYW5uZWxGbGFnOycgK1xuICAnICAgZmxvYXQgbWFza1ZhbCA9IGNsaXBNYXNrLnIgKyBjbGlwTWFzay5nICsgY2xpcE1hc2suYiArIGNsaXBNYXNrLmE7JyArXG4gICcgICBjb2xfZm9ybWFzayA9IGNvbF9mb3JtYXNrICogKDEuMCAtIG1hc2tWYWwpOycgK1xuICAnICAgZ2xfRnJhZ0NvbG9yID0gY29sX2Zvcm1hc2s7JyArXG4gICd9JztcblxuLyoqXG4gKiBXZWJHTOeUqOOBruaPj+eUu+WRveS7pOOCkuWun+ijheOBl+OBn+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgZXh0ZW5kcyBDdWJpc21SZW5kZXJlciB7XG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICog5byV5pWw44Gr5rih44GX44Gf44Oi44OH44Or44GL44KJ44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44Gr5b+F6KaB44Gq5oOF5aCx44KS5Y+W44KK5Ye644GZ44GT44Go44GM44Gn44GN44KLXG4gICAqXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIGlmIChtb2RlbC5pc1VzaW5nTWFza2luZygpKSB7XG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBuZXcgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMKCk7IC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODu+ODkOODg+ODleOCoeWJjeWHpueQhuaWueW8j+OCkuWIneacn+WMllxuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmluaXRpYWxpemUoXG4gICAgICAgIG1vZGVsLFxuICAgICAgICBtb2RlbC5nZXREcmF3YWJsZUNvdW50KCksXG4gICAgICAgIG1vZGVsLmdldERyYXdhYmxlTWFza3MoKSxcbiAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVNYXNrQ291bnRzKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QucmVzaXplKG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSwgMCk7XG5cbiAgICBzdXBlci5pbml0aWFsaXplKG1vZGVsKTsgLy8g6Kaq44Kv44Op44K544Gu5Yem55CG44KS5ZG844G2XG4gIH1cblxuICAvKipcbiAgICogV2ViR0zjg4bjgq/jgrnjg4Hjg6Pjga7jg5DjgqTjg7Pjg4nlh6bnkIZcbiAgICogQ3ViaXNtUmVuZGVyZXLjgavjg4bjgq/jgrnjg4Hjg6PjgpLoqK3lrprjgZfjgIFDdWJpc21SZW5kZXJlcuWGheOBp+OBneOBrueUu+WDj+OCkuWPgueFp+OBmeOCi+OBn+OCgeOBrkluZGV45YCk44KS5oi744KK5YCk44Go44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbFRleHR1cmVObyDjgrvjg4Pjg4jjgZnjgovjg6Ljg4fjg6vjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcbiAgICogQHBhcmFtIGdsVGV4dHVyZU5vIFdlYkdM44OG44Kv44K544OB44Oj44Gu55Wq5Y+3XG4gICAqL1xuICBwdWJsaWMgYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTm86IG51bWJlciwgZ2xUZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICB0aGlzLl90ZXh0dXJlcy5zZXRWYWx1ZShtb2RlbFRleHR1cmVObywgZ2xUZXh0dXJlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXZWJHTOOBq+ODkOOCpOODs+ODieOBleOCjOOBn+ODhuOCr+OCueODgeODo+OBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldEJpbmRlZFRleHR1cmVzKCk6IGNzbU1hcDxudW1iZXIsIFdlYkdMVGV4dHVyZT4ge1xuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrrjgpLoqK3lrprjgZnjgotcbiAgICog44Oe44K544Kv55So44GuRnJhbWVCdWZmZXLjgpLnoLTmo4TjgIHlho3kvZzmiJDjgZnjgovngrrlh6bnkIbjgrPjgrnjg4jjga/pq5jjgYRcbiAgICogQHBhcmFtIHNpemUg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplOiBudW1iZXIpIHtcbiAgICAvLyBGcmFtZUJ1ZmZlcuOBruOCteOCpOOCuuOCkuWkieabtOOBmeOCi+OBn+OCgeOBq+OCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOODu+WGjeS9nOaIkOOBmeOCi1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG51bGw7XG5cbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBuZXcgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMKCk7XG5cbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplKTtcblxuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5pbml0aWFsaXplKFxuICAgICAgdGhpcy5nZXRNb2RlbCgpLFxuICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQ291bnQoKSxcbiAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZU1hc2tzKCksXG4gICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVNYXNrQ291bnRzKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sgPSBudWxsO1xuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcgPSBudWxsO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTtcbiAgICB0aGlzLmZpcnN0RHJhdyA9IHRydWU7XG4gICAgdGhpcy5fdGV4dHVyZXMgPSBuZXcgY3NtTWFwPG51bWJlciwgbnVtYmVyPigpO1xuICAgIHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0ID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XG4gICAgdGhpcy5fYnVmZmVyRGF0YSA9IHtcbiAgICAgIHZlcnRleDogKFdlYkdMQnVmZmVyID0gbnVsbCksXG4gICAgICB1djogKFdlYkdMQnVmZmVyID0gbnVsbCksXG4gICAgICBpbmRleDogKFdlYkdMQnVmZmVyID0gbnVsbCksXG4gICAgfTtcblxuICAgIC8vIOODhuOCr+OCueODgeODo+WvvuW/nOODnuODg+ODl+OBruWuuemHj+OCkueiuuS/neOBl+OBpuOBiuOBj1xuICAgIHRoaXMuX3RleHR1cmVzLnByZXBhcmVDYXBhY2l0eSgzMiwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIucmVsZWFzZSgpO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IHZvaWQgMDtcbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBudWxsO1xuXG4gICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgIHRoaXMuX2J1ZmZlckRhdGEudmVydGV4ID0gbnVsbDtcbiAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLnV2KTtcbiAgICB0aGlzLl9idWZmZXJEYXRhLnV2ID0gbnVsbDtcbiAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLmluZGV4KTtcbiAgICB0aGlzLl9idWZmZXJEYXRhLmluZGV4ID0gbnVsbDtcbiAgICB0aGlzLl9idWZmZXJEYXRhID0gbnVsbDtcblxuICAgIHRoaXMuX3RleHR1cmVzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovlrp/pmpvjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyBkb0RyYXdNb2RlbCgpOiB2b2lkIHtcbiAgICAvLy0tLS0tLS0tLS0tLSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg7vjg5Djg4Pjg5XjgqHliY3lh6bnkIbmlrnlvI/jga7loLTlkIggLS0tLS0tLS0tLS0tXG4gICAgaWYgKHRoaXMuX2NsaXBwaW5nTWFuYWdlciAhPSBudWxsKSB7XG4gICAgICB0aGlzLnByZURyYXcoKTtcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5zZXR1cENsaXBwaW5nQ29udGV4dCh0aGlzLmdldE1vZGVsKCksIHRoaXMpO1xuICAgIH1cblxuICAgIC8vIOS4iuiomOOCr+ODquODg+ODlOODs+OCsOWHpueQhuWGheOBp+OCguS4gOW6plByZURyYXfjgpLlkbzjgbbjga7jgafms6jmhI8hIVxuICAgIHRoaXMucHJlRHJhdygpO1xuXG4gICAgY29uc3QgZHJhd2FibGVDb3VudDogbnVtYmVyID0gdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQ291bnQoKTtcbiAgICBjb25zdCByZW5kZXJPcmRlcjogSW50MzJBcnJheSA9IHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVJlbmRlck9yZGVycygpO1xuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544KS5o+P55S76aCG44Gn44K944O844OIXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3YWJsZUNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IG9yZGVyOiBudW1iZXIgPSByZW5kZXJPcmRlcltpXTtcbiAgICAgIHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0LnNldChvcmRlciwgaSk7XG4gICAgfVxuXG4gICAgLy8g5o+P55S7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3YWJsZUNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGRyYXdhYmxlSW5kZXg6IG51bWJlciA9IHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0LmF0KGkpO1xuXG4gICAgICAvLyBEcmF3YWJsZeOBjOihqOekuueKtuaFi+OBp+OBquOBkeOCjOOBsOWHpueQhuOCkuODkeOCueOBmeOCi1xuICAgICAgaWYgKCF0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZShkcmF3YWJsZUluZGV4KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS44K744OD44OI44GZ44KLXG4gICAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoXG4gICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciAhPSBudWxsXG4gICAgICAgICAgPyB0aGlzLl9jbGlwcGluZ01hbmFnZXJcbiAgICAgICAgICAgICAgLmdldENsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3KClcbiAgICAgICAgICAgICAgLmF0KGRyYXdhYmxlSW5kZXgpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuXG4gICAgICB0aGlzLnNldElzQ3VsbGluZyh0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVDdWxsaW5nKGRyYXdhYmxlSW5kZXgpKTtcblxuICAgICAgdGhpcy5kcmF3TWVzaChcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVGV4dHVyZUluZGV4KGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50KGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4SW5kaWNlcyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGljZXMoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleFV2cyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldE11bHRpcGx5Q29sb3IoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXRTY3JlZW5Db2xvcihkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlT3BhY2l0eShkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQmxlbmRNb2RlKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVJbnZlcnRlZE1hc2tCaXQoZHJhd2FibGVJbmRleClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFvjgqrjg7zjg5Djg7zjg6njgqTjg4ldXG4gICAqIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8iOOCouODvOODiOODoeODg+OCt+ODpe+8ieOCkuaPj+eUu+OBmeOCi+OAglxuICAgKiDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjgajjg4bjgq/jgrnjg4Hjg6Pnlarlj7fjgpLjgrvjg4Pjg4jjgafmuKHjgZnjgIJcbiAgICogQHBhcmFtIHRleHR1cmVObyDmj4/nlLvjgZnjgovjg4bjgq/jgrnjg4Hjg6Pnlarlj7dcbiAgICogQHBhcmFtIGluZGV4Q291bnQg5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcbiAgICogQHBhcmFtIGluZGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu44Kk44Oz44OH44OD44Kv44K56YWN5YiXXG4gICAqIEBwYXJhbSB2ZXJ0ZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnphY3liJdcbiAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcbiAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXG4gICAqIEBwYXJhbSBjb2xvckJsZW5kTW9kZSDjgqvjg6njg7zlkIjmiJDjgr/jgqTjg5dcbiAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/kvb/nlKjmmYLjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBkcmF3TWVzaChcbiAgICB0ZXh0dXJlTm86IG51bWJlcixcbiAgICBpbmRleENvdW50OiBudW1iZXIsXG4gICAgdmVydGV4Q291bnQ6IG51bWJlcixcbiAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcbiAgICB2ZXJ0ZXhBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIHV2QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICBtdWx0aXBseUNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgc2NyZWVuQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcixcbiAgICBvcGFjaXR5OiBudW1iZXIsXG4gICAgY29sb3JCbGVuZE1vZGU6IEN1YmlzbUJsZW5kTW9kZSxcbiAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgKTogdm9pZCB7XG4gICAgLy8g6KOP6Z2i5o+P55S744Gu5pyJ5Yq544O754Sh5Yq5XG4gICAgaWYgKHRoaXMuaXNDdWxsaW5nKCkpIHtcbiAgICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcbiAgICB9XG5cbiAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsLkNDVyk7IC8vIEN1YmlzbSBTREsgT3BlbkdM44Gv44Oe44K544Kv44O744Ki44O844OI44Oh44OD44K344Ol5YWx44GrQ0NX44GM6KGo6Z2iXG5cbiAgICBjb25zdCBtb2RlbENvbG9yUkdCQTogQ3ViaXNtVGV4dHVyZUNvbG9yID0gdGhpcy5nZXRNb2RlbENvbG9yKCk7XG5cbiAgICBpZiAodGhpcy5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkgPT0gbnVsbCkge1xuICAgICAgLy8g44Oe44K544Kv55Sf5oiQ5pmC5Lul5aSWXG4gICAgICBtb2RlbENvbG9yUkdCQS5BICo9IG9wYWNpdHk7XG4gICAgICBpZiAodGhpcy5pc1ByZW11bHRpcGxpZWRBbHBoYSgpKSB7XG4gICAgICAgIG1vZGVsQ29sb3JSR0JBLlIgKj0gbW9kZWxDb2xvclJHQkEuQTtcbiAgICAgICAgbW9kZWxDb2xvclJHQkEuRyAqPSBtb2RlbENvbG9yUkdCQS5BO1xuICAgICAgICBtb2RlbENvbG9yUkdCQS5CICo9IG1vZGVsQ29sb3JSR0JBLkE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGRyYXd0ZXh0dXJlOiBXZWJHTFRleHR1cmU7IC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeODhuOCr+OCueODgeODo1xuXG4gICAgLy8g44OG44Kv44K544OB44Oj44Oe44OD44OX44GL44KJ44OQ44Kk44Oz44OJ5riI44G/44OG44Kv44K544OB44Oj77yp77yk44KS5Y+W5b6XXG4gICAgLy8g44OQ44Kk44Oz44OJ44GV44KM44Gm44GE44Gq44GR44KM44Gw44OA44Of44O844Gu44OG44Kv44K544OB44OjSUTjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICBpZiAodGhpcy5fdGV4dHVyZXMuZ2V0VmFsdWUodGV4dHVyZU5vKSAhPSBudWxsKSB7XG4gICAgICBkcmF3dGV4dHVyZSA9IHRoaXMuX3RleHR1cmVzLmdldFZhbHVlKHRleHR1cmVObyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYXd0ZXh0dXJlID0gbnVsbDtcbiAgICB9XG5cbiAgICBDdWJpc21TaGFkZXJfV2ViR0wuZ2V0SW5zdGFuY2UoKS5zZXR1cFNoYWRlclByb2dyYW0oXG4gICAgICB0aGlzLFxuICAgICAgZHJhd3RleHR1cmUsXG4gICAgICB2ZXJ0ZXhDb3VudCxcbiAgICAgIHZlcnRleEFycmF5LFxuICAgICAgaW5kZXhBcnJheSxcbiAgICAgIHV2QXJyYXksXG4gICAgICB0aGlzLl9idWZmZXJEYXRhLFxuICAgICAgb3BhY2l0eSxcbiAgICAgIGNvbG9yQmxlbmRNb2RlLFxuICAgICAgbW9kZWxDb2xvclJHQkEsXG4gICAgICBtdWx0aXBseUNvbG9yLFxuICAgICAgc2NyZWVuQ29sb3IsXG4gICAgICB0aGlzLmlzUHJlbXVsdGlwbGllZEFscGhhKCksXG4gICAgICB0aGlzLmdldE12cE1hdHJpeCgpLFxuICAgICAgaW52ZXJ0ZWRNYXNrXG4gICAgKTtcblxuICAgIC8vIOODneODquOCtOODs+ODoeODg+OCt+ODpeOCkuaPj+eUu+OBmeOCi1xuICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKFxuICAgICAgdGhpcy5nbC5UUklBTkdMRVMsXG4gICAgICBpbmRleENvdW50LFxuICAgICAgdGhpcy5nbC5VTlNJR05FRF9TSE9SVCxcbiAgICAgIDBcbiAgICApO1xuXG4gICAgLy8g5b6M5Yem55CGXG4gICAgdGhpcy5nbC51c2VQcm9ncmFtKG51bGwpO1xuICAgIHRoaXMuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyhudWxsKTtcbiAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sobnVsbCk7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6Kej5pS+44GZ44KLXG4gICAqIFdlYkdM44Gu6Z2Z55qE44Gq44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRvU3RhdGljUmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21TaGFkZXJfV2ViR0wuZGVsZXRlSW5zdGFuY2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg7zjgrnjg4bjg7zjg4jjgpLoqK3lrprjgZnjgotcbiAgICogQHBhcmFtIGZibyDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PlgbTjgafmjIflrprjgZfjgabjgYTjgovjg5Xjg6zjg7zjg6Djg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHZpZXdwb3J0IOODk+ODpeODvOODneODvOODiFxuICAgKi9cbiAgcHVibGljIHNldFJlbmRlclN0YXRlKGZibzogV2ViR0xGcmFtZWJ1ZmZlciwgdmlld3BvcnQ6IG51bWJlcltdKTogdm9pZCB7XG4gICAgc19mYm8gPSBmYm87XG4gICAgc192aWV3cG9ydCA9IHZpZXdwb3J0O1xuICB9XG5cbiAgLyoqXG4gICAqIOaPj+eUu+mWi+Wni+aZguOBrui/veWKoOWHpueQhlxuICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovliY3jgavjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgavlv4XopoHjgarlh6bnkIbjgpLlrp/oo4XjgZfjgabjgYTjgotcbiAgICovXG4gIHB1YmxpYyBwcmVEcmF3KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmZpcnN0RHJhdykge1xuICAgICAgdGhpcy5maXJzdERyYXcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5TQ0lTU09SX1RFU1QpO1xuICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLlNURU5DSUxfVEVTVCk7XG4gICAgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAvLyDjgqvjg6rjg7PjgrDvvIgxLjBiZXRhM++8iVxuICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2wuQ1cpO1xuXG4gICAgdGhpcy5nbC5lbmFibGUodGhpcy5nbC5CTEVORCk7XG4gICAgdGhpcy5nbC5jb2xvck1hc2sodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIG51bGwpOyAvLyDliY3jgavjg5Djg4Pjg5XjgqHjgYzjg5DjgqTjg7Pjg4njgZXjgozjgabjgYTjgZ/jgonnoLTmo4TjgZnjgovlv4XopoHjgYzjgYLjgotcbiAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XG5cbiAgICAvLyDnlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjgpLpgannlKjjgZnjgotcbiAgICBpZiAodGhpcy5nZXRBbmlzb3Ryb3B5KCkgPiAwLjAgJiYgdGhpcy5fZXh0ZW5zaW9uKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RleHR1cmVzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlcy5nZXRWYWx1ZShpKSk7XG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyZihcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgdGhpcy5fZXh0ZW5zaW9uLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULFxuICAgICAgICAgIHRoaXMuZ2V0QW5pc290cm9weSgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soY2xpcDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KSB7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayA9IGNsaXA7XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpOiBDdWJpc21DbGlwcGluZ0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+mdouS4iuOBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoY2xpcDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyA9IGNsaXA7XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpOiBDdWJpc21DbGlwcGluZ0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3O1xuICB9XG5cbiAgLyoqXG4gICAqIGds44Gu6Kit5a6aXG4gICAqL1xuICBwdWJsaWMgc3RhcnRVcChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5zZXRHTChnbCk7XG4gICAgQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNlKCkuc2V0R2woZ2wpO1xuXG4gICAgLy8g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44GM5L2/55So44Gn44GN44KL44GL44OB44Kn44OD44KvXG4gICAgdGhpcy5fZXh0ZW5zaW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ01PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKTtcbiAgfVxuXG4gIF90ZXh0dXJlczogY3NtTWFwPG51bWJlciwgV2ViR0xUZXh0dXJlPjsgLy8g44Oi44OH44Or44GM5Y+C54Wn44GZ44KL44OG44Kv44K544OB44Oj44Go44Os44Oz44OA44Op44Gn44OQ44Kk44Oz44OJ44GX44Gm44GE44KL44OG44Kv44K544OB44Oj44Go44Gu44Oe44OD44OXXG4gIF9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdDogY3NtVmVjdG9yPG51bWJlcj47IC8vIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueOCkuaPj+eUu+mghuOBq+S4puOBueOBn+ODquOCueODiFxuICBfY2xpcHBpbmdNYW5hZ2VyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0w7IC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+euoeeQhuOCquODluOCuOOCp+OCr+ODiFxuICBfY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzazogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0OyAvLyDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgZ/jgoHjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXc6IEN1YmlzbUNsaXBwaW5nQ29udGV4dDsgLy8g55S76Z2i5LiK5o+P55S744GZ44KL44Gf44KB44Gu44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gIGZpcnN0RHJhdzogYm9vbGVhbjtcbiAgX2J1ZmZlckRhdGE6IHtcbiAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyO1xuICAgIHV2OiBXZWJHTEJ1ZmZlcjtcbiAgICBpbmRleDogV2ViR0xCdWZmZXI7XG4gIH07IC8vIOmggueCueODkOODg+ODleOCoeODh+ODvOOCv1xuICBfZXh0ZW5zaW9uOiBhbnk7IC8vIOaLoeW8teapn+iDvVxuICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0OyAvLyB3ZWJnbOOCs+ODs+ODhuOCreOCueODiFxufVxuXG4vKipcbiAqIOODrOODs+ODgOODqeOBjOS/neaMgeOBmeOCi+mdmeeahOOBquODquOCveODvOOCueOCkumWi+aUvuOBmeOCi1xuICovXG5DdWJpc21SZW5kZXJlci5zdGF0aWNSZWxlYXNlID0gKCk6IHZvaWQgPT4ge1xuICBDdWJpc21SZW5kZXJlcl9XZWJHTC5kb1N0YXRpY1JlbGVhc2UoKTtcbn07XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXJlbmRlcmVyX3dlYmdsJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSAkLkN1YmlzbUNsaXBwaW5nQ29udGV4dDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gJC5DdWJpc21DbGlwcGluZ0NvbnRleHQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wgPSAkLkN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMID0gJC5DdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0w7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2UgPSAkLkN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlID0gJC5DdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2U7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21SZW5kZXJlcl9XZWJHTCA9ICQuQ3ViaXNtUmVuZGVyZXJfV2ViR0w7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVJlbmRlcmVyX1dlYkdMID0gJC5DdWJpc21SZW5kZXJlcl9XZWJHTDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVNoYWRlclNldCA9ICQuQ3ViaXNtU2hhZGVyU2V0O1xuICBleHBvcnQgdHlwZSBDdWJpc21TaGFkZXJTZXQgPSAkLkN1YmlzbVNoYWRlclNldDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVNoYWRlcl9XZWJHTCA9ICQuQ3ViaXNtU2hhZGVyX1dlYkdMO1xuICBleHBvcnQgdHlwZSBDdWJpc21TaGFkZXJfV2ViR0wgPSAkLkN1YmlzbVNoYWRlcl9XZWJHTDtcbiAgZXhwb3J0IGNvbnN0IFNoYWRlck5hbWVzID0gJC5TaGFkZXJOYW1lcztcbiAgZXhwb3J0IHR5cGUgU2hhZGVyTmFtZXMgPSAkLlNoYWRlck5hbWVzO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTG9nRGVidWcgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5cbi8qKlxuICogS2V5LVZhbHVl44Gu44Oa44Ki44KS5a6a576p44GZ44KL44Kv44Op44K5XG4gKiBjc21NYXDjgq/jg6njgrnjga7lhoXpg6jjg4fjg7zjgr/jgafkvb/nlKjjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbVBhaXI8X0tleVQsIF9WYWxUPiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIGtleSBLZXnjgajjgZfjgabjgrvjg4Pjg4jjgZnjgovlgKRcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVl44Go44GX44Gm44K744OD44OI44GZ44KL5YCkXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioa2V5PzogX0tleVQsIHZhbHVlPzogX1ZhbFQpIHtcbiAgICB0aGlzLmZpcnN0ID0ga2V5ID09IHVuZGVmaW5lZCA/IG51bGwgOiBrZXk7XG5cbiAgICB0aGlzLnNlY29uZCA9IHZhbHVlID09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBmaXJzdDogX0tleVQ7IC8vIGtleeOBqOOBl+OBpueUqOOBhOOCi+WkieaVsFxuICBwdWJsaWMgc2Vjb25kOiBfVmFsVDsgLy8gdmFsdWXjgajjgZfjgabnlKjjgYTjgovlpInmlbBcbn1cblxuLyoqXG4gKiDjg57jg4Pjg5flnotcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbU1hcDxfS2V5VCwgX1ZhbFQ+IHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gc2l6ZSDliJ3mnJ/ljJbmmYLngrnjgafnorrkv53jgZnjgovjgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzaXplPzogbnVtYmVyKSB7XG4gICAgaWYgKHNpemUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoc2l6ZSA8IDEpIHtcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gW107XG4gICAgICAgIHRoaXMuX2R1bW15VmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2tleVZhbHVlcyA9IG5ldyBBcnJheShzaXplKTtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2tleVZhbHVlcyA9IFtdO1xuICAgICAgdGhpcy5fZHVtbXlWYWx1ZSA9IG51bGw7XG4gICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpIHtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog44Kt44O844KS6L+95Yqg44GZ44KLXG4gICAqIEBwYXJhbSBrZXkg5paw44Gf44Gr6L+95Yqg44GZ44KL44Kt44O8XG4gICAqL1xuICBwdWJsaWMgYXBwZW5kS2V5KGtleTogX0tleVQpOiB2b2lkIHtcbiAgICAvLyDmlrDjgZfjgY9LZXkvVmFsdWXjga7jg5rjgqLjgpLkvZzjgotcbiAgICB0aGlzLnByZXBhcmVDYXBhY2l0eSh0aGlzLl9zaXplICsgMSwgZmFsc2UpOyAvLyAx44Gk5Lul5LiK5YWl44KL6ZqZ6ZaT44KS5L2c44KLXG4gICAgLy8g5paw44GX44GEa2V5L3ZhbHVl44Gu44Kk44Oz44OH44OD44Kv44K544GvX3NpemVcblxuICAgIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplXSA9IG5ldyBjc21QYWlyPF9LZXlULCBfVmFsVD4oa2V5KTtcbiAgICB0aGlzLl9zaXplICs9IDE7XG4gIH1cblxuICAvKipcbiAgICog5re75a2X5ryU566X5a2QW2tleV3jga7jgqrjg7zjg5Djg7zjg63jg7zjg4koZ2V0KVxuICAgKiBAcGFyYW0ga2V5IOa3u+Wtl+OBi+OCieeJueWumuOBleOCjOOCi1ZhbHVl5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWUoa2V5OiBfS2V5VCk6IF9WYWxUIHtcbiAgICBsZXQgZm91bmQgPSAtMTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSkge1xuICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmb3VuZCA+PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fa2V5VmFsdWVzW2ZvdW5kXS5zZWNvbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXBwZW5kS2V5KGtleSk7IC8vIOaWsOimj+OCreODvOOCkui/veWKoFxuICAgICAgcmV0dXJuIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplIC0gMV0uc2Vjb25kO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBba2V5XeOBruOCquODvOODkOODvOODreODvOODiShzZXQpXG4gICAqIEBwYXJhbSBrZXkg5re75a2X44GL44KJ54m55a6a44GV44KM44KLVmFsdWXlgKRcbiAgICogQHBhcmFtIHZhbHVlIOS7o+WFpeOBmeOCi1ZhbHVl5YCkXG4gICAqL1xuICBwdWJsaWMgc2V0VmFsdWUoa2V5OiBfS2V5VCwgdmFsdWU6IF9WYWxUKTogdm9pZCB7XG4gICAgbGV0IGZvdW5kID0gLTE7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NpemU7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX2tleVZhbHVlc1tpXS5maXJzdCA9PSBrZXkpIHtcbiAgICAgICAgZm91bmQgPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZm91bmQgPj0gMCkge1xuICAgICAgdGhpcy5fa2V5VmFsdWVzW2ZvdW5kXS5zZWNvbmQgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hcHBlbmRLZXkoa2V5KTsgLy8g5paw6KaP44Kt44O844KS6L+95YqgXG4gICAgICB0aGlzLl9rZXlWYWx1ZXNbdGhpcy5fc2l6ZSAtIDFdLnNlY29uZCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmuKHjgZfjgZ9LZXnjgpLmjIHjgaTopoHntKDjgYzlrZjlnKjjgZnjgovjgYtcbiAgICogQHBhcmFtIGtleSDlrZjlnKjjgpLnorroqo3jgZnjgotrZXlcbiAgICogQHJldHVybiB0cnVlIOW8leaVsOOBp+a4oeOBl+OBn2tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOW8leaVsOOBp+a4oeOBl+OBn2tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3Qoa2V5OiBfS2V5VCk6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIGtleVZhbHVl44Gu44Od44Kk44Oz44K/44KS5YWo44Gm6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fa2V5VmFsdWVzID0gdm9pZCAwO1xuICAgIHRoaXMuX2tleVZhbHVlcyA9IG51bGw7XG4gICAgdGhpcy5fa2V5VmFsdWVzID0gW107XG5cbiAgICB0aGlzLl9zaXplID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7jgrXjgqTjgrrjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiDjgrPjg7Pjg4bjg4rjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44Kj44KS56K65L+d44GZ44KLXG4gICAqIEBwYXJhbSBuZXdTaXplIOaWsOOBn+OBquOCreODo+ODkeOCt+ODhuOCo+OAguW8leaVsOOBruWApOOBjOePvuWcqOOBruOCteOCpOOCuuacqua6gOOBruWgtOWQiOOBr+S9leOCguOBl+OBquOBhOOAglxuICAgKiBAcGFyYW0gZml0VG9TaXplIHRydWXjgarjgonmjIflrprjgZfjgZ/jgrXjgqTjgrrjgavlkIjjgo/jgZvjgovjgIJmYWxzZeOBquOCieOCteOCpOOCuuOCkjLlgI3norrkv53jgZfjgabjgYrjgY/jgIJcbiAgICovXG4gIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyLCBmaXRUb1NpemU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAobmV3U2l6ZSA+IHRoaXMuX2tleVZhbHVlcy5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgaWYgKCFmaXRUb1NpemUgJiYgbmV3U2l6ZSA8IGNzbU1hcC5EZWZhdWx0U2l6ZSlcbiAgICAgICAgICBuZXdTaXplID0gY3NtTWFwLkRlZmF1bHRTaXplO1xuICAgICAgICB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoID0gbmV3U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZml0VG9TaXplICYmIG5ld1NpemUgPCB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoICogMilcbiAgICAgICAgICBuZXdTaXplID0gdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCAqIDI7XG4gICAgICAgIHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPSBuZXdTaXplO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7lhYjpoK3opoHntKDjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBiZWdpbigpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPih0aGlzLCAwKTtcbiAgICByZXR1cm4gaXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBrue1guerr+imgee0oOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGVuZCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPihcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLl9zaXplXG4gICAgKTsgLy8g57WC5LqGXG4gICAgcmV0dXJuIGl0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjgYvjgonopoHntKDjgpLliYrpmaTjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGl0ZSDliYrpmaTjgZnjgovopoHntKBcbiAgICovXG4gIHB1YmxpYyBlcmFzZShpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4pOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gaXRlLl9pbmRleDtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBpdGU7IC8vIOWJiumZpOevhOWbsuWkllxuICAgIH1cblxuICAgIC8vIOWJiumZpFxuICAgIHRoaXMuX2tleVZhbHVlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgIGNvbnN0IGl0ZTI6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPihcbiAgICAgIHRoaXMsXG4gICAgICBpbmRleFxuICAgICk7IC8vIOe1guS6hlxuICAgIHJldHVybiBpdGUyO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruWApOOCkjMy44OT44OD44OI56ym5Y+35LuY44GN5pW05pWw5Z6L44Gn44OA44Oz44OX44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZHVtcEFzSW50KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICBDdWJpc21Mb2dEZWJ1ZygnezB9ICwnLCB0aGlzLl9rZXlWYWx1ZXNbaV0pO1xuICAgICAgQ3ViaXNtTG9nRGVidWcoJ1xcbicpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRGVmYXVsdFNpemUgPSAxMDsgLy8g44Kz44Oz44OG44OK44Gu5Yid5pyf5YyW44Gu44OH44OV44Kp44Or44OI44K144Kk44K6XG4gIHB1YmxpYyBfa2V5VmFsdWVzOiBjc21QYWlyPF9LZXlULCBfVmFsVD5bXTsgLy8ga2V5LXZhbHVl44Oa44Ki44Gu6YWN5YiXXG4gIHB1YmxpYyBfZHVtbXlWYWx1ZTogX1ZhbFQ7IC8vIOepuuOBruWApOOCkui/lOOBmeeCuuOBruODgOODn+ODvFxuICBwdWJsaWMgX3NpemU6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXG59XG5cbi8qKlxuICogY3NtTWFwPFQ+44Gu44Kk44OG44Os44O844K/XG4gKi9cbmV4cG9ydCBjbGFzcyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3Iodj86IGNzbU1hcDxfS2V5VCwgX1ZhbFQ+LCBpZHg/OiBudW1iZXIpIHtcbiAgICB0aGlzLl9tYXAgPSB2ICE9IHVuZGVmaW5lZCA/IHYgOiBuZXcgY3NtTWFwPF9LZXlULCBfVmFsVD4oKTtcblxuICAgIHRoaXMuX2luZGV4ID0gaWR4ICE9IHVuZGVmaW5lZCA/IGlkeCA6IDA7XG4gIH1cblxuICAvKipcbiAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIHNldChpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4pOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgdGhpcy5fbWFwID0gaXRlLl9tYXA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YmN572u44GNKyvmvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBwcmVJbmNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgKyt0aGlzLl9pbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliY3nva7jgY0tLea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIHByZURlY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICAtLXRoaXMuX2luZGV4O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOW+jOe9ruOBjSsr5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgaW5jcmVtZW50KCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMuX21hcCwgdGhpcy5faW5kZXgrKyk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxuICAgIHJldHVybiBpdGVvbGQ7XG4gIH1cblxuICAvKipcbiAgICog5b6M572u44GNLS3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBkZWNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4odGhpcy5fbWFwLCB0aGlzLl9pbmRleCk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxuICAgIHRoaXMuX21hcCA9IGl0ZW9sZC5fbWFwO1xuICAgIHRoaXMuX2luZGV4ID0gaXRlb2xkLl9pbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiAq5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgcHRyKCk6IGNzbVBhaXI8X0tleVQsIF9WYWxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5fa2V5VmFsdWVzW3RoaXMuX2luZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiAhPea8lOeul1xuICAgKi9cbiAgcHVibGljIG5vdEVxdWFsKGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbmRleCAhPSBpdGUuX2luZGV4IHx8IHRoaXMuX21hcCAhPSBpdGUuX21hcDtcbiAgfVxuXG4gIF9pbmRleDogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgX21hcDogY3NtTWFwPF9LZXlULCBfVmFsVD47IC8vIOOCs+ODs+ODhuODilxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc21tYXAnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IGNzbU1hcCA9ICQuY3NtTWFwO1xuICBleHBvcnQgdHlwZSBjc21NYXA8SywgVj4gPSAkLmNzbU1hcDxLLCBWPjtcbiAgZXhwb3J0IGNvbnN0IGNzbVBhaXIgPSAkLmNzbVBhaXI7XG4gIGV4cG9ydCB0eXBlIGNzbVBhaXI8SywgVj4gPSAkLmNzbVBhaXI8SywgVj47XG4gIGV4cG9ydCBjb25zdCBpdGVyYXRvciA9ICQuaXRlcmF0b3I7XG4gIGV4cG9ydCB0eXBlIGl0ZXJhdG9yPEssIFY+ID0gJC5pdGVyYXRvcjxLLCBWPjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICog55+p5b2i5b2i54q277yI5bqn5qiZ44O76ZW344GV44GvZmxvYXTlgKTvvInjgpLlrprnvqnjgZnjgovjgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbVJlY3Qge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSB4IOW3puerr1jluqfmqJlcbiAgICogQHBhcmFtIHkg5LiK56uvWeW6p+aomVxuICAgKiBAcGFyYW0gdyDluYVcbiAgICogQHBhcmFtIGgg6auY44GVXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoeD86IG51bWJlciwgeT86IG51bWJlciwgdz86IG51bWJlciwgaD86IG51bWJlcikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLndpZHRoID0gdztcbiAgICB0aGlzLmhlaWdodCA9IGg7XG4gIH1cblxuICAvKipcbiAgICog55+p5b2i5Lit5aSu44GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldENlbnRlclgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICsgMC41ICogdGhpcy53aWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnn6nlvaLkuK3lpK7jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2VudGVyWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnkgKyAwLjUgKiB0aGlzLmhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj7PlgbTjga5Y5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0UmlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuIvnq6/jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Qm90dG9tKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueSArIHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOefqeW9ouOBq+WApOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gciDnn6nlvaLjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzZXRSZWN0KHI6IGNzbVJlY3QpOiB2b2lkIHtcbiAgICB0aGlzLnggPSByLng7XG4gICAgdGhpcy55ID0gci55O1xuICAgIHRoaXMud2lkdGggPSByLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gci5oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog55+p5b2i5Lit5aSu44KS6Lu444Gr44GX44Gm57im5qiq44KS5ouh57iu44GZ44KLXG4gICAqIEBwYXJhbSB3IOW5heaWueWQkeOBq+aLoee4ruOBmeOCi+mHj1xuICAgKiBAcGFyYW0gaCDpq5jjgZXmlrnlkJHjgavmi6HnuK7jgZnjgovph49cbiAgICovXG4gIHB1YmxpYyBleHBhbmQodzogbnVtYmVyLCBoOiBudW1iZXIpIHtcbiAgICB0aGlzLnggLT0gdztcbiAgICB0aGlzLnkgLT0gaDtcbiAgICB0aGlzLndpZHRoICs9IHcgKiAyLjA7XG4gICAgdGhpcy5oZWlnaHQgKz0gaCAqIDIuMDtcbiAgfVxuXG4gIHB1YmxpYyB4OiBudW1iZXI7IC8vIOW3puerr1jluqfmqJlcbiAgcHVibGljIHk6IG51bWJlcjsgLy8g5LiK56uvWeW6p+aomVxuICBwdWJsaWMgd2lkdGg6IG51bWJlcjsgLy8g5bmFXG4gIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjsgLy8g6auY44GVXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2NzbXJlY3RmJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBjc21SZWN0ID0gJC5jc21SZWN0O1xuICBleHBvcnQgdHlwZSBjc21SZWN0ID0gJC5jc21SZWN0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDmloflrZfliJfjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbVN0cmluZyB7XG4gIC8qKlxuICAgKiDmloflrZfliJfjgpLlvozmlrnjgavov73liqDjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGMg6L+95Yqg44GZ44KL5paH5a2X5YiXXG4gICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgYXBwZW5kKGM6IHN0cmluZywgbGVuZ3RoPzogbnVtYmVyKTogY3NtU3RyaW5nIHtcbiAgICB0aGlzLnMgKz0gbGVuZ3RoICE9PSB1bmRlZmluZWQgPyBjLnN1YnN0cigwLCBsZW5ndGgpIDogYztcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+OCteOCpOOCuuOCkuaLoeW8teOBl+OBpuaWh+Wtl+OCkuWfi+OCgeOCi1xuICAgKiBAcGFyYW0gbGVuZ3RoICAgIOaLoeW8teOBmeOCi+aWh+Wtl+aVsFxuICAgKiBAcGFyYW0gdiAgICAgICAgIOWfi+OCgeOCi+aWh+Wtl1xuICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xuICAgKi9cbiAgcHVibGljIGV4cGFuc2lvbihsZW5ndGg6IG51bWJlciwgdjogc3RyaW5nKTogY3NtU3RyaW5nIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmFwcGVuZCh2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfjga7plbfjgZXjgpLjg5DjgqTjg4jmlbDjgaflj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRCeXRlcygpOiBudW1iZXIge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodGhpcy5zKS5yZXBsYWNlKC8lLi4vZywgJ3gnKS5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX44Gu6ZW344GV44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX5q+U6LyDIDxcbiAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXG4gICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXG4gICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5aSn44GN44GEXG4gICAqL1xuICBwdWJsaWMgaXNMZXNzKHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnMgPCBzLnM7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX5q+U6LyDID5cbiAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXG4gICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5aSn44GN44GEXG4gICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXG4gICAqL1xuICBwdWJsaWMgaXNHcmVhdChzOiBjc21TdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zID4gcy5zO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+avlOi8gyA9PVxuICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcbiAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgajnrYnjgZfjgYRcbiAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgajnlbDjgarjgotcbiAgICovXG4gIHB1YmxpYyBpc0VxdWFsKHM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnMgPT0gcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfjgYznqbrjgYvjganjgYbjgYtcbiAgICogQHJldHVybiB0cnVlOiDnqbrjga7mloflrZfliJdcbiAgICogQHJldHVybiBmYWxzZTog5YCk44GM6Kit5a6a44GV44KM44Gm44GE44KLXG4gICAqL1xuICBwdWJsaWMgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zLmxlbmd0aCA9PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IHN0cmluZykge1xuICAgIHRoaXMucyA9IHM7XG4gIH1cblxuICBzOiBzdHJpbmc7XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2NzbXN0cmluZyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgY3NtU3RyaW5nID0gJC5jc21TdHJpbmc7XG4gIGV4cG9ydCB0eXBlIGNzbVN0cmluZyA9ICQuY3NtU3RyaW5nO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDjg5njgq/jgr/jg7zlnovvvIjlj6/lpInphY3liJflnovvvIlcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbVZlY3RvcjxUPiB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIGluaWl0YWxDYXBhY2l0eSDliJ3mnJ/ljJblvozjga7jgq3jg6Pjg5Hjgrfjg4bjgqPjgILjg4fjg7zjgr/jgrXjgqTjgrrjga9fY2FwYWNpdHkgKiBzaXplb2YoVClcbiAgICogQHBhcmFtIHplcm9DbGVhciB0cnVl44Gq44KJ5Yid5pyf5YyW5pmC44Gr56K65L+d44GX44Gf6aCY5Z+f44KSMOOBp+Wfi+OCgeOCi1xuICAgKi9cbiAgY29uc3RydWN0b3IoaW5pdGlhbENhcGFjaXR5ID0gMCkge1xuICAgIGlmIChpbml0aWFsQ2FwYWNpdHkgPCAxKSB7XG4gICAgICB0aGlzLl9wdHIgPSBbXTtcbiAgICAgIHRoaXMuX2NhcGFjaXR5ID0gMDtcbiAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wdHIgPSBuZXcgQXJyYXkoaW5pdGlhbENhcGFjaXR5KTtcbiAgICAgIHRoaXMuX2NhcGFjaXR5ID0gaW5pdGlhbENhcGFjaXR5O1xuICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBl+OBn+imgee0oOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGF0KGluZGV4OiBudW1iZXIpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fcHRyW2luZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIGluZGV4IOimgee0oOOCkuOCu+ODg+ODiOOBmeOCi+OCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg44K744OD44OI44GZ44KL6KaB57SgXG4gICAqL1xuICBwdWJsaWMgc2V0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgdGhpcy5fcHRyW2luZGV4XSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldChvZmZzZXQgPSAwKTogVFtdIHtcbiAgICBjb25zdCByZXQ6IFRbXSA9IG5ldyBBcnJheTxUPigpO1xuICAgIGZvciAobGV0IGkgPSBvZmZzZXQ7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIHJldC5wdXNoKHRoaXMuX3B0cltpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogcHVzaEJhY2vlh6bnkIbjgIHjgrPjg7Pjg4bjg4rjgavmlrDjgZ/jgaropoHntKDjgpLov73liqDjgZnjgotcbiAgICogQHBhcmFtIHZhbHVlIFB1c2hCYWNr5Yem55CG44Gn6L+95Yqg44GZ44KL5YCkXG4gICAqL1xuICBwdWJsaWMgcHVzaEJhY2sodmFsdWU6IFQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc2l6ZSA+PSB0aGlzLl9jYXBhY2l0eSkge1xuICAgICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkoXG4gICAgICAgIHRoaXMuX2NhcGFjaXR5ID09IDAgPyBjc21WZWN0b3Iuc19kZWZhdWx0U2l6ZSA6IHRoaXMuX2NhcGFjaXR5ICogMlxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wdHJbdGhpcy5fc2l6ZSsrXSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruWFqOimgee0oOOCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX3B0ci5sZW5ndGggPSAwO1xuICAgIHRoaXMuX3NpemUgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruimgee0oOaVsOOCkui/lOOBmVxuICAgKiBAcmV0dXJuIOOCs+ODs+ODhuODiuOBruimgee0oOaVsFxuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7lhajopoHntKDjgavlr77jgZfjgabku6PlhaXlh6bnkIbjgpLooYzjgYZcbiAgICogQHBhcmFtIG5ld1NpemUg5Luj5YWl5Yem55CG5b6M44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSB2YWx1ZSDopoHntKDjgavku6PlhaXjgZnjgovlgKRcbiAgICovXG4gIHB1YmxpYyBhc3NpZ24obmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogVCk6IHZvaWQge1xuICAgIGNvbnN0IGN1clNpemUgPSB0aGlzLl9zaXplO1xuXG4gICAgaWYgKGN1clNpemUgPCBuZXdTaXplKSB7XG4gICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShuZXdTaXplKTsgLy8gY2FwYWNpdHnmm7TmlrBcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld1NpemU7IGkrKykge1xuICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5fc2l6ZSA9IG5ld1NpemU7XG4gIH1cblxuICAvKipcbiAgICog44K144Kk44K65aSJ5pu0XG4gICAqL1xuICBwdWJsaWMgcmVzaXplKG5ld1NpemU6IG51bWJlciwgdmFsdWU6IFQgPSBudWxsKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVTaXplKG5ld1NpemUsIHZhbHVlLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrXjgqTjgrrlpInmm7RcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVTaXplKFxuICAgIG5ld1NpemU6IG51bWJlcixcbiAgICB2YWx1ZTogYW55ID0gbnVsbCxcbiAgICBjYWxsUGxhY2VtZW50TmV3ID0gdHJ1ZVxuICApOiB2b2lkIHtcbiAgICBjb25zdCBjdXJTaXplOiBudW1iZXIgPSB0aGlzLl9zaXplO1xuXG4gICAgaWYgKGN1clNpemUgPCBuZXdTaXplKSB7XG4gICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShuZXdTaXplKTsgLy8gY2FwYWNpdHnmm7TmlrBcblxuICAgICAgaWYgKGNhbGxQbGFjZW1lbnROZXcpIHtcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gdGhpcy5fc2l6ZTsgaSA8IG5ld1NpemU7IGkrKykge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gbmV3XG4gICAgICAgICAgICB0aGlzLl9wdHJbaV0gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG5ldyB2YWx1ZSgpKSk7XG4gICAgICAgICAgfSAvLyDjg5fjg6rjg5/jg4bjgqPjg5blnovjgarjga7jgaflgKTmuKHjgZdcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3B0cltpXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gdGhpcy5fc2l6ZTsgaSA8IG5ld1NpemU7IGkrKykge1xuICAgICAgICAgIHRoaXMuX3B0cltpXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5ld1NpemUgPD0gdGhpcy5fc2l6ZVxuICAgICAgLy8tLS1cbiAgICAgIGNvbnN0IHN1YiA9IHRoaXMuX3NpemUgLSBuZXdTaXplO1xuICAgICAgdGhpcy5fcHRyLnNwbGljZSh0aGlzLl9zaXplIC0gc3ViLCBzdWIpOyAvLyDkuI3opoHjgarjga7jgafnoLTmo4TjgZnjgotcbiAgICB9XG4gICAgdGhpcy5fc2l6ZSA9IG5ld1NpemU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gr44Kz44Oz44OG44OK6KaB57Sg44KS5oy/5YWl44GZ44KLXG4gICAqIEBwYXJhbSBwb3NpdGlvbiDmjL/lhaXjgZnjgovkvY3nva5cbiAgICogQHBhcmFtIGJlZ2luIOaMv+WFpeOBmeOCi+OCs+ODs+ODhuODiuOBrumWi+Wni+S9jee9rlxuICAgKiBAcGFyYW0gZW5kIOaMv+WFpeOBmeOCi+OCs+ODs+ODhuODiuOBrue1guerr+S9jee9rlxuICAgKi9cbiAgcHVibGljIGluc2VydChcbiAgICBwb3NpdGlvbjogaXRlcmF0b3I8VD4sXG4gICAgYmVnaW46IGl0ZXJhdG9yPFQ+LFxuICAgIGVuZDogaXRlcmF0b3I8VD5cbiAgKTogdm9pZCB7XG4gICAgbGV0IGRzdFNpOiBudW1iZXIgPSBwb3NpdGlvbi5faW5kZXg7XG4gICAgY29uc3Qgc3JjU2k6IG51bWJlciA9IGJlZ2luLl9pbmRleDtcbiAgICBjb25zdCBzcmNFaTogbnVtYmVyID0gZW5kLl9pbmRleDtcblxuICAgIGNvbnN0IGFkZENvdW50OiBudW1iZXIgPSBzcmNFaSAtIHNyY1NpO1xuXG4gICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkodGhpcy5fc2l6ZSArIGFkZENvdW50KTtcblxuICAgIC8vIOaMv+WFpeeUqOOBruaXouWtmOODh+ODvOOCv+OCkuOCt+ODleODiOOBl+OBpumamemWk+OCkuS9nOOCi1xuICAgIGNvbnN0IGFkZFNpemUgPSB0aGlzLl9zaXplIC0gZHN0U2k7XG4gICAgaWYgKGFkZFNpemUgPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFkZFNpemU7IGkrKykge1xuICAgICAgICB0aGlzLl9wdHIuc3BsaWNlKGRzdFNpICsgaSwgMCwgbnVsbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gc3JjU2k7IGkgPCBzcmNFaTsgaSsrLCBkc3RTaSsrKSB7XG4gICAgICB0aGlzLl9wdHJbZHN0U2ldID0gYmVnaW4uX3ZlY3Rvci5fcHRyW2ldO1xuICAgIH1cblxuICAgIHRoaXMuX3NpemUgPSB0aGlzLl9zaXplICsgYWRkQ291bnQ7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44GL44KJ44Kk44Oz44OH44OD44Kv44K544Gn5oyH5a6a44GX44Gf6KaB57Sg44KS5YmK6Zmk44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDjgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiB0cnVlIOWJiumZpOWun+ihjFxuICAgKiBAcmV0dXJuIGZhbHNlIOWJiumZpOevhOWbsuWkllxuICAgKi9cbiAgcHVibGljIHJlbW92ZShpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9zaXplIDw9IGluZGV4KSB7XG4gICAgICByZXR1cm4gZmFsc2U7IC8vIOWJiumZpOevhOWbsuWkllxuICAgIH1cblxuICAgIHRoaXMuX3B0ci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBi+OCieimgee0oOOCkuWJiumZpOOBl+OBpuS7luOBruimgee0oOOCkuOCt+ODleODiOOBmeOCi1xuICAgKiBAcGFyYW0gaXRlIOWJiumZpOOBmeOCi+imgee0oFxuICAgKi9cbiAgcHVibGljIGVyYXNlKGl0ZTogaXRlcmF0b3I8VD4pOiBpdGVyYXRvcjxUPiB7XG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IGl0ZS5faW5kZXg7XG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9zaXplIDw9IGluZGV4KSB7XG4gICAgICByZXR1cm4gaXRlOyAvLyDliYrpmaTnr4Tlm7LlpJZcbiAgICB9XG5cbiAgICAvLyDliYrpmaRcbiAgICB0aGlzLl9wdHIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAtLXRoaXMuX3NpemU7XG5cbiAgICBjb25zdCBpdGUyOiBpdGVyYXRvcjxUPiA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLCBpbmRleCk7IC8vIOe1guS6hlxuICAgIHJldHVybiBpdGUyO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruOCreODo+ODkeOCt+ODhuOCo+OCkueiuuS/neOBmeOCi1xuICAgKiBAcGFyYW0gbmV3U2l6ZSDmlrDjgZ/jgarjgq3jg6Pjg5Hjgrfjg4bjgqPjgILlvJXmlbDjga7lgKTjgYznj77lnKjjga7jgrXjgqTjgrrmnKrmuoDjga7loLTlkIjjga/kvZXjgoLjgZfjgarjgYQuXG4gICAqL1xuICBwdWJsaWMgcHJlcGFyZUNhcGFjaXR5KG5ld1NpemU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChuZXdTaXplID4gdGhpcy5fY2FwYWNpdHkpIHtcbiAgICAgIGlmICh0aGlzLl9jYXBhY2l0eSA9PSAwKSB7XG4gICAgICAgIHRoaXMuX3B0ciA9IG5ldyBBcnJheShuZXdTaXplKTtcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBuZXdTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHRyLmxlbmd0aCA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX2NhcGFjaXR5ID0gbmV3U2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu5YWI6aCt6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgYmVnaW4oKTogaXRlcmF0b3I8VD4ge1xuICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8VD4gPVxuICAgICAgdGhpcy5fc2l6ZSA9PSAwID8gdGhpcy5lbmQoKSA6IG5ldyBpdGVyYXRvcjxUPih0aGlzLCAwKTtcbiAgICByZXR1cm4gaXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBrue1guerr+imgee0oOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGVuZCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgY29uc3QgaXRlOiBpdGVyYXRvcjxUPiA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLCB0aGlzLl9zaXplKTtcbiAgICByZXR1cm4gaXRlO1xuICB9XG5cbiAgcHVibGljIGdldE9mZnNldChvZmZzZXQ6IG51bWJlcik6IGNzbVZlY3RvcjxUPiB7XG4gICAgY29uc3QgbmV3VmVjdG9yID0gbmV3IGNzbVZlY3RvcjxUPigpO1xuICAgIG5ld1ZlY3Rvci5fcHRyID0gdGhpcy5nZXQob2Zmc2V0KTtcbiAgICBuZXdWZWN0b3IuX3NpemUgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcbiAgICBuZXdWZWN0b3IuX2NhcGFjaXR5ID0gdGhpcy5nZXQob2Zmc2V0KS5sZW5ndGg7XG5cbiAgICByZXR1cm4gbmV3VmVjdG9yO1xuICB9XG5cbiAgX3B0cjogVFtdOyAvLyDjgrPjg7Pjg4bjg4rjga7lhYjpoK3jgqLjg4njg6zjgrlcbiAgX3NpemU6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXG4gIF9jYXBhY2l0eTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgq3jg6Pjg5Hjgrfjg4bjgqNcblxuICBzdGF0aWMgcmVhZG9ubHkgc19kZWZhdWx0U2l6ZSA9IDEwOyAvLyDjgrPjg7Pjg4bjg4rliJ3mnJ/ljJbjga7jg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcbn1cblxuZXhwb3J0IGNsYXNzIGl0ZXJhdG9yPFQ+IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHY/OiBjc21WZWN0b3I8VD4sIGluZGV4PzogbnVtYmVyKSB7XG4gICAgdGhpcy5fdmVjdG9yID0gdiAhPSB1bmRlZmluZWQgPyB2IDogbnVsbDtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4ICE9IHVuZGVmaW5lZCA/IGluZGV4IDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDku6PlhaVcbiAgICovXG4gIHB1YmxpYyBzZXQoaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcbiAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgdGhpcy5fdmVjdG9yID0gaXRlLl92ZWN0b3I7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YmN572u44GNKyvmvJTnrpdcbiAgICovXG4gIHB1YmxpYyBwcmVJbmNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgICsrdGhpcy5faW5kZXg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YmN572u44GNLS3mvJTnrpdcbiAgICovXG4gIHB1YmxpYyBwcmVEZWNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgIC0tdGhpcy5faW5kZXg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5b6M572u44GNKyvmvJTnrpflrZBcbiAgICovXG4gIHB1YmxpYyBpbmNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLl92ZWN0b3IsIHRoaXMuX2luZGV4KyspOyAvLyDlj6TjgYTlgKTjgpLkv53lrZhcbiAgICByZXR1cm4gaXRlb2xkO1xuICB9XG5cbiAgLyoqXG4gICAqIOW+jOe9ruOBjS0t5ryU566X5a2QXG4gICAqL1xuICBwdWJsaWMgZGVjcmVtZW50KCk6IGl0ZXJhdG9yPFQ+IHtcbiAgICBjb25zdCBpdGVvbGQgPSBuZXcgaXRlcmF0b3I8VD4odGhpcy5fdmVjdG9yLCB0aGlzLl9pbmRleC0tKTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgcmV0dXJuIGl0ZW9sZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBwdHJcbiAgICovXG4gIHB1YmxpYyBwdHIoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZlY3Rvci5fcHRyW3RoaXMuX2luZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiA95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgc3Vic3RpdHV0aW9uKGl0ZTogaXRlcmF0b3I8VD4pOiBpdGVyYXRvcjxUPiB7XG4gICAgdGhpcy5faW5kZXggPSBpdGUuX2luZGV4O1xuICAgIHRoaXMuX3ZlY3RvciA9IGl0ZS5fdmVjdG9yO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqICE95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgbm90RXF1YWwoaXRlOiBpdGVyYXRvcjxUPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbmRleCAhPSBpdGUuX2luZGV4IHx8IHRoaXMuX3ZlY3RvciAhPSBpdGUuX3ZlY3RvcjtcbiAgfVxuXG4gIF9pbmRleDogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgX3ZlY3RvcjogY3NtVmVjdG9yPFQ+OyAvLyDjgrPjg7Pjg4bjg4pcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3NtdmVjdG9yJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBjc21WZWN0b3IgPSAkLmNzbVZlY3RvcjtcbiAgZXhwb3J0IHR5cGUgY3NtVmVjdG9yPFQ+ID0gJC5jc21WZWN0b3I8VD47XG4gIGV4cG9ydCBjb25zdCBpdGVyYXRvciA9ICQuaXRlcmF0b3I7XG4gIGV4cG9ydCB0eXBlIGl0ZXJhdG9yPFQ+ID0gJC5pdGVyYXRvcjxUPjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7XG4gIENTTV9MT0dfTEVWRUwsXG4gIENTTV9MT0dfTEVWRUxfREVCVUcsXG4gIENTTV9MT0dfTEVWRUxfRVJST1IsXG4gIENTTV9MT0dfTEVWRUxfSU5GTyxcbiAgQ1NNX0xPR19MRVZFTF9WRVJCT1NFLFxuICBDU01fTE9HX0xFVkVMX1dBUk5JTkcsXG59IGZyb20gJy4uL2N1YmlzbWZyYW1ld29ya2NvbmZpZyc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmssIExvZ0xldmVsIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcblxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50ID0gKGxldmVsOiBMb2dMZXZlbCwgZm10OiBzdHJpbmcsIGFyZ3M6IGFueVtdKSA9PiB7XG4gIEN1YmlzbURlYnVnLnByaW50KGxldmVsLCAnW0NTTV0nICsgZm10LCBhcmdzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDdWJpc21Mb2dQcmludEluID0gKGxldmVsOiBMb2dMZXZlbCwgZm10OiBzdHJpbmcsIGFyZ3M6IGFueVtdKSA9PiB7XG4gIEN1YmlzbUxvZ1ByaW50KGxldmVsLCBmbXQgKyAnXFxuJywgYXJncyk7XG59O1xuXG5leHBvcnQgY29uc3QgQ1NNX0FTU0VSVCA9IChleHByOiBhbnkpID0+IHtcbiAgY29uc29sZS5hc3NlcnQoZXhwcik7XG59O1xuXG5leHBvcnQgbGV0IEN1YmlzbUxvZ1ZlcmJvc2U6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5leHBvcnQgbGV0IEN1YmlzbUxvZ0RlYnVnOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IGxldCBDdWJpc21Mb2dJbmZvOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IGxldCBDdWJpc21Mb2dXYXJuaW5nOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IGxldCBDdWJpc21Mb2dFcnJvcjogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcblxuaWYgKENTTV9MT0dfTEVWRUwgPD0gQ1NNX0xPR19MRVZFTF9WRVJCT1NFKSB7XG4gIEN1YmlzbUxvZ1ZlcmJvc2UgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9WZXJib3NlLCAnW1ZdJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRGVidWcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9EZWJ1ZywgJ1tEXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9JbmZvLCAnW0ldJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsICdbV10nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59IGVsc2UgaWYgKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9ERUJVRykge1xuICBDdWJpc21Mb2dEZWJ1ZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0RlYnVnLCAnW0RdJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nSW5mbyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sICdbSV0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX0lORk8pIHtcbiAgQ3ViaXNtTG9nSW5mbyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sICdbSV0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX1dBUk5JTkcpIHtcbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsICdbV10nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59IGVsc2UgaWYgKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9FUlJPUikge1xuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59XG5cbi8qKlxuICog44OH44OQ44OD44Kw55So44Gu44Om44O844OG44Kj44Oq44OG44Kj44Kv44Op44K544CCXG4gKiDjg63jgrDjga7lh7rlipvjgIHjg5DjgqTjg4jjga7jg4Djg7Pjg5fjgarjgalcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbURlYnVnIHtcbiAgLyoqXG4gICAqIOODreOCsOOCkuWHuuWKm+OBmeOCi+OAguesrOS4gOW8leaVsOOBq+ODreOCsOODrOODmeODq+OCkuioreWumuOBmeOCi+OAglxuICAgKiBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp5pmC44Gr44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GE44CCXG4gICAqXG4gICAqIEBwYXJhbSBsb2dMZXZlbCDjg63jgrDjg6zjg5njg6vjga7oqK3lrppcbiAgICogQHBhcmFtIGZvcm1hdCDmm7jlvI/ku5jjgY3mloflrZfliJdcbiAgICogQHBhcmFtIGFyZ3Mg5Y+v5aSJ6ZW35byV5pWwXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHByaW50KGxvZ0xldmVsOiBMb2dMZXZlbCwgZm9ybWF0OiBzdHJpbmcsIGFyZ3M/OiBhbnlbXSk6IHZvaWQge1xuICAgIC8vIOOCquODl+OCt+ODp+ODs+OBp+ioreWumuOBleOCjOOBn+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuS4i+WbnuOCi+WgtOWQiOOBr+ODreOCsOOBq+WHuuOBleOBquOBhFxuICAgIGlmIChsb2dMZXZlbCA8IEN1YmlzbUZyYW1ld29yay5nZXRMb2dnaW5nTGV2ZWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGxvZ1ByaW50OiBMaXZlMkRDdWJpc21Db3JlLmNzbUxvZ0Z1bmN0aW9uID1cbiAgICAgIEN1YmlzbUZyYW1ld29yay5jb3JlTG9nRnVuY3Rpb247XG5cbiAgICBpZiAoIWxvZ1ByaW50KSByZXR1cm47XG5cbiAgICBjb25zdCBidWZmZXI6IHN0cmluZyA9IGZvcm1hdC5yZXBsYWNlKC9cXHsoXFxkKylcXH0vZywgKG0sIGspID0+IHtcbiAgICAgIHJldHVybiBhcmdzW2tdO1xuICAgIH0pO1xuICAgIGxvZ1ByaW50KGJ1ZmZlcik7XG4gIH1cblxuICAvKipcbiAgICog44OH44O844K/44GL44KJ5oyH5a6a44GX44Gf6ZW344GV44Gg44GR44OA44Oz44OX5Ye65Yqb44GZ44KL44CCXG4gICAqIEN1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCnmmYLjgavjgqrjg5fjgrfjg6fjg7PjgafoqK3lrprjgZXjgozjgZ/jg63jgrDlh7rlipvjg6zjg5njg6vjgpLkuIvlm57jgovloLTlkIjjga/jg63jgrDjgavlh7rjgZXjgarjgYTjgIJcbiAgICpcbiAgICogQHBhcmFtIGxvZ0xldmVsIOODreOCsOODrOODmeODq+OBruioreWumlxuICAgKiBAcGFyYW0gZGF0YSDjg4Djg7Pjg5fjgZnjgovjg4fjg7zjgr9cbiAgICogQHBhcmFtIGxlbmd0aCDjg4Djg7Pjg5fjgZnjgovplbfjgZVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZHVtcEJ5dGVzKFxuICAgIGxvZ0xldmVsOiBMb2dMZXZlbCxcbiAgICBkYXRhOiBVaW50OEFycmF5LFxuICAgIGxlbmd0aDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpICUgMTYgPT0gMCAmJiBpID4gMCkgdGhpcy5wcmludChsb2dMZXZlbCwgJ1xcbicpO1xuICAgICAgZWxzZSBpZiAoaSAlIDggPT0gMCAmJiBpID4gMCkgdGhpcy5wcmludChsb2dMZXZlbCwgJyAgJyk7XG4gICAgICB0aGlzLnByaW50KGxvZ0xldmVsLCAnezB9ICcsIFtkYXRhW2ldICYgMHhmZl0pO1xuICAgIH1cblxuICAgIHRoaXMucHJpbnQobG9nTGV2ZWwsICdcXG4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBwcml2YXRlIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWRlYnVnJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21EZWJ1ZyA9ICQuQ3ViaXNtRGVidWc7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbURlYnVnID0gJC5DdWJpc21EZWJ1Zztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IHN0cnRvZCB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBjc21NYXAsIGl0ZXJhdG9yIGFzIGNzbU1hcF9pdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgYXMgY3NtVmVjdG9yX2l0ZXJhdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJy4vY3ViaXNtZGVidWcnO1xuXG4vLyBTdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgp44Gn5Yid5pyf5YyW44GZ44KLXG5jb25zdCBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIID0gJ0Vycm9yOiB0eXBlIG1pc21hdGNoJztcbmNvbnN0IENTTV9KU09OX0VSUk9SX0lOREVYX09GX0JPVU5EUyA9ICdFcnJvcjogaW5kZXggb3V0IG9mIGJvdW5kcyc7XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOCqOODrOODoeODs+ODiOOBruimgee0oOOBruWfuuW6leOCr+ODqeOCueOAglxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFsdWUge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJflnovjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFN0cmluZyhkZWZhdWx0VmFsdWU/OiBzdHJpbmcsIGluZGVudD86IHN0cmluZyk6IHN0cmluZztcblxuICAvKipcbiAgICog6KaB57Sg44KS5paH5a2X5YiX5Z6L44Gn6L+U44GZKHN0cmluZylcbiAgICovXG4gIHB1YmxpYyBnZXRSYXdTdHJpbmcoZGVmYXVsdFZhbHVlPzogc3RyaW5nLCBpbmRlbnQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZyhkZWZhdWx0VmFsdWUsIGluZGVudCk7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXG4gICAqL1xuICBwdWJsaWMgdG9GbG9hdChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuecn+WBveWApOOBp+i/lOOBmShib29sZWFuKVxuICAgKi9cbiAgcHVibGljIHRvQm9vbGVhbihkZWZhdWx0VmFsdWUgPSBmYWxzZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog44K144Kk44K644KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkumFjeWIl+OBp+i/lOOBmShWYWx1ZVtdKVxuICAgKi9cbiAgcHVibGljIGdldEFycmF5KGRlZmF1bHRWYWx1ZTogVmFsdWVbXSA9IG51bGwpOiBWYWx1ZVtdIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuOCs+ODs+ODhuODiuOBp+i/lOOBmShhcnJheSlcbiAgICovXG4gIHB1YmxpYyBnZXRWZWN0b3IoZGVmYXVsdFZhbHVlID0gbmV3IGNzbVZlY3RvcjxWYWx1ZT4oKSk6IGNzbVZlY3RvcjxWYWx1ZT4ge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS44Oe44OD44OX44Gn6L+U44GZKGNzbU1hcDxjc21TdHJpbmcsIFZhbHVlPilcbiAgICovXG4gIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+IHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IFZhbHVlIHtcbiAgICByZXR1cm4gVmFsdWUuZXJyb3JWYWx1ZS5zZXRFcnJvck5vdEZvckNsaWVudENhbGwoXG4gICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBbc3RyaW5nIHwgY3NtU3RyaW5nXVxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlQnlTdHJpbmcoczogc3RyaW5nIHwgY3NtU3RyaW5nKTogVmFsdWUge1xuICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Oe44OD44OX44Gu44Kt44O85LiA6Kan44KS44Kz44Oz44OG44OK44Gn6L+U44GZXG4gICAqXG4gICAqIEByZXR1cm4g44Oe44OD44OX44Gu44Kt44O844Gu5LiA6KanXG4gICAqL1xuICBwdWJsaWMgZ2V0S2V5cygpOiBjc21WZWN0b3I8c3RyaW5nPiB7XG4gICAgcmV0dXJuIFZhbHVlLnNfZHVtbXlLZXlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM44Ko44Op44O85YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GMbnVsbOOBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc051bGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM55yf5YG95YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzmlbDlgKTlnovjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzmloflrZfliJfjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNTdHJpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM6YWN5YiX44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzQXJyYXkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM44Oe44OD44OX5Z6L44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzTWFwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZeOAgemdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBq+OCqOODqeODvOWApOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChlcnJvclN0cjogc3RyaW5nKTogVmFsdWUge1xuICAgIHJldHVybiBKc29uRXJyb3IuZXJyb3JWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbnlKjjg6Hjgr3jg4Pjg4lcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKTogdm9pZCB7XG4gICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbmV3IEpzb25Cb29sZWFuKHRydWUpO1xuICAgIEpzb25Cb29sZWFuLmZhbHNlVmFsdWUgPSBuZXcgSnNvbkJvb2xlYW4oZmFsc2UpO1xuICAgIFZhbHVlLmVycm9yVmFsdWUgPSBuZXcgSnNvbkVycm9yKCdFUlJPUicsIHRydWUpO1xuICAgIFZhbHVlLm51bGxWYWx1ZSA9IG5ldyBKc29uTnVsbHZhbHVlKCk7XG4gICAgVmFsdWUuc19kdW1teUtleXMgPSBuZXcgY3NtVmVjdG9yPHN0cmluZz4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6rjg6rjg7zjgrnnlKjjg6Hjgr3jg4Pjg4lcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RhdGljUmVsZWFzZU5vdEZvckNsaWVudENhbGwoKTogdm9pZCB7XG4gICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbnVsbDtcbiAgICBKc29uQm9vbGVhbi5mYWxzZVZhbHVlID0gbnVsbDtcbiAgICBWYWx1ZS5lcnJvclZhbHVlID0gbnVsbDtcbiAgICBWYWx1ZS5udWxsVmFsdWUgPSBudWxsO1xuICAgIFZhbHVlLnNfZHVtbXlLZXlzID0gbnVsbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBfc3RyaW5nQnVmZmVyOiBzdHJpbmc7IC8vIOaWh+Wtl+WIl+ODkOODg+ODleOCoVxuXG4gIHByaXZhdGUgc3RhdGljIHNfZHVtbXlLZXlzOiBjc21WZWN0b3I8c3RyaW5nPjsgLy8g44OA44Of44O844Kt44O8XG5cbiAgcHVibGljIHN0YXRpYyBlcnJvclZhbHVlOiBWYWx1ZTsgLy8g5LiA5pmC55qE44Gq6L+U44KK5YCk44Go44GX44Gm6L+U44GZ44Ko44Op44O844CCIEN1YmlzbUZyYW1ld29yazo6RGlzcG9zZeOBmeOCi+OBvuOBp+OBr2RlbGV0ZeOBl+OBquOBhFxuICBwdWJsaWMgc3RhdGljIG51bGxWYWx1ZTogVmFsdWU7IC8vIOS4gOaZgueahOOBqui/lOOCiuWApOOBqOOBl+OBpui/lOOBmU5VTEzjgIIgICBDdWJpc21GcmFtZXdvcms6OkRpc3Bvc2XjgZnjgovjgb7jgafjga9kZWxldGXjgZfjgarjgYRcbn1cblxuLyoqXG4gKiBBc2NpaeaWh+Wtl+OBruOBv+WvvuW/nOOBl+OBn+acgOWwj+mZkOOBrui7vemHj0pTT07jg5Hjg7zjgrXjgIJcbiAqIOS7leanmOOBr0pTT07jga7jgrXjg5bjgrvjg4Pjg4jjgajjgarjgovjgIJcbiAqIOioreWumuODleOCoeOCpOODqyhtb2RlbDMuanNvbinjgarjganjga7jg63jg7zjg4nnlKhcbiAqXG4gKiBb5pyq5a++5b+c6aCF55uuXVxuICog44O75pel5pys6Kqe44Gq44Gp44Gu6Z2eQVNDSUnmloflrZdcbiAqIOODu2XjgavjgojjgovmjIfmlbDooajnj75cbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUpzb24ge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyPzogQXJyYXlCdWZmZXIsIGxlbmd0aD86IG51bWJlcikge1xuICAgIHRoaXMuX2Vycm9yID0gbnVsbDtcbiAgICB0aGlzLl9saW5lQ291bnQgPSAwO1xuICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuXG4gICAgaWYgKGJ1ZmZlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMucGFyc2VCeXRlcyhidWZmZXIsIGxlbmd0aCwgdGhpcy5fcGFyc2VDYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkOOCpOODiOODh+ODvOOCv+OBi+OCieebtOaOpeODreODvOODieOBl+OBpuODkeODvOOCueOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIOODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjgrXjgqTjgrpcbiAgICogQHJldHVybiBDdWJpc21Kc29u44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K544CC5aSx5pWX44GX44Gf44KJTlVMTFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgY29uc3QganNvbiA9IG5ldyBDdWJpc21Kc29uKCk7XG4gICAgY29uc3Qgc3VjY2VlZGVkOiBib29sZWFuID0ganNvbi5wYXJzZUJ5dGVzKFxuICAgICAgYnVmZmVyLFxuICAgICAgc2l6ZSxcbiAgICAgIGpzb24uX3BhcnNlQ2FsbGJhY2tcbiAgICApO1xuXG4gICAgaWYgKCFzdWNjZWVkZWQpIHtcbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Kq44OW44K444Kn44Kv44OI44Gu6Kej5pS+5Yem55CGXG4gICAqXG4gICAqIEBwYXJhbSBpbnN0YW5jZSBDdWJpc21Kc29u44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtSnNvbikge1xuICAgIGluc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu44Or44O844OI6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0Um9vdCgpOiBWYWx1ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG4gIH1cblxuICAvKipcbiAgICogIFVuaWNvZGXjga7jg5DjgqTjg4rjg6rjgpJTdHJpbmfjgavlpInmj5tcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciDlpInmj5vjgZnjgovjg5DjgqTjg4rjg6rjg4fjg7zjgr9cbiAgICogQHJldHVybiDlpInmj5vlvozjga7mloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXJyYXlCdWZmZXJUb1N0cmluZyhidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCB1aW50OEFycmF5OiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBsZXQgc3RyID0gJyc7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuOiBudW1iZXIgPSB1aW50OEFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBzdHIgKz0gJyUnICsgdGhpcy5wYWQodWludDhBcnJheVtpXS50b1N0cmluZygxNikpO1xuICAgIH1cblxuICAgIHN0ciA9IGRlY29kZVVSSUNvbXBvbmVudChzdHIpO1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICAvKipcbiAgICog44Ko44Oz44Kz44O844OJ44CB44OR44OH44Kj44Oz44KwXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBwYWQobjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbi5sZW5ndGggPCAyID8gJzAnICsgbiA6IG47XG4gIH1cblxuICAvKipcbiAgICogSlNPTuOBruODkeODvOOCueOCkuWun+ihjOOBmeOCi1xuICAgKiBAcGFyYW0gYnVmZmVyICAgIOODkeODvOOCueWvvuixoeOBruODh+ODvOOCv+ODkOOCpOODiFxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODh+ODvOOCv+ODkOOCpOODiOOBruOCteOCpOOCulxuICAgKiByZXR1cm4gdHJ1ZSA6IOaIkOWKn1xuICAgKiByZXR1cm4gZmFsc2U6IOWkseaVl1xuICAgKi9cbiAgcHVibGljIHBhcnNlQnl0ZXMoXG4gICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcbiAgICBzaXplOiBudW1iZXIsXG4gICAgcGFyc2VDYWxsYmFjaz86IHBhcnNlSnNvbk9iamVjdFxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBlbmRQb3M6IG51bWJlcltdID0gbmV3IEFycmF5PG51bWJlcj4oMSk7IC8vIOWPgueFp+a4oeOBl+OBq+OBmeOCi+OBn+OCgemFjeWIl1xuICAgIGNvbnN0IGRlY29kZUJ1ZmZlcjogc3RyaW5nID0gQ3ViaXNtSnNvbi5hcnJheUJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcik7XG5cbiAgICBpZiAocGFyc2VDYWxsYmFjayA9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3Jvb3QgPSB0aGlzLnBhcnNlVmFsdWUoZGVjb2RlQnVmZmVyLCBzaXplLCAwLCBlbmRQb3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUeXBlU2NyaXB05qiZ5rqW44GuSlNPTuODkeODvOOCteOCkuS9v+OBhlxuICAgICAgdGhpcy5fcm9vdCA9IHBhcnNlQ2FsbGJhY2soSlNPTi5wYXJzZShkZWNvZGVCdWZmZXIpLCBuZXcgSnNvbk1hcCgpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgIGxldCBzdHJidWYgPSAnXFwwJztcbiAgICAgIHN0cmJ1ZiA9ICdKc29uIHBhcnNlIGVycm9yIDogQGxpbmUgJyArICh0aGlzLl9saW5lQ291bnQgKyAxKSArICdcXG4nO1xuICAgICAgdGhpcy5fcm9vdCA9IG5ldyBKc29uU3RyaW5nKHN0cmJ1Zik7XG5cbiAgICAgIEN1YmlzbUxvZ0luZm8oJ3swfScsIHRoaXMuX3Jvb3QuZ2V0UmF3U3RyaW5nKCkpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fcm9vdCA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9yb290ID0gbmV3IEpzb25FcnJvcihuZXcgY3NtU3RyaW5nKHRoaXMuX2Vycm9yKSwgZmFsc2UpOyAvLyByb29044Gv6Kej5pS+44GV44KM44KL44Gu44Gn44Ko44Op44O844Kq44OW44K444Kn44Kv44OI44KS5Yil6YCU5L2c5oiQ44GZ44KLXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueaZguOBruOCqOODqeODvOWApOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldFBhcnNlRXJyb3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZXJyb3I7XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OI6KaB57Sg44Gu5qyh44Gu6KaB57Sg44GM44OV44Kh44Kk44Or44Gu57WC56uv44Gg44Gj44Gf44KJdHJ1ZeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGNoZWNrRW5kT2ZGaWxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9yb290LmdldEFycmF5KClbMV0uZXF1YWxzKCdFT0YnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBKU09O44Ko44Os44Oh44Oz44OI44GL44KJVmFsdWUoZmxvYXQsU3RyaW5nLFZhbHVlKixBcnJheSxudWxsLHRydWUsZmFsc2Up44KS44OR44O844K544GZ44KLXG4gICAqIOOCqOODrOODoeODs+ODiOOBruabuOW8j+OBq+W/nOOBmOOBpuWGhemDqOOBp1BhcnNlU3RyaW5nKCksIFBhcnNlT2JqZWN0KCksIFBhcnNlQXJyYXkoKeOCkuWRvOOBtlxuICAgKlxuICAgKiBAcGFyYW0gICBidWZmZXIgICAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSAgIGxlbmd0aCAgICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgKiBAcGFyYW0gICBiZWdpbiAgICAgICDjg5Hjg7zjgrnjgpLplovlp4vjgZnjgovkvY3nva5cbiAgICogQHBhcmFtICAgb3V0RW5kUG9zICAg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAqIEByZXR1cm4gICAgICDjg5Hjg7zjgrnjgYvjgonlj5blvpfjgZfjgZ9WYWx1ZeOCquODluOCuOOCp+OCr+ODiFxuICAgKi9cbiAgcHJvdGVjdGVkIHBhcnNlVmFsdWUoXG4gICAgYnVmZmVyOiBzdHJpbmcsXG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgYmVnaW46IG51bWJlcixcbiAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICkge1xuICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgbzogVmFsdWUgPSBudWxsO1xuICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcbiAgICBsZXQgZjogbnVtYmVyO1xuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYzogc3RyaW5nID0gYnVmZmVyW2ldO1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICBjYXNlICcuJzpcbiAgICAgICAgY2FzZSAnMCc6XG4gICAgICAgIGNhc2UgJzEnOlxuICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgIGNhc2UgJzQnOlxuICAgICAgICBjYXNlICc1JzpcbiAgICAgICAgY2FzZSAnNic6XG4gICAgICAgIGNhc2UgJzcnOlxuICAgICAgICBjYXNlICc4JzpcbiAgICAgICAgY2FzZSAnOSc6IHtcbiAgICAgICAgICBjb25zdCBhZnRlclN0cmluZzogc3RyaW5nW10gPSBuZXcgQXJyYXkoMSk7IC8vIOWPgueFp+a4oeOBl+OBq+OBmeOCi+OBn+OCgVxuICAgICAgICAgIGYgPSBzdHJ0b2QoYnVmZmVyLnNsaWNlKGkpLCBhZnRlclN0cmluZyk7XG4gICAgICAgICAgb3V0RW5kUG9zWzBdID0gYnVmZmVyLmluZGV4T2YoYWZ0ZXJTdHJpbmdbMF0pO1xuICAgICAgICAgIHJldHVybiBuZXcgSnNvbkZsb2F0KGYpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICByZXR1cm4gbmV3IEpzb25TdHJpbmcoXG4gICAgICAgICAgICB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKVxuICAgICAgICAgICk7IC8vIFxcXCLjga7mrKHjga7mloflrZfjgYvjgolcbiAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgbyA9IHRoaXMucGFyc2VBcnJheShidWZmZXIsIGxlbmd0aCwgaSArIDEsIG91dEVuZFBvcyk7XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgIG8gPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKTtcbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAnbic6IC8vIG51bGzku6XlpJbjgavjgarjgYRcbiAgICAgICAgICBpZiAoaSArIDMgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG8gPSBuZXcgSnNvbk51bGx2YWx1ZSgpOyAvLyDop6PmlL7jgafjgY3jgovjgojjgYbjgavjgZnjgotcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9ICdwYXJzZSBudWxsJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIGNhc2UgJ3QnOiAvLyB0cnVl5Lul5aSW44Gr44Gq44GEXG4gICAgICAgICAgaWYgKGkgKyAzIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBvID0gSnNvbkJvb2xlYW4udHJ1ZVZhbHVlO1xuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHRydWUnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAnZic6IC8vIGZhbHNl5Lul5aSW44Gr44Gq44GEXG4gICAgICAgICAgaWYgKGkgKyA0IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBvID0gSnNvbkJvb2xlYW4uZmFsc2VWYWx1ZTtcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA1O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnLCcgcG9zaXRpb25cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIGNhc2UgJywnOiAvLyBBcnJheSBzZXBhcmF0b3JcbiAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnLCcgcG9zaXRpb25cIjtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY2FzZSAnXSc6IC8vIOS4jeato+OBqu+9neOBoOOBjOOCueOCreODg+ODl+OBmeOCi+OAgumFjeWIl+OBruacgOW+jOOBq+S4jeimgeOBqiAsIOOBjOOBguOCi+OBqOaAneOCj+OCjOOCi1xuICAgICAgICAgIG91dEVuZFBvc1swXSA9IGk7IC8vIOWQjOOBmOaWh+Wtl+OCkuWGjeWHpueQhlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgY2FzZSAnXFxyJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyDjgrnjgq3jg4Pjg5dcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9lcnJvciA9ICdpbGxlZ2FsIGVuZCBvZiB2YWx1ZSc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5qyh44Gu44CMXCLjgI3jgb7jgafjga7mloflrZfliJfjgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgc3RyaW5nICAtPiAg44OR44O844K55a++6LGh44Gu5paH5a2X5YiXXG4gICAqIEBwYXJhbSAgIGxlbmd0aCAgLT4gIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgKiBAcGFyYW0gICBiZWdpbiAgIC0+ICDjg5Hjg7zjgrnjgpLplovlp4vjgZnjgovkvY3nva5cbiAgICogQHBhcmFtICBvdXRFbmRQb3MgICAtPiAg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAqIEByZXR1cm4gICAgICDjg5Hjg7zjgrnjgZfjgZ/mlodG5a2X5YiX6KaB57SgXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VTdHJpbmcoXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgYmVnaW46IG51bWJlcixcbiAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuX2Vycm9yKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBpID0gYmVnaW47XG4gICAgbGV0IGM6IHN0cmluZywgYzI6IHN0cmluZztcbiAgICBjb25zdCByZXQ6IGNzbVN0cmluZyA9IG5ldyBjc21TdHJpbmcoJycpO1xuICAgIGxldCBidWZTdGFydDogbnVtYmVyID0gYmVnaW47IC8vIHNidWbjgavnmbvpjLLjgZXjgozjgabjgYTjgarjgYTmloflrZfjga7plovlp4vkvY3nva5cblxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGMgPSBzdHJpbmdbaV07XG5cbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlICdcIic6IHtcbiAgICAgICAgICAvLyDntYLnq6/jga7igJ3jgIHjgqjjgrnjgrHjg7zjg5fmloflrZfjga/liKXjgavlh6bnkIbjgZXjgozjgovjga7jgafjgZPjgZPjgavmnaXjgarjgYRcbiAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTsgLy8g4oCd44Gu5qyh44Gu5paH5a2XXG4gICAgICAgICAgcmV0LmFwcGVuZChzdHJpbmcuc2xpY2UoYnVmU3RhcnQpLCBpIC0gYnVmU3RhcnQpOyAvLyDliY3jga7mloflrZfjgb7jgafjgpLnmbvpjLLjgZnjgotcbiAgICAgICAgICByZXR1cm4gcmV0LnM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnLy8nOiB7XG4gICAgICAgICAgLy8g44Ko44K544Kx44O844OX44Gu5aC05ZCIXG4gICAgICAgICAgaSsrOyAvLyDvvJLmloflrZfjgpLjgrvjg4Pjg4jjgafmibHjgYZcblxuICAgICAgICAgIGlmIChpIC0gMSA+IGJ1ZlN0YXJ0KSB7XG4gICAgICAgICAgICByZXQuYXBwZW5kKHN0cmluZy5zbGljZShidWZTdGFydCksIGkgLSBidWZTdGFydCk7IC8vIOWJjeOBruaWh+Wtl+OBvuOBp+OCkueZu+mMsuOBmeOCi1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZTdGFydCA9IGkgKyAxOyAvLyDjgqjjgrnjgrHjg7zjg5fvvIjvvJLmloflrZcp44Gu5qyh44Gu5paH5a2X44GL44KJXG5cbiAgICAgICAgICBpZiAoaSA8IGxlbmd0aCkge1xuICAgICAgICAgICAgYzIgPSBzdHJpbmdbaV07XG5cbiAgICAgICAgICAgIHN3aXRjaCAoYzIpIHtcbiAgICAgICAgICAgICAgY2FzZSAnXFxcXCc6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxcXCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXCInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnLyc6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnLycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXGInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxmJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ24nOlxuICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcbicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdyJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXHInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFx0Jyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHN0cmluZy91bmljb3JkIGVzY2FwZSBub3Qgc3VwcG9ydGVkJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL2VzY2FwZSBlcnJvcic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHN0cmluZy9pbGxlZ2FsIGVuZCc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogSlNPTuOBruOCquODluOCuOOCp+OCr+ODiOOCqOODrOODoeODs+ODiOOCkuODkeODvOOCueOBl+OBplZhbHVl44Kq44OW44K444Kn44Kv44OI44KS6L+U44GZXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgICAgSlNPTuOCqOODrOODoeODs+ODiOOBruODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gbGVuZ3RoICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgKiBAcGFyYW0gYmVnaW4gICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gb3V0RW5kUG9zIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxuICAgKiBAcmV0dXJuIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VPYmplY3QoXG4gICAgYnVmZmVyOiBzdHJpbmcsXG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgYmVnaW46IG51bWJlcixcbiAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICk6IFZhbHVlIHtcbiAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHJldDogSnNvbk1hcCA9IG5ldyBKc29uTWFwKCk7XG5cbiAgICAvLyBLZXk6IFZhbHVlXG4gICAgbGV0IGtleSA9ICcnO1xuICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcbiAgICBsZXQgYyA9ICcnO1xuICAgIGNvbnN0IGxvY2FsUmV0RW5kUG9zMjogbnVtYmVyW10gPSBBcnJheSgxKTtcbiAgICBsZXQgb2sgPSBmYWxzZTtcblxuICAgIC8vICwg44GM57aa44GP6ZmQ44KK44Or44O844OXXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRk9SX0xPT1A6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgbG9jYWxSZXRFbmRQb3MyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSA9IGxvY2FsUmV0RW5kUG9zMlswXTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QOyAvLy0tIGxvb3DjgYvjgonlh7rjgotcbiAgICAgICAgICBjYXNlICd9JzogLy8g6ZaJ44GY44Kr44OD44KzXG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOepulxuICAgICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJzonIHBvc2l0aW9uXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrOyAvLyDjgrnjgq3jg4Pjg5fjgZnjgovmloflrZdcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFvaykge1xuICAgICAgICB0aGlzLl9lcnJvciA9ICdrZXkgbm90IGZvdW5kJztcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIG9rID0gZmFsc2U7XG5cbiAgICAgIC8vIDog44KS44OB44Kn44OD44KvXG4gICAgICBGT1JfTE9PUDI6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlICc6JzpcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QMjtcbiAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICd9JyBwb3NpdGlvblwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xuICAgICAgICAgIC8vIGNhc2UgJyAnOiBjYXNlICdcXHQnIDogY2FzZSAnXFxyJzpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl+OBmeOCi+aWh+Wtl1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghb2spIHtcbiAgICAgICAgdGhpcy5fZXJyb3IgPSBcIic6JyBub3QgZm91bmRcIjtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIOWApOOCkuODgeOCp+ODg+OCr1xuICAgICAgY29uc3QgdmFsdWU6IFZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgbGVuZ3RoLCBpLCBsb2NhbFJldEVuZFBvczIpO1xuICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpID0gbG9jYWxSZXRFbmRQb3MyWzBdO1xuXG4gICAgICAvLyByZXQucHV0KGtleSwgdmFsdWUpO1xuICAgICAgcmV0LnB1dChrZXksIHZhbHVlKTtcblxuICAgICAgRk9SX0xPT1AzOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGMgPSBidWZmZXJbaV07XG5cbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICBicmVhayBGT1JfTE9PUDM7XG4gICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgMTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOato+W4uOe1guS6hlxuICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICB0aGlzLl9saW5lQ291bnQrKztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZXJyb3IgPSAnaWxsZWdhbCBlbmQgb2YgcGVyc2VPYmplY3QnO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOasoeOBruOAjFwi44CN44G+44Gn44Gu5paH5a2X5YiX44KS44OR44O844K544GZ44KL44CCXG4gICAqIEBwYXJhbSBidWZmZXIgICAgSlNPTuOCqOODrOODoeODs+ODiOOBruODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gbGVuZ3RoICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgKiBAcGFyYW0gYmVnaW4gICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gb3V0RW5kUG9zIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxuICAgKiBAcmV0dXJuIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VBcnJheShcbiAgICBidWZmZXI6IHN0cmluZyxcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgKTogVmFsdWUge1xuICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG4gICAgbGV0IHJldDogSnNvbkFycmF5ID0gbmV3IEpzb25BcnJheSgpO1xuXG4gICAgLy8ga2V5IDogdmFsdWVcbiAgICBsZXQgaTogbnVtYmVyID0gYmVnaW47XG4gICAgbGV0IGM6IHN0cmluZztcbiAgICBjb25zdCBsb2NhbFJldEVuZHBvczI6IG51bWJlcltdID0gbmV3IEFycmF5KDEpO1xuXG4gICAgLy8gLCDjgYzntprjgY/pmZDjgorjg6vjg7zjg5dcbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyA6IOOCkuODgeOCp+ODg+OCr1xuICAgICAgY29uc3QgdmFsdWU6IFZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgbGVuZ3RoLCBpLCBsb2NhbFJldEVuZHBvczIpO1xuXG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpID0gbG9jYWxSZXRFbmRwb3MyWzBdO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcmV0LmFkZCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZPUl9MT09QMzpcbiAgICAgIC8vIGJvb2xlYW4gYnJlYWtmbGFnID0gZmFsc2U7XG4gICAgICBGT1JfTE9PUDogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjID0gYnVmZmVyW2ldO1xuXG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgJywnOlxuICAgICAgICAgICAgLy8gYnJlYWtmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGJyZWFrOyAvLyDmrKHjga5LRVksIFZBbFVF44G4XG4gICAgICAgICAgICBicmVhayBGT1JfTE9PUDtcbiAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxO1xuICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g57WC5LqGXG4gICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICsrdGhpcy5fbGluZUNvdW50O1xuICAgICAgICAgIC8vY2FzZSAnICc6IGNhc2UgJ1xcdCc6IGNhc2UgJ1xccic6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrOyAvLyDjgrnjgq3jg4Pjg5dcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldCA9IHZvaWQgMDtcbiAgICB0aGlzLl9lcnJvciA9ICdpbGxlZ2FsIGVuZCBvZiBwYXJzZU9iamVjdCc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBfcGFyc2VDYWxsYmFjazogcGFyc2VKc29uT2JqZWN0ID0gQ3ViaXNtSnNvbkV4dGVuc2lvbi5wYXJzZUpzb25PYmplY3Q7IC8vIOODkeODvOOCueaZguOBq+S9v+OBhuWHpueQhuOBruOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuXG4gIF9lcnJvcjogc3RyaW5nOyAvLyDjg5Hjg7zjgrnmmYLjga7jgqjjg6njg7xcbiAgX2xpbmVDb3VudDogbnVtYmVyOyAvLyDjgqjjg6njg7zloLHlkYrjgavnlKjjgYTjgovooYzmlbDjgqvjgqbjg7Pjg4hcbiAgX3Jvb3Q6IFZhbHVlOyAvLyDjg5Hjg7zjgrnjgZXjgozjgZ/jg6vjg7zjg4jopoHntKBcbn1cblxuaW50ZXJmYWNlIHBhcnNlSnNvbk9iamVjdCB7XG4gIChvYmo6IFZhbHVlLCBtYXA6IEpzb25NYXApOiBKc29uTWFwO1xufVxuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpJmbG9hdOWApOOBqOOBl+OBpuaJseOBhlxuICovXG5leHBvcnQgY2xhc3MgSnNvbkZsb2F0IGV4dGVuZHMgVmFsdWUge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fdmFsdWUgPSB2O1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM5pWw5YCk5Z6L44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzRmxvYXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcbiAgICovXG4gIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBzdHJidWYgPSAnXFwwJztcbiAgICB0aGlzLl92YWx1ZSA9IHBhcnNlRmxvYXQoc3RyYnVmKTtcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzdHJidWY7XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXG4gICAqL1xuICBwdWJsaWMgdG9JbnQoZGVmYXVsdFZhbHVlID0gMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuX3ZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXG4gICAqL1xuICBwdWJsaWMgdG9GbG9hdChkZWZhdWx0VmFsdWUgPSAwLjApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKCdudW1iZXInID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgIC8vIGludFxuICAgICAgaWYgKE1hdGgucm91bmQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGZsb2F0XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09IHRoaXMuX3ZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyOyAvLyBKU09O6KaB57Sg44Gu5YCkXG59XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkuecn+WBveWApOOBqOOBl+OBpuaJseOBhlxuICovXG5leHBvcnQgY2xhc3MgSnNvbkJvb2xlYW4gZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOecn+WBveWApOOBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc0Jvb2woKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS55yf5YG95YCk44Gn6L+U44GZKGJvb2xlYW4pXG4gICAqL1xuICBwdWJsaWMgdG9Cb29sZWFuKGRlZmF1bHRWYWx1ZSA9IGZhbHNlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Jvb2xWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHRoaXMuX2Jvb2xWYWx1ZSA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcbiAgICovXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoJ2Jvb2xlYW4nID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSB0aGlzLl9ib29sVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWUsIOmdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHY6IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fYm9vbFZhbHVlID0gdjtcbiAgfVxuXG4gIHN0YXRpYyB0cnVlVmFsdWU6IEpzb25Cb29sZWFuOyAvLyB0cnVlXG4gIHN0YXRpYyBmYWxzZVZhbHVlOiBKc29uQm9vbGVhbjsgLy8gZmFsc2VcblxuICBwcml2YXRlIF9ib29sVmFsdWU6IGJvb2xlYW47IC8vIEpTT07opoHntKDjga7lgKRcbn1cblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS5paH5a2X5YiX44Go44GX44Gm5omx44GGXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uU3RyaW5nIGV4dGVuZHMgVmFsdWUge1xuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioczogc3RyaW5nKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGNzbVN0cmluZyk7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBhbnkpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygcykge1xuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gcztcbiAgICB9XG5cbiAgICBpZiAocyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gcy5zO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOaWh+Wtl+WIl+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc1N0cmluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxuICAgKi9cbiAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyID09IHZhbHVlO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlciA9PSB2YWx1ZS5zO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEpTT07jg5Hjg7zjgrnmmYLjga7jgqjjg6njg7zntZDmnpzjgILmloflrZfliJflnovjga7jgojjgYbjgavjgbXjgovjgb7jgYZcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25FcnJvciBleHRlbmRzIEpzb25TdHJpbmcge1xuICAvKipcbiAgICogVmFsdWXjga7lgKTjgYzpnZnnmoTjgarjgol0cnVl44CB6Z2Z55qE44Gq44KJ6Kej5pS+44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU3RhdGljO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCqOODqeODvOaDheWgseOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChzOiBzdHJpbmcpOiBWYWx1ZSB7XG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBjc21TdHJpbmcgfCBzdHJpbmcsIGlzU3RhdGljOiBib29sZWFuKSB7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygcykge1xuICAgICAgc3VwZXIocyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyKHMpO1xuICAgIH1cbiAgICB0aGlzLl9pc1N0YXRpYyA9IGlzU3RhdGljO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM44Ko44Op44O85YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2lzU3RhdGljOiBib29sZWFuOyAvLyDpnZnnmoTjgapWYWx1ZeOBi+OBqeOBhuOBi1xufVxuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpJOVUxM5YCk44Go44GX44Gm5oyB44GkXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uTnVsbHZhbHVlIGV4dGVuZHMgVmFsdWUge1xuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYxOVUxM5YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzTnVsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7lgKTjgYzpnZnnmoTjgarjgol0cnVlLCDpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBq+OCqOODqeODvOWApOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChzOiBzdHJpbmcpOiBWYWx1ZSB7XG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gcztcbiAgICByZXR1cm4gSnNvbkVycm9yLm51bGxWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gJ051bGxWYWx1ZSc7XG4gIH1cbn1cblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS6YWN5YiX44Go44GX44Gm5oyB44GkXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uQXJyYXkgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2FycmF5ID0gbmV3IGNzbVZlY3RvcjxWYWx1ZT4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9hcnJheS5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGxldCB2OiBWYWx1ZSA9IGl0ZS5wdHIoKTtcblxuICAgICAgaWYgKHYgJiYgIXYuaXNTdGF0aWMoKSkge1xuICAgICAgICB2ID0gdm9pZCAwO1xuICAgICAgICB2ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzphY3liJfjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNBcnJheSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBbaW5kZXhdXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeUluZGV4KGluZGV4OiBudW1iZXIpOiBWYWx1ZSB7XG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9hcnJheS5nZXRTaXplKCkgPD0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBWYWx1ZS5lcnJvclZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgICAgQ1NNX0pTT05fRVJST1JfSU5ERVhfT0ZfQk9VTkRTXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHY6IFZhbHVlID0gdGhpcy5fYXJyYXkuYXQoaW5kZXgpO1xuXG4gICAgaWYgKHYgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFZhbHVlLm51bGxWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBbc3RyaW5nIHwgY3NtU3RyaW5nXVxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlQnlTdHJpbmcoczogc3RyaW5nIHwgY3NtU3RyaW5nKTogVmFsdWUge1xuICAgIHJldHVybiBWYWx1ZS5lcnJvclZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgc3RyaW5nQnVmZmVyOiBzdHJpbmcgPSBpbmRlbnQgKyAnW1xcbic7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogY3NtVmVjdG9yX2l0ZXJhdG9yPFZhbHVlPiA9IHRoaXMuX2FycmF5LmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fYXJyYXkuZW5kKCkpO1xuICAgICAgaXRlLmluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBjb25zdCB2OiBWYWx1ZSA9IGl0ZS5wdHIoKTtcbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPSBpbmRlbnQgKyAnJyArIHYuZ2V0U3RyaW5nKGluZGVudCArICcgJykgKyAnXFxuJztcbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzdHJpbmdCdWZmZXIgKyBpbmRlbnQgKyAnXVxcbic7XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOmFjeWIl+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgKiBAcGFyYW0gdiDov73liqDjgZnjgovopoHntKBcbiAgICovXG4gIHB1YmxpYyBhZGQodjogVmFsdWUpOiB2b2lkIHtcbiAgICB0aGlzLl9hcnJheS5wdXNoQmFjayh2KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLjgrPjg7Pjg4bjg4rjgafov5TjgZkoY3NtVmVjdG9yPFZhbHVlPilcbiAgICovXG4gIHB1YmxpYyBnZXRWZWN0b3IoZGVmYXVsdFZhbHVlOiBjc21WZWN0b3I8VmFsdWU+ID0gbnVsbCk6IGNzbVZlY3RvcjxWYWx1ZT4ge1xuICAgIHJldHVybiB0aGlzLl9hcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjga7mlbDjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5LmdldFNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FycmF5OiBjc21WZWN0b3I8VmFsdWU+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG59XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkuODnuODg+ODl+OBqOOBl+OBpuaMgeOBpFxuICovXG5leHBvcnQgY2xhc3MgSnNvbk1hcCBleHRlbmRzIFZhbHVlIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fbWFwID0gbmV3IGNzbU1hcDxzdHJpbmcsIFZhbHVlPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcblxuICAgIHdoaWxlIChpdGUubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKSkge1xuICAgICAgbGV0IHY6IFZhbHVlID0gaXRlLnB0cigpLnNlY29uZDtcblxuICAgICAgaWYgKHYgJiYgIXYuaXNTdGF0aWMoKSkge1xuICAgICAgICB2ID0gdm9pZCAwO1xuICAgICAgICB2ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjE1hcOWei+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc01hcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBbc3RyaW5nIHwgY3NtU3RyaW5nXVxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlQnlTdHJpbmcoczogc3RyaW5nIHwgY3NtU3RyaW5nKTogVmFsdWUge1xuICAgIGlmIChzIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICBjb25zdCByZXQ6IFZhbHVlID0gdGhpcy5fbWFwLmdldFZhbHVlKHMucyk7XG4gICAgICBpZiAocmV0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFZhbHVlLm51bGxWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgIGxldCBpdGVyOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcbiAgICAgIGl0ZXIubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKTtcbiAgICAgIGl0ZXIucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGlmIChpdGVyLnB0cigpLmZpcnN0ID09IHMpIHtcbiAgICAgICAgaWYgKGl0ZXIucHRyKCkuc2Vjb25kID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyLnB0cigpLnNlY29uZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IFZhbHVlIHtcbiAgICByZXR1cm4gVmFsdWUuZXJyb3JWYWx1ZS5zZXRFcnJvck5vdEZvckNsaWVudENhbGwoXG4gICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBpbmRlbnQgKyAne1xcbic7XG5cbiAgICBjb25zdCBpdGU6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuICAgIHdoaWxlIChpdGUubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKSkge1xuICAgICAgY29uc3Qga2V5ID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgY29uc3QgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgKz1cbiAgICAgICAgaW5kZW50ICsgJyAnICsga2V5ICsgJyA6ICcgKyB2LmdldFN0cmluZyhpbmRlbnQgKyAnICAgJykgKyAnIFxcbic7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyICs9IGluZGVudCArICd9XFxuJztcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KSTWFw5Z6L44Gn6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0TWFwKGRlZmF1bHRWYWx1ZT86IGNzbU1hcDxzdHJpbmcsIFZhbHVlPik6IGNzbU1hcDxzdHJpbmcsIFZhbHVlPiB7XG4gICAgcmV0dXJuIHRoaXMuX21hcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXDjgavopoHntKDjgpLov73liqDjgZnjgotcbiAgICovXG4gIHB1YmxpYyBwdXQoa2V5OiBzdHJpbmcsIHY6IFZhbHVlKTogdm9pZCB7XG4gICAgdGhpcy5fbWFwLnNldFZhbHVlKGtleSwgdik7XG4gIH1cblxuICAvKipcbiAgICogTWFw44GL44KJ44Kt44O844Gu44Oq44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0S2V5cygpOiBjc21WZWN0b3I8c3RyaW5nPiB7XG4gICAgaWYgKCF0aGlzLl9rZXlzKSB7XG4gICAgICB0aGlzLl9rZXlzID0gbmV3IGNzbVZlY3RvcjxzdHJpbmc+KCk7XG5cbiAgICAgIGNvbnN0IGl0ZTogY3NtTWFwX2l0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fbWFwLmJlZ2luKCk7XG5cbiAgICAgIHdoaWxlIChpdGUubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKSkge1xuICAgICAgICBjb25zdCBrZXk6IHN0cmluZyA9IGl0ZS5wdHIoKS5maXJzdDtcbiAgICAgICAgdGhpcy5fa2V5cy5wdXNoQmFjayhrZXkpO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9rZXlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcOOBruimgee0oOaVsOOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fa2V5cy5nZXRTaXplKCk7XG4gIH1cblxuICBwcml2YXRlIF9tYXA6IGNzbU1hcDxzdHJpbmcsIFZhbHVlPjsgLy8gSlNPTuimgee0oOOBruWApFxuICBwcml2YXRlIF9rZXlzOiBjc21WZWN0b3I8c3RyaW5nPjsgLy8gSlNPTuimgee0oOOBruWApFxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21qc29uJztcbmltcG9ydCB7IEN1YmlzbUpzb25FeHRlbnNpb24gfSBmcm9tICcuL2N1YmlzbWpzb25leHRlbnNpb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUpzb24gPSAkLkN1YmlzbUpzb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUpzb24gPSAkLkN1YmlzbUpzb247XG4gIGV4cG9ydCBjb25zdCBKc29uQXJyYXkgPSAkLkpzb25BcnJheTtcbiAgZXhwb3J0IHR5cGUgSnNvbkFycmF5ID0gJC5Kc29uQXJyYXk7XG4gIGV4cG9ydCBjb25zdCBKc29uQm9vbGVhbiA9ICQuSnNvbkJvb2xlYW47XG4gIGV4cG9ydCB0eXBlIEpzb25Cb29sZWFuID0gJC5Kc29uQm9vbGVhbjtcbiAgZXhwb3J0IGNvbnN0IEpzb25FcnJvciA9ICQuSnNvbkVycm9yO1xuICBleHBvcnQgdHlwZSBKc29uRXJyb3IgPSAkLkpzb25FcnJvcjtcbiAgZXhwb3J0IGNvbnN0IEpzb25GbG9hdCA9ICQuSnNvbkZsb2F0O1xuICBleHBvcnQgdHlwZSBKc29uRmxvYXQgPSAkLkpzb25GbG9hdDtcbiAgZXhwb3J0IGNvbnN0IEpzb25NYXAgPSAkLkpzb25NYXA7XG4gIGV4cG9ydCB0eXBlIEpzb25NYXAgPSAkLkpzb25NYXA7XG4gIGV4cG9ydCBjb25zdCBKc29uTnVsbHZhbHVlID0gJC5Kc29uTnVsbHZhbHVlO1xuICBleHBvcnQgdHlwZSBKc29uTnVsbHZhbHVlID0gJC5Kc29uTnVsbHZhbHVlO1xuICBleHBvcnQgY29uc3QgSnNvblN0cmluZyA9ICQuSnNvblN0cmluZztcbiAgZXhwb3J0IHR5cGUgSnNvblN0cmluZyA9ICQuSnNvblN0cmluZztcbiAgZXhwb3J0IGNvbnN0IFZhbHVlID0gJC5WYWx1ZTtcbiAgZXhwb3J0IHR5cGUgVmFsdWUgPSAkLlZhbHVlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHtcbiAgSnNvbkFycmF5LFxuICBKc29uQm9vbGVhbixcbiAgSnNvbkZsb2F0LFxuICBKc29uTWFwLFxuICBKc29uTnVsbHZhbHVlLFxuICBKc29uU3RyaW5nLFxuICBWYWx1ZSxcbn0gZnJvbSAnLi9jdWJpc21qc29uJztcblxuLyoqXG4gKiBDdWJpc21Kc29u44Gn5a6f6KOF44GV44KM44Gm44GE44KLSnNvbuODkeODvOOCteOCkuS9v+eUqOOBm+OBmuOAgVxuICogVHlwZVNjcmlwdOaomea6luOBrkpzb27jg5Hjg7zjgrXjgarjganjgpLkvb/nlKjjgZflh7rlipvjgZXjgozjgZ/ntZDmnpzjgpJcbiAqIEN1YmlzbSBTREvjgaflrprnvqnjgZXjgozjgabjgYTjgotKU09O44Ko44Os44Oh44Oz44OI44Gu6KaB57Sg44GrXG4gKiDnva7jgY3mj5vjgYjjgovlh6bnkIbjgpLjgZnjgovjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUpzb25FeHRlbnNpb24ge1xuICBzdGF0aWMgcGFyc2VKc29uT2JqZWN0KG9iajogVmFsdWUsIG1hcDogSnNvbk1hcCkge1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9ialtrZXldID09ICdib29sZWFuJykge1xuICAgICAgICBtYXAucHV0KGtleSwgbmV3IEpzb25Cb29sZWFuKG9ialtrZXldKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmpba2V5XSA9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXAucHV0KGtleSwgbmV3IEpzb25TdHJpbmcob2JqW2tleV0pKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialtrZXldID09ICdudW1iZXInKSB7XG4gICAgICAgIG1hcC5wdXQoa2V5LCBuZXcgSnNvbkZsb2F0KG9ialtrZXldKSk7XG4gICAgICB9IGVsc2UgaWYgKG9ialtrZXldIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgbWFwLnB1dChrZXksIEN1YmlzbUpzb25FeHRlbnNpb24ucGFyc2VKc29uQXJyYXkob2JqW2tleV0pKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgbWFwLnB1dChcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgQ3ViaXNtSnNvbkV4dGVuc2lvbi5wYXJzZUpzb25PYmplY3Qob2JqW2tleV0sIG5ldyBKc29uTWFwKCkpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKG9ialtrZXldID09IG51bGwpIHtcbiAgICAgICAgbWFwLnB1dChrZXksIG5ldyBKc29uTnVsbHZhbHVlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g44Gp44KM44Gr44KC5b2T44Gm44Gv44G+44KJ44Gq44GE5aC05ZCI44Gn44KC5Yem55CG44GZ44KLXG4gICAgICAgIG1hcC5wdXQoa2V5LCBvYmpba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdGF0aWMgcGFyc2VKc29uQXJyYXkob2JqOiBWYWx1ZSkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBKc29uQXJyYXkoKTtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3QgY29udktleSA9IE51bWJlcihrZXkpO1xuICAgICAgaWYgKHR5cGVvZiBjb252S2V5ID09ICdudW1iZXInKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2NvbnZLZXldID09ICdib29sZWFuJykge1xuICAgICAgICAgIGFyci5hZGQobmV3IEpzb25Cb29sZWFuKG9ialtjb252S2V5XSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmpbY29udktleV0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBhcnIuYWRkKG5ldyBKc29uU3RyaW5nKG9ialtjb252S2V5XSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmpbY29udktleV0gPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBhcnIuYWRkKG5ldyBKc29uRmxvYXQob2JqW2NvbnZLZXldKSk7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIGFyci5hZGQodGhpcy5wYXJzZUpzb25BcnJheShvYmpba2V5XSkpO1xuICAgICAgICB9IGVsc2UgaWYgKG9ialtrZXldIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgYXJyLmFkZCh0aGlzLnBhcnNlSnNvbk9iamVjdChvYmpba2V5XSwgbmV3IEpzb25NYXAoKSkpO1xuICAgICAgICB9IGVsc2UgaWYgKG9ialtrZXldID09IG51bGwpIHtcbiAgICAgICAgICBhcnIuYWRkKG5ldyBKc29uTnVsbHZhbHVlKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIOOBqeOCjOOBq+OCguW9k+OBpuOBr+OBvuOCieOBquOBhOWgtOWQiOOBp+OCguWHpueQhuOBmeOCi1xuICAgICAgICAgIGFyci5hZGQob2JqW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9ialtrZXldIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgYXJyLmFkZCh0aGlzLnBhcnNlSnNvbkFycmF5KG9ialtrZXldKSk7XG4gICAgICB9IGVsc2UgaWYgKG9ialtrZXldIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIGFyci5hZGQodGhpcy5wYXJzZUpzb25PYmplY3Qob2JqW2tleV0sIG5ldyBKc29uTWFwKCkpKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBhcnIuYWRkKG5ldyBKc29uTnVsbHZhbHVlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g6YWN5YiX44Go44KCT2JqZWN044Go44KC5Yik5a6a44Gn44GN44Gq44GL44Gj44Gf5aC05ZCI44Gn44KC5Yem55CG44GZ44KLXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqW2tleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcnIuYWRkKG9ialtrZXldW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhcnI7XG4gIH1cbn1cbiIsImltcG9ydCB7IExBcHBQYWwgfSBmcm9tIFwiLi9sYXBwcGFsXCI7XG5pbXBvcnQgc3BlZWNoc2RrIGZyb20gJ21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrJztcbmltcG9ydCB7IGdldFdhdmVCbG9iIH0gZnJvbSBcIndlYm0tdG8td2F2LWNvbnZlcnRlclwiO1xuaW1wb3J0IHsgTEFOR1VBR0VfVE9fVk9JQ0VfTUFQUElOR19MSVNUIH0gZnJvbSBcIi4vbGFuZ3VhZ2V0b3ZvaWNlbWFwcGluZ1wiO1xuXG5cbmV4cG9ydCBjbGFzcyBBenVyZUFpIHtcbiAgcHJpdmF0ZSBfb3BlbmFpdXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgX29wZW5haXBpa2V5OiBzdHJpbmc7XG4gIHByaXZhdGUgX3R0c2FwaWtleTogc3RyaW5nO1xuICBwcml2YXRlIF90dHNyZWdpb246IHN0cmluZztcblxuICBwcml2YXRlIF9pblByb2dyZXNzOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX29wZW5haXVybCA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm9wZW5haXVybFwiKSBhcyBhbnkpLnZhbHVlO1xuICAgIHRoaXMuX29wZW5haXBpa2V5ID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3BlbmFpcGlrZXlcIikgYXMgYW55KS52YWx1ZTtcbiAgICB0aGlzLl90dHNyZWdpb24gPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0dHNyZWdpb25cIikgYXMgYW55KS52YWx1ZTtcbiAgICB0aGlzLl90dHNhcGlrZXkgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0dHNhcGlrZXlcIikgYXMgYW55KS52YWx1ZTtcblxuXG5cbiAgICB0aGlzLl9pblByb2dyZXNzID0gZmFsc2U7XG4gIH1cblxuICBhc3luYyBnZXRPcGVuQWlBbnN3ZXIocHJvbXB0OiBzdHJpbmcpIHtcblxuICAgIGlmICh0aGlzLl9pblByb2dyZXNzIHx8IHByb21wdCA9PT0gXCJcIikgcmV0dXJuIFwiXCI7XG5cbiAgICB0aGlzLl9pblByb2dyZXNzID0gdHJ1ZTtcblxuICAgIGNvbnN0IGNvbnZlcnNhdGlvbnMgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb252ZXJzYXRpb25zXCIpIGFzIGFueSkudmFsdWU7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UocHJvbXB0KTtcblxuICAgIGNvbnN0IGNvbnZlcnNhdGlvbiA9IGNvbnZlcnNhdGlvbnMgKyBcIlxcblxcbiMjIFwiICsgcHJvbXB0XG4gICAgY29uc3QgbSA9IHtcbiAgICAgIFwicHJvbXB0XCI6IGAjIyR7Y29udmVyc2F0aW9ufVxcblxcbmAsXG4gICAgICBcIm1heF90b2tlbnNcIjogMzAwLFxuICAgICAgXCJ0ZW1wZXJhdHVyZVwiOiAwLFxuICAgICAgXCJmcmVxdWVuY3lfcGVuYWx0eVwiOiAwLFxuICAgICAgXCJwcmVzZW5jZV9wZW5hbHR5XCI6IDAsXG4gICAgICBcInRvcF9wXCI6IDEsXG4gICAgICBcInN0b3BcIjogW1wiI1wiLCBcIjtcIl1cbiAgICB9XG5cbiAgICBjb25zdCByZXBzb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuX29wZW5haXVybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdhcGkta2V5JzogdGhpcy5fb3BlbmFpcGlrZXksXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobSlcbiAgICB9KTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVwc29uc2UuanNvbigpO1xuICAgIGNvbnN0IGFuc3dlcjogc3RyaW5nID0ganNvbi5jaG9pY2VzWzBdLnRleHRcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZShhbnN3ZXIpO1xuICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlcGx5XCIpIGFzIGFueSkudmFsdWUgPSBhbnN3ZXI7XG4gICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udmVyc2F0aW9uc1wiKSBhcyBhbnkpLnZhbHVlID0gY29udmVyc2F0aW9ucyArIFwiXFxuXFxuXCIgKyBhbnN3ZXI7XG5cbiAgICByZXR1cm4gYW5zd2VyO1xuICB9XG5cbiAgYXN5bmMgZ2V0U3BlZWNoVXJsKGxhbmd1YWdlOiBzdHJpbmcsIHRleHQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzOiBIZWFkZXJzSW5pdCA9IG5ldyBIZWFkZXJzKCk7XG4gICAgcmVxdWVzdEhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vc3NtbCt4bWwnKTtcbiAgICByZXF1ZXN0SGVhZGVycy5zZXQoJ1gtTWljcm9zb2Z0LU91dHB1dEZvcm1hdCcsICdyaWZmLThraHotMTZiaXQtbW9uby1wY20nKTtcbiAgICByZXF1ZXN0SGVhZGVycy5zZXQoJ09jcC1BcGltLVN1YnNjcmlwdGlvbi1LZXknLCB0aGlzLl90dHNhcGlrZXkpO1xuXG4gICAgY29uc3Qgdm9pY2UgPSBMQU5HVUFHRV9UT19WT0lDRV9NQVBQSU5HX0xJU1QuZmluZChjID0+IGMudm9pY2Uuc3RhcnRzV2l0aChsYW5ndWFnZSkgJiYgYy5Jc01hbGUgPT09IGZhbHNlKS52b2ljZTtcblxuICAgIGNvbnN0IHNzbWwgPSBgPHNwZWFrIHZlcnNpb249XFwnMS4wXFwnIHhtbDpsYW5nPVxcJyR7bGFuZ3VhZ2V9XFwnPlxuICAgICAgICAgICAgICA8dm9pY2UgeG1sOmxhbmc9XFwnJHtsYW5ndWFnZX1cXCcgeG1sOmdlbmRlcj1cXCdGZW1hbGVcXCcgbmFtZT1cXCcke3ZvaWNlfVxcJz5cbiAgICAgICAgICAgICAgICAgICR7dGV4dH1cbiAgICAgICAgICAgICAgPC92b2ljZT5cbiAgICAgICAgICAgIDwvc3BlYWs+YFxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly8ke3RoaXMuX3R0c3JlZ2lvbn0udHRzLnNwZWVjaC5taWNyb3NvZnQuY29tL2NvZ25pdGl2ZXNlcnZpY2VzL3YxYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgIGJvZHk6IHNzbWxcbiAgICB9KTtcblxuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG5cbiAgICB2YXIgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYilcbiAgICBjb25zdCBhdWRpbzogYW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZvaWNlJyk7XG4gICAgYXVkaW8uc3JjID0gdXJsO1xuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBMb2FkIFRleHQgdG8gU3BlZWNoIHVybGApO1xuICAgIHRoaXMuX2luUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgYXN5bmMgZ2V0VGV4dEZyb21TcGVlY2gobGFuZ3VhZ2U6IHN0cmluZywgZGF0YTogQmxvYikge1xuXG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UobGFuZ3VhZ2UpO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzOiBIZWFkZXJzSW5pdCA9IG5ldyBIZWFkZXJzKCk7XG4gICAgcmVxdWVzdEhlYWRlcnMuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbjt0ZXh0L3htbCcpO1xuICAgIHJlcXVlc3RIZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgJ2F1ZGlvL3dhdjsgY29kZWNzPWF1ZGlvL3BjbTsgc2FtcGxlcmF0ZT0xNjAwMCcpO1xuICAgIHJlcXVlc3RIZWFkZXJzLnNldCgnT2NwLUFwaW0tU3Vic2NyaXB0aW9uLUtleScsIHRoaXMuX3R0c2FwaWtleSk7XG5cbiAgICBjb25zdCB3YXYgPSBhd2FpdCBnZXRXYXZlQmxvYihkYXRhLCBmYWxzZSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovLyR7dGhpcy5fdHRzcmVnaW9ufS5zdHQuc3BlZWNoLm1pY3Jvc29mdC5jb20vc3BlZWNoL3JlY29nbml0aW9uL2NvbnZlcnNhdGlvbi9jb2duaXRpdmVzZXJ2aWNlcy92MT9sYW5ndWFnZT0ke2xhbmd1YWdlfWAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgICBib2R5OiB3YXZcbiAgICB9KTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiBqc29uLkRpc3BsYXlUZXh0O1xuICB9XG59XG4iLCIvL2h0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9jb2duaXRpdmUtc2VydmljZXMvc3BlZWNoLXNlcnZpY2UvbGFuZ3VhZ2Utc3VwcG9ydD90YWJzPXR0c1xuZXhwb3J0IGNvbnN0IExBTkdVQUdFX1RPX1ZPSUNFX01BUFBJTkdfTElTVCA9IFtcbiAgeyAndm9pY2UnOiAnYWYtWkEtQWRyaU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdhZi1aQS1XaWxsZW1OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdhbS1FVC1BbWVoYU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FtLUVULU1la2Rlc05ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdhci1BRS1GYXRpbWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnYXItQUUtSGFtZGFuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXItQkgtQWxpTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXItQkgtTGFpbGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnYXItRFotQW1pbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnYXItRFotSXNtYWVsTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXItRUctU2FsbWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnYXItRUctU2hha2lyTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXItSVEtQmFzc2VsTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXItSVEtUmFuYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdhci1KTy1TYW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLUpPLVRhaW1OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdhci1LVy1GYWhlZE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLUtXLU5vdXJhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLUxCLUxheWxhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLUxCLVJhbWlOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdhci1MWS1JbWFuTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLUxZLU9tYXJOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdhci1NQS1KYW1hbE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLU1BLU1vdW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLU9NLUFiZHVsbGFoTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXItT00tQXlzaGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnYXItUUEtQW1hbE5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdhci1RQS1Nb2F6TmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXItU0EtSGFtZWROZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdhci1TQS1aYXJpeWFoTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLVNZLUFtYW55TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLVNZLUxhaXRoTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXItVE4tSGVkaU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLVROLVJlZW1OZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnYXItWUUtTWFyeWFtTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2FyLVlFLVNhbGVoTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYXotQVotQmFiZWtOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdhei1BWi1CYW51TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2JnLUJHLUJvcmlzbGF2TmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYmctQkctS2FsaW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2JuLUJELU5hYmFuaXRhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2JuLUJELVByYWRlZXBOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdibi1JTi1CYXNoa2FyTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnYm4tSU4tVGFuaXNoYWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnYnMtQkEtR29yYW5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdicy1CQS1WZXNuYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdjYS1FUy1BbGJhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2NhLUVTLUVucmljTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnY2EtRVMtSm9hbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnY3MtQ1otQW50b25pbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2NzLUNaLVZsYXN0YU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdjeS1HQi1BbGVkTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnY3ktR0ItTmlhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RhLURLLUNocmlzdGVsTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RhLURLLUplcHBlTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZGUtQVQtSW5ncmlkTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLUFULUpvbmFzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZGUtQ0gtSmFuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZGUtQ0gtTGVuaU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdkZS1ERS1BbWFsYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdkZS1ERS1CZXJuZE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLURFLUNocmlzdG9waE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLURFLUNvbnJhZE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLURFLUVsa2VOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZGUtREUtR2lzZWxhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLURFLUthc3Blck5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLURFLUthdGphTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLURFLUtpbGxpYW5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdkZS1ERS1LbGFyaXNzYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdkZS1ERS1LbGF1c05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLURFLUxvdWlzYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdkZS1ERS1NYWphTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2RlLURFLVJhbGZOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdkZS1ERS1UYW5qYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbC1HUi1BdGhpbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZWwtR1ItTmVzdG9yYXNOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1BVS1Bbm5ldHRlTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUFVLUNhcmx5TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUFVLURhcnJlbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUFVLUR1bmNhbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUFVLUVsc2llTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUFVLUZyZXlhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUFVLUpvYW5uZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1BVS1LZW5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1BVS1LaW1OZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tQVUtTmF0YXNoYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1BVS1OZWlsTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tQVUtVGltTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tQVUtVGluYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1BVS1XaWxsaWFtTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tQ0EtQ2xhcmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tQ0EtTGlhbU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUdCLUFiYmlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tR0ItQWxmaWVOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1HQi1CZWxsYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1HQi1FbGxpb3ROZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1HQi1FdGhhbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUdCLUhvbGxpZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1HQi1MaWJieU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1HQi1NYWlzaWVOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tR0ItTm9haE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUdCLU9saXZlck5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUdCLU9saXZpYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1HQi1SeWFuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tR0ItU29uaWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tR0ItVGhvbWFzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tSEstU2FtTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tSEstWWFuTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUlFLUNvbm5vck5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUlFLUVtaWx5TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUlOLU5lZXJqYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1JTi1QcmFiaGF0TmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tS0UtQXNpbGlhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLUtFLUNoaWxlbWJhTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tTkctQWJlb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLU5HLUV6aW5uZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1OWi1NaXRjaGVsbE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLU5aLU1vbGx5TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLVBILUphbWVzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tUEgtUm9zYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1TRy1MdW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLVNHLVdheW5lTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tVFotRWxpbXVOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1UWi1JbWFuaU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1VUy1BbWJlck5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1VUy1BbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtQXJpYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1VUy1Bc2hsZXlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtQnJhbmRvbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLVVTLUNocmlzdG9waGVyTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtQ29yYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1VUy1EYXZpc05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLVVTLUVsaXphYmV0aE5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1VUy1FcmljTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtR3V5TmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtSmFjb2JOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1VUy1KYW5lTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLVVTLUphc29uTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtSmVubnlNdWx0aWxpbmd1YWxOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtSmVubnlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtTWljaGVsbGVOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtTW9uaWNhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLVVTLU5hbmN5TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLVVTLVJvZ2VyTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtU2FyYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlbi1VUy1TdGVmZmFuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZW4tVVMtVG9ueU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VuLVpBLUxlYWhOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZW4tWkEtTHVrZU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUFSLUVsZW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUFSLVRvbWFzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtQk8tTWFyY2Vsb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUJPLVNvZmlhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUNMLUNhdGFsaW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUNMLUxvcmVuem9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1DTy1Hb256YWxvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtQ08tU2Fsb21lTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUNSLUp1YW5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1DUi1NYXJpYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1DVS1CZWxreXNOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtQ1UtTWFudWVsTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtRE8tRW1pbGlvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtRE8tUmFtb25hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUVDLUFuZHJlYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1FQy1MdWlzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtRVMtQWJyaWxOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtRVMtQWx2YXJvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtRVMtQXJuYXVOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1FUy1EYXJpb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUVTLUVsaWFzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtRVMtRWx2aXJhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUVTLUVzdHJlbGxhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUVTLUlyZW5lTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUVTLUxhaWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtRVMtTGlhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUVTLU5pbE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLUVTLVNhdWxOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1FUy1UZW9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1FUy1UcmlhbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtRVMtVmVyYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1HUS1KYXZpZXJOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1HUS1UZXJlc2FOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtR1QtQW5kcmVzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtR1QtTWFydGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtSE4tQ2FybG9zTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtSE4tS2FybGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtTVgtQmVhdHJpek5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1NWC1DYW5kZWxhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLU1YLUNhcmxvdGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtTVgtQ2VjaWxpb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLU1YLURhbGlhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLU1YLUdlcmFyZG9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1NWC1Kb3JnZU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLU1YLUxhcmlzc2FOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtTVgtTGliZXJ0b05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLU1YLUx1Y2lhbm9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1NWC1NYXJpbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtTVgtTnVyaWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtTVgtUGVsYXlvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtTVgtUmVuYXRhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLU1YLVlhZ29OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1OSS1GZWRlcmljb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLU5JLVlvbGFuZGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZXMtUEEtTWFyZ2FyaXRhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLVBBLVJvYmVydG9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1QRS1BbGV4TmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtUEUtQ2FtaWxhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLVBSLUthcmluYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1QUi1WaWN0b3JOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1QWS1NYXJpb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLVBZLVRhbmlhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLVNWLUxvcmVuYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdlcy1TVi1Sb2RyaWdvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtVVMtQWxvbnNvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtVVMtUGFsb21hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLVVZLU1hdGVvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXMtVVktVmFsZW50aW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLVZFLVBhb2xhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2VzLVZFLVNlYmFzdGlhbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2V0LUVFLUFudU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdldC1FRS1LZXJ0TmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZXUtRVMtQWluaG9hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2V1LUVTLUFuZGVyTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZmEtSVItRGlsYXJhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZhLUlSLUZhcmlkTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZmktRkktSGFycmlOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdmaS1GSS1Ob29yYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdmaS1GSS1TZWxtYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdmaWwtUEgtQW5nZWxvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZmlsLVBILUJsZXNzaWNhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUJFLUNoYXJsaW5lTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUJFLUdlcmFyZE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUNBLUFudG9pbmVOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdmci1DQS1KZWFuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZnItQ0EtU3lsdmllTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUNILUFyaWFuZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdmci1DSC1GYWJyaWNlTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZnItRlItQWxhaW5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdmci1GUi1CcmlnaXR0ZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdmci1GUi1DZWxlc3RlTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUZSLUNsYXVkZU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUZSLUNvcmFsaWVOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZnItRlItRGVuaXNlTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUZSLUVsb2lzZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdmci1GUi1IZW5yaU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUZSLUphY3F1ZWxpbmVOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZnItRlItSmVyb21lTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZnItRlItSm9zZXBoaW5lTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2ZyLUZSLU1hdXJpY2VOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdmci1GUi1ZdmVzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnZnItRlItWXZldHRlTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2dhLUlFLUNvbG1OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdnYS1JRS1PcmxhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2dsLUVTLVJvaU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2dsLUVTLVNhYmVsYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdndS1JTi1EaHdhbmlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnZ3UtSU4tTmlyYW5qYW5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdoZS1JTC1BdnJpTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnaGUtSUwtSGlsYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdoaS1JTi1NYWRodXJOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdoaS1JTi1Td2FyYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdoci1IUi1HYWJyaWplbGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnaHItSFItU3JlY2tvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnaHUtSFUtTm9lbWlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnaHUtSFUtVGFtYXNOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdoeS1BTS1BbmFoaXROZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnaHktQU0tSGF5a05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2lkLUlELUFyZGlOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdpZC1JRC1HYWRpc05ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdpcy1JUy1HdWRydW5OZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnaXMtSVMtR3VubmFyTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnaXQtSVQtQmVuaWdub05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2l0LUlULUNhbGltZXJvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnaXQtSVQtQ2F0YWxkb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2l0LUlULURpZWdvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnaXQtSVQtRWxzYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdpdC1JVC1GYWJpb2xhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2l0LUlULUZpYW1tYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdpdC1JVC1HaWFubmlOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdpdC1JVC1JbWVsZGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnaXQtSVQtSXJtYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdpdC1JVC1Jc2FiZWxsYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdpdC1JVC1MaXNhbmRyb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2l0LUlULVBhbG1pcmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnaXQtSVQtUGllcmluYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdpdC1JVC1SaW5hbGRvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnamEtSlAtQW9pTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2phLUpQLURhaWNoaU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2phLUpQLUtlaXRhTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnamEtSlAtTWF5dU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdqYS1KUC1OYW5hbWlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnamEtSlAtTmFva2lOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdqYS1KUC1TaGlvcmlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnanYtSUQtRGltYXNOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdqdi1JRC1TaXRpTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2thLUdFLUVrYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdrYS1HRS1HaW9yZ2lOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdray1LWi1BaWd1bE5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdray1LWi1EYXVsZXROZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdrbS1LSC1QaXNldGhOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdrbS1LSC1TcmV5bW9tTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2tuLUlOLUdhZ2FuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAna24tSU4tU2FwbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAna28tS1ItQm9uZ0ppbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ2tvLUtSLUdvb2tNaW5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdrby1LUi1Jbkpvb25OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdrby1LUi1KaU1pbk5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdrby1LUi1TZW9IeWVvbk5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdrby1LUi1Tb29uQm9rTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2tvLUtSLVN1bkhpTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2tvLUtSLVl1SmluTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ2xvLUxBLUNoYW50aGF2b25nTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnbG8tTEEtS2VvbWFueU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdsdC1MVC1MZW9uYXNOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdsdC1MVC1PbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnbHYtTFYtRXZlcml0YU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdsdi1MVi1OaWxzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnbWstTUstQWxla3NhbmRhck5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ21rLU1LLU1hcmlqYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdtbC1JTi1NaWRodW5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdtbC1JTi1Tb2JoYW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ21uLU1OLUJhdGFhTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnbW4tTU4tWWVzdWlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnbXItSU4tQWFyb2hpTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ21yLUlOLU1hbm9oYXJOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdtcy1NWS1Pc21hbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ21zLU1ZLVlhc21pbk5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdtdC1NVC1HcmFjZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdtdC1NVC1Kb3NlcGhOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdteS1NTS1OaWxhck5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdteS1NTS1UaGloYU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ25iLU5PLUZpbm5OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICduYi1OTy1Jc2VsaW5OZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnbmItTk8tUGVybmlsbGVOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnbmUtTlAtSGVta2FsYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICduZS1OUC1TYWdhck5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ25sLUJFLUFybmF1ZE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ25sLUJFLURlbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnbmwtTkwtQ29sZXR0ZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdubC1OTC1GZW5uYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdubC1OTC1NYWFydGVuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAncGwtUEwtQWduaWVzemthTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3BsLVBMLU1hcmVrTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAncGwtUEwtWm9maWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAncHMtQUYtR3VsTmF3YXpOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdwcy1BRi1MYXRpZmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAncHQtQlItQW50b25pb05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LUJSLUJyZW5kYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdwdC1CUi1Eb25hdG9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdwdC1CUi1FbHphTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LUJSLUZhYmlvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAncHQtQlItRnJhbmNpc2NhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LUJSLUdpb3Zhbm5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LUJSLUh1bWJlcnRvTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAncHQtQlItSnVsaW9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdwdC1CUi1MZWlsYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdwdC1CUi1MZXRpY2lhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LUJSLU1hbnVlbGFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAncHQtQlItTmljb2xhdU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LUJSLVZhbGVyaW9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdwdC1CUi1ZYXJhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LVBULUR1YXJ0ZU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LVBULUZlcm5hbmRhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3B0LVBULVJhcXVlbE5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdyby1STy1BbGluYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdyby1STy1FbWlsTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAncnUtUlUtRGFyaXlhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3J1LVJVLURtaXRyeU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3J1LVJVLVN2ZXRsYW5hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3NpLUxLLVNhbWVlcmFOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdzaS1MSy1UaGlsaW5pTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3NrLVNLLUx1a2FzTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnc2stU0stVmlrdG9yaWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnc2wtU0ktUGV0cmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnc2wtU0ktUm9rTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnc28tU08tTXV1c2VOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdzby1TTy1VYmF4TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3NxLUFMLUFuaWxhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3NxLUFMLUlsaXJOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdzci1SUy1OaWNob2xhc05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3NyLVJTLVNvcGhpZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICdzdS1JRC1KYWphbmdOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdzdS1JRC1UdXRpTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3N2LVNFLUhpbGxldmlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnc3YtU0UtTWF0dGlhc05ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3N2LVNFLVNvZmllTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3N3LUtFLVJhZmlraU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3N3LUtFLVp1cmlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnc3ctVFotRGF1ZGlOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICdzdy1UWi1SZWhlbWFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAndGEtSU4tUGFsbGF2aU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd0YS1JTi1WYWxsdXZhck5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3RhLUxLLUt1bWFyTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAndGEtTEstU2FyYW55YU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd0YS1NWS1LYW5pTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3RhLU1ZLVN1cnlhTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAndGEtU0ctQW5idU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3RhLVNHLVZlbmJhTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3RlLUlOLU1vaGFuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAndGUtSU4tU2hydXRpTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3RoLVRILUFjaGFyYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd0aC1USC1OaXdhdE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3RoLVRILVByZW13YWRlZU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd0ci1UUi1BaG1ldE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3RyLVRSLUVtZWxOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAndWstVUEtT3N0YXBOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd1ay1VQS1Qb2xpbmFOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAndXItSU4tR3VsTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3VyLUlOLVNhbG1hbk5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3VyLVBLLUFzYWROZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd1ci1QSy1Vem1hTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3V6LVVaLU1hZGluYU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd1ei1VWi1TYXJkb3JOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd2aS1WTi1Ib2FpTXlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAndmktVk4tTmFtTWluaE5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3d1dS1DTi1YaWFvdG9uZ05ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd3dXUtQ04tWXVuemhlTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAneXVlLUNOLVhpYW9NaW5OZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAneXVlLUNOLVl1blNvbmdOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1YaWFvY2hlbk5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1YaWFvaGFuTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLVhpYW9tZW5nTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLVhpYW9tb05ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1YaWFvcWl1TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLVhpYW9ydWlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnemgtQ04tWGlhb3NodWFuZ05ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1YaWFveGlhb05ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1YaWFveHVhbk5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1YaWFveWFuTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLVhpYW95aU5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1YaWFveW91TmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLVhpYW96aGVuTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLVl1bmZlbmdOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1ZdW5oYW9OZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1ZdW5qaWFuTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnemgtQ04tWXVueGlhTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnemgtQ04tWXVueGlOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1ZdW55YW5nTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnemgtQ04tWXVueWVOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1ZdW56ZU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLWhlbmFuLVl1bmRlbmdOZXVyYWwnLCAnSXNNYWxlJzogdHJ1ZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1DTi1saWFvbmluZy1YaWFvYmVpTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLXNoYWFueGktWGlhb25pTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUNOLXNoYW5kb25nLVl1bnhpYW5nTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnemgtQ04tc2ljaHVhbi1ZdW54aU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLUhLLUhpdUdhYWlOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnemgtSEstSGl1TWFhbk5ldXJhbCcsICdJc01hbGUnOiBmYWxzZSB9LFxuICB7ICd2b2ljZSc6ICd6aC1ISy1XYW5MdW5nTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnemgtVFctSHNpYW9DaGVuTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3poLVRXLUhzaWFvWXVOZXVyYWwnLCAnSXNNYWxlJzogZmFsc2UgfSxcbiAgeyAndm9pY2UnOiAnemgtVFctWXVuSmhlTmV1cmFsJywgJ0lzTWFsZSc6IHRydWUgfSxcbiAgeyAndm9pY2UnOiAnenUtWkEtVGhhbmRvTmV1cmFsJywgJ0lzTWFsZSc6IGZhbHNlIH0sXG4gIHsgJ3ZvaWNlJzogJ3p1LVpBLVRoZW1iYU5ldXJhbCcsICdJc01hbGUnOiB0cnVlIH0sXG5cblxuXTtcbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSAnQGZyYW1ld29yay9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuXG4vKipcbiAqIFNhbXBsZSBBcHDjgafkvb/nlKjjgZnjgovlrprmlbBcbiAqL1xuXG4vLyBDYW52YXMgd2lkdGggYW5kIGhlaWdodCBwaXhlbCB2YWx1ZXMsIG9yIGR5bmFtaWMgc2NyZWVuIHNpemUgKCdhdXRvJykuXG5leHBvcnQgY29uc3QgQ2FudmFzU2l6ZTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9IHwgJ2F1dG8nID0gJ2F1dG8nO1xuXG4vLyDnlLvpnaJcbmV4cG9ydCBjb25zdCBWaWV3U2NhbGUgPSAxLjA7XG5leHBvcnQgY29uc3QgVmlld01heFNjYWxlID0gMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdNaW5TY2FsZSA9IDAuODtcblxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTGVmdCA9IC0xLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxSaWdodCA9IDEuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbEJvdHRvbSA9IC0xLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxUb3AgPSAxLjA7XG5cbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heExlZnQgPSAtMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4UmlnaHQgPSAyLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhCb3R0b20gPSAtMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4VG9wID0gMi4wO1xuXG4vLyDnm7jlr77jg5HjgrlcbmV4cG9ydCBjb25zdCBSZXNvdXJjZXNQYXRoID0gJy4vUmVzb3VyY2VzLyc7XG5cbi8vIOODouODh+ODq+OBruW+jOOCjeOBq+OBguOCi+iDjOaZr+OBrueUu+WDj+ODleOCoeOCpOODq1xuZXhwb3J0IGNvbnN0IEJhY2tJbWFnZU5hbWUgPSAnYmFja19jbGFzc19ub3JtYWwucG5nJztcblxuLy8g5q2v6LuKXG5leHBvcnQgY29uc3QgR2VhckltYWdlTmFtZSA9ICdpY29uX2dlYXIucG5nJztcblxuLy8g57WC5LqG44Oc44K/44OzXG5leHBvcnQgY29uc3QgUG93ZXJJbWFnZU5hbWUgPSAnQ2xvc2VOb3JtYWwucG5nJztcblxuLy8g44Oi44OH44Or5a6a576pLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyDjg6Ljg4fjg6vjgpLphY3nva7jgZfjgZ/jg4fjgqPjg6zjgq/jg4jjg6rlkI3jga7phY3liJdcbi8vIOODh+OCo+ODrOOCr+ODiOODquWQjeOBqG1vZGVsMy5qc29u44Gu5ZCN5YmN44KS5LiA6Ie044GV44Gb44Gm44GK44GP44GT44GoXG5leHBvcnQgY29uc3QgTW9kZWxEaXI6IHN0cmluZ1tdID0gW1xuICAnSGFydScsXG4gICdIaXlvcmknLFxuICAnTWFyaycsXG4gICdOYXRvcmknLFxuICAnUmljZScsXG4gICdNYW8nXG5dO1xuZXhwb3J0IGNvbnN0IE1vZGVsRGlyU2l6ZTogbnVtYmVyID0gTW9kZWxEaXIubGVuZ3RoO1xuXG4vLyDlpJbpg6jlrprnvqnjg5XjgqHjgqTjg6vvvIhqc29u77yJ44Go5ZCI44KP44Gb44KLXG5leHBvcnQgY29uc3QgTW90aW9uR3JvdXBJZGxlID0gJ0lkbGUnOyAvLyDjgqLjgqTjg4njg6rjg7PjgrBcbmV4cG9ydCBjb25zdCBNb3Rpb25Hcm91cFRhcEJvZHkgPSAnVGFwQm9keSc7IC8vIOS9k+OCkuOCv+ODg+ODl+OBl+OBn+OBqOOBjVxuXG4vLyDlpJbpg6jlrprnvqnjg5XjgqHjgqTjg6vvvIhqc29u77yJ44Go5ZCI44KP44Gb44KLXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVIZWFkID0gJ0hlYWQnO1xuZXhwb3J0IGNvbnN0IEhpdEFyZWFOYW1lQm9keSA9ICdCb2R5JztcblxuLy8g44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm5a6a5pWwXG5leHBvcnQgY29uc3QgUHJpb3JpdHlOb25lID0gMDtcbmV4cG9ydCBjb25zdCBQcmlvcml0eUlkbGUgPSAxO1xuZXhwb3J0IGNvbnN0IFByaW9yaXR5Tm9ybWFsID0gMjtcbmV4cG9ydCBjb25zdCBQcmlvcml0eUZvcmNlID0gMztcblxuLy8g44OH44OQ44OD44Kw55So44Ot44Kw44Gu6KGo56S644Kq44OX44K344On44OzXG5leHBvcnQgY29uc3QgRGVidWdMb2dFbmFibGUgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IERlYnVnVG91Y2hMb2dFbmFibGUgPSBmYWxzZTtcblxuLy8gRnJhbWV3b3Jr44GL44KJ5Ye65Yqb44GZ44KL44Ot44Kw44Gu44Os44OZ44Or6Kit5a6aXG5leHBvcnQgY29uc3QgQ3ViaXNtTG9nZ2luZ0xldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZ0xldmVsX1ZlcmJvc2U7XG5cbi8vIOODh+ODleOCqeODq+ODiOOBruODrOODs+ODgOODvOOCv+ODvOOCsuODg+ODiOOCteOCpOOCulxuZXhwb3J0IGNvbnN0IFJlbmRlclRhcmdldFdpZHRoID0gMTkwMDtcbmV4cG9ydCBjb25zdCBSZW5kZXJUYXJnZXRIZWlnaHQgPSAxMDAwO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrLCBPcHRpb24gfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5cbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCB7IExBcHBMaXZlMkRNYW5hZ2VyIH0gZnJvbSAnLi9sYXBwbGl2ZTJkbWFuYWdlcic7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcbmltcG9ydCB7IExBcHBUZXh0dXJlTWFuYWdlciB9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcbmltcG9ydCB7IExBcHBWaWV3IH0gZnJvbSAnLi9sYXBwdmlldyc7XG5cbmV4cG9ydCBsZXQgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IG51bGw7XG5leHBvcnQgbGV0IHNfaW5zdGFuY2U6IExBcHBEZWxlZ2F0ZSA9IG51bGw7XG5leHBvcnQgbGV0IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xuZXhwb3J0IGxldCBmcmFtZUJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlciA9IG51bGw7XG5cbi8qKlxuICog44Ki44OX44Oq44Kx44O844K344On44Oz44Kv44Op44K544CCXG4gKiBDdWJpc20gU0RL44Gu566h55CG44KS6KGM44GG44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwRGVsZWdhdGUge1xuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6L+U44GZ44CCXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBjOeUn+aIkOOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOBr+WGhemDqOOBp+OCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBmeOCi+OAglxuICAgKlxuICAgKiBAcmV0dXJuIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBMQXBwRGVsZWdhdGUge1xuICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgIHNfaW5zdGFuY2UgPSBuZXcgTEFwcERlbGVnYXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlbGVhc2VJbnN0YW5jZSgpOiB2b2lkIHtcbiAgICBpZiAoc19pbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUFDjgavlv4XopoHjgarnianjgpLliJ3mnJ/ljJbjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IGJvb2xlYW4ge1xuICAgIC8vIOOCreODo+ODs+ODkOOCueOBruS9nOaIkFxuICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGlmIChMQXBwRGVmaW5lLkNhbnZhc1NpemUgPT09ICdhdXRvJykge1xuICAgICAgdGhpcy5fcmVzaXplQ2FudmFzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IExBcHBEZWZpbmUuQ2FudmFzU2l6ZS53aWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBMQXBwRGVmaW5lLkNhbnZhc1NpemUuaGVpZ2h0O1xuICAgIH1cblxuICAgIC8vIGds44Kz44Oz44OG44Kt44K544OI44KS5Yid5pyf5YyWXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpO1xuXG4gICAgaWYgKCFnbCkge1xuICAgICAgYWxlcnQoJ0Nhbm5vdCBpbml0aWFsaXplIFdlYkdMLiBUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydC4nKTtcbiAgICAgIGdsID0gbnVsbDtcblxuICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPVxuICAgICAgICAnVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIDxjb2RlPiZsdDtjYW52YXMmZ3Q7PC9jb2RlPiBlbGVtZW50Lic7XG5cbiAgICAgIC8vIGds5Yid5pyf5YyW5aSx5pWXXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544KSIERPTSDjgavov73liqBcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG5cbiAgICBpZiAoIWZyYW1lQnVmZmVyKSB7XG4gICAgICBmcmFtZUJ1ZmZlciA9IGdsLmdldFBhcmFtZXRlcihnbC5GUkFNRUJVRkZFUl9CSU5ESU5HKTtcbiAgICB9XG5cbiAgICAvLyDpgI/pgY7oqK3lrppcbiAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG4gICAgY29uc3Qgc3VwcG9ydFRvdWNoOiBib29sZWFuID0gJ29udG91Y2hlbmQnIGluIGNhbnZhcztcblxuICAgIGlmIChzdXBwb3J0VG91Y2gpIHtcbiAgICAgIC8vIOOCv+ODg+ODgemWoumAo+OCs+ODvOODq+ODkOODg+OCr+mWouaVsOeZu+mMslxuICAgICAgY2FudmFzLm9udG91Y2hzdGFydCA9IG9uVG91Y2hCZWdhbjtcbiAgICAgIGNhbnZhcy5vbnRvdWNobW92ZSA9IG9uVG91Y2hNb3ZlZDtcbiAgICAgIGNhbnZhcy5vbnRvdWNoZW5kID0gb25Ub3VjaEVuZGVkO1xuICAgICAgY2FudmFzLm9udG91Y2hjYW5jZWwgPSBvblRvdWNoQ2FuY2VsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDjg57jgqbjgrnplqLpgKPjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDnmbvpjLJcbiAgICAgIGNhbnZhcy5vbm1vdXNlZG93biA9IG9uQ2xpY2tCZWdhbjtcbiAgICAgIGNhbnZhcy5vbm1vdXNlbW92ZSA9IG9uTW91c2VNb3ZlZDtcbiAgICAgIGNhbnZhcy5vbm1vdXNldXAgPSBvbkNsaWNrRW5kZWQ7XG4gICAgfVxuXG4gICAgLy8gQXBwVmlld+OBruWIneacn+WMllxuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZSgpO1xuXG4gICAgLy8gQ3ViaXNtIFNES+OBruWIneacn+WMllxuICAgIHRoaXMuaW5pdGlhbGl6ZUN1YmlzbSgpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUmVzaXplIGNhbnZhcyBhbmQgcmUtaW5pdGlhbGl6ZSB2aWV3LlxuICAgKi9cbiAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xuICAgIHRoaXMuX3Jlc2l6ZUNhbnZhcygpO1xuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZVNwcml0ZSgpO1xuXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544K144Kk44K644KS5rih44GZXG4gICAgY29uc3Qgdmlld3BvcnQ6IG51bWJlcltdID0gWzAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodF07XG5cbiAgICBnbC52aWV3cG9ydCh2aWV3cG9ydFswXSwgdmlld3BvcnRbMV0sIHZpZXdwb3J0WzJdLCB2aWV3cG9ydFszXSk7XG4gIH1cblxuICAvKipcbiAgICog6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl90ZXh0dXJlTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgdGhpcy5fdGV4dHVyZU1hbmFnZXIgPSBudWxsO1xuXG4gICAgdGhpcy5fdmlldy5yZWxlYXNlKCk7XG4gICAgdGhpcy5fdmlldyA9IG51bGw7XG5cbiAgICAvLyDjg6rjgr3jg7zjgrnjgpLop6PmlL5cbiAgICBMQXBwTGl2ZTJETWFuYWdlci5yZWxlYXNlSW5zdGFuY2UoKTtcblxuICAgIC8vIEN1YmlzbSBTREvjga7op6PmlL5cbiAgICBDdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWun+ihjOWHpueQhuOAglxuICAgKi9cbiAgcHVibGljIHJ1bigpOiB2b2lkIHtcbiAgICAvLyDjg6HjgqTjg7Pjg6vjg7zjg5dcbiAgICBjb25zdCBsb29wID0gKCk6IHZvaWQgPT4ge1xuICAgICAgLy8g44Kk44Oz44K544K/44Oz44K544Gu5pyJ54Sh44Gu56K66KqNXG4gICAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8g5pmC6ZaT5pu05pawXG4gICAgICBMQXBwUGFsLnVwZGF0ZVRpbWUoKTtcblxuICAgICAgLy8g55S76Z2i44Gu5Yid5pyf5YyWXG4gICAgICBnbC5jbGVhckNvbG9yKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG5cbiAgICAgIC8vIOa3seW6puODhuOCueODiOOCkuacieWKueWMllxuICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xuXG4gICAgICAvLyDov5HjgY/jgavjgYLjgovniankvZPjga/jgIHpgaDjgY/jgavjgYLjgovniankvZPjgpLopobjgYTpmqDjgZlcbiAgICAgIGdsLmRlcHRoRnVuYyhnbC5MRVFVQUwpO1xuXG4gICAgICAvLyDjgqvjg6njg7zjg5Djg4Pjg5XjgqHjgoTmt7Hluqbjg5Djg4Pjg5XjgqHjgpLjgq/jg6rjgqLjgZnjgotcbiAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcblxuICAgICAgZ2wuY2xlYXJEZXB0aCgxLjApO1xuXG4gICAgICAvLyDpgI/pgY7oqK3lrppcbiAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XG4gICAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuICAgICAgLy8g5o+P55S75pu05pawXG4gICAgICB0aGlzLl92aWV3LnJlbmRlcigpO1xuXG4gICAgICAvLyDjg6vjg7zjg5fjga7jgZ/jgoHjgavlho3luLDlkbzjgbPlh7rjgZdcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICB9O1xuICAgIGxvb3AoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjgpLnmbvpjLLjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVTaGFkZXIoKTogV2ViR0xQcm9ncmFtIHtcbiAgICAvLyDjg5Djg7zjg4bjg4Pjgq/jgrnjgrfjgqfjg7zjg4Djg7zjga7jgrPjg7Pjg5HjgqTjg6tcbiAgICBjb25zdCB2ZXJ0ZXhTaGFkZXJJZCA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcblxuICAgIGlmICh2ZXJ0ZXhTaGFkZXJJZCA9PSBudWxsKSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgnZmFpbGVkIHRvIGNyZWF0ZSB2ZXJ0ZXhTaGFkZXInKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHZlcnRleFNoYWRlcjogc3RyaW5nID1cbiAgICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAgICdhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsnICtcbiAgICAgICdhdHRyaWJ1dGUgdmVjMiB1djsnICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdnV2OycgK1xuICAgICAgJ3ZvaWQgbWFpbih2b2lkKScgK1xuICAgICAgJ3snICtcbiAgICAgICcgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDEuMCk7JyArXG4gICAgICAnICAgdnV2ID0gdXY7JyArXG4gICAgICAnfSc7XG5cbiAgICBnbC5zaGFkZXJTb3VyY2UodmVydGV4U2hhZGVySWQsIHZlcnRleFNoYWRlcik7XG4gICAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXJJZCk7XG5cbiAgICAvLyDjg5Xjg6njgrDjg6Hjg7Pjg4jjgrfjgqfjg7zjg4Djga7jgrPjg7Pjg5HjgqTjg6tcbiAgICBjb25zdCBmcmFnbWVudFNoYWRlcklkID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG5cbiAgICBpZiAoZnJhZ21lbnRTaGFkZXJJZCA9PSBudWxsKSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgnZmFpbGVkIHRvIGNyZWF0ZSBmcmFnbWVudFNoYWRlcicpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXI6IHN0cmluZyA9XG4gICAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICAgICAndmFyeWluZyB2ZWMyIHZ1djsnICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlOycgK1xuICAgICAgJ3ZvaWQgbWFpbih2b2lkKScgK1xuICAgICAgJ3snICtcbiAgICAgICcgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodGV4dHVyZSwgdnV2KTsnICtcbiAgICAgICd9JztcblxuICAgIGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlcklkLCBmcmFnbWVudFNoYWRlcik7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihmcmFnbWVudFNoYWRlcklkKTtcblxuICAgIC8vIOODl+ODreOCsOODqeODoOOCquODluOCuOOCp+OCr+ODiOOBruS9nOaIkFxuICAgIGNvbnN0IHByb2dyYW1JZCA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbUlkLCB2ZXJ0ZXhTaGFkZXJJZCk7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW1JZCwgZnJhZ21lbnRTaGFkZXJJZCk7XG5cbiAgICBnbC5kZWxldGVTaGFkZXIodmVydGV4U2hhZGVySWQpO1xuICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcklkKTtcblxuICAgIC8vIOODquODs+OCr1xuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW1JZCk7XG5cbiAgICBnbC51c2VQcm9ncmFtKHByb2dyYW1JZCk7XG5cbiAgICByZXR1cm4gcHJvZ3JhbUlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFZpZXfmg4XloLHjgpLlj5blvpfjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBnZXRWaWV3KCk6IExBcHBWaWV3IHtcbiAgICByZXR1cm4gdGhpcy5fdmlldztcbiAgfVxuXG4gIHB1YmxpYyBnZXRUZXh0dXJlTWFuYWdlcigpOiBMQXBwVGV4dHVyZU1hbmFnZXIge1xuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlTWFuYWdlcjtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydFZvaWNlQ29udmVyc2F0aW9uKGxhbmd1YWdlOiBzdHJpbmcsIGRhdGE6IEJsb2IpIHtcbiAgICBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpLnN0YXJ0Vm9pY2VDb252ZXJzYXRpb24obGFuZ3VhZ2UsIGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY2FwdHVyZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9tb3VzZVggPSAwLjA7XG4gICAgdGhpcy5fbW91c2VZID0gMC4wO1xuICAgIHRoaXMuX2lzRW5kID0gZmFsc2U7XG5cbiAgICB0aGlzLl9jdWJpc21PcHRpb24gPSBuZXcgT3B0aW9uKCk7XG4gICAgdGhpcy5fdmlldyA9IG5ldyBMQXBwVmlldygpO1xuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyID0gbmV3IExBcHBUZXh0dXJlTWFuYWdlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbSBTREvjga7liJ3mnJ/ljJZcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplQ3ViaXNtKCk6IHZvaWQge1xuICAgIC8vIHNldHVwIGN1YmlzbVxuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dGdW5jdGlvbiA9IExBcHBQYWwucHJpbnRNZXNzYWdlO1xuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dnaW5nTGV2ZWwgPSBMQXBwRGVmaW5lLkN1YmlzbUxvZ2dpbmdMZXZlbDtcbiAgICBDdWJpc21GcmFtZXdvcmsuc3RhcnRVcCh0aGlzLl9jdWJpc21PcHRpb24pO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBjdWJpc21cbiAgICBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgpO1xuXG4gICAgLy8gbG9hZCBtb2RlbFxuICAgIExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbiAgICBMQXBwUGFsLnVwZGF0ZVRpbWUoKTtcblxuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZVNwcml0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSB0aGUgY2FudmFzIHRvIGZpbGwgdGhlIHNjcmVlbi5cbiAgICovXG4gIHByaXZhdGUgX3Jlc2l6ZUNhbnZhcygpOiB2b2lkIHtcbiAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICB9XG5cbiAgX2N1YmlzbU9wdGlvbjogT3B0aW9uOyAvLyBDdWJpc20gU0RLIE9wdGlvblxuICBfdmlldzogTEFwcFZpZXc7IC8vIFZpZXfmg4XloLFcbiAgX2NhcHR1cmVkOiBib29sZWFuOyAvLyDjgq/jg6rjg4Pjgq/jgZfjgabjgYTjgovjgYtcbiAgX21vdXNlWDogbnVtYmVyOyAvLyDjg57jgqbjgrlY5bqn5qiZXG4gIF9tb3VzZVk6IG51bWJlcjsgLy8g44Oe44Km44K5WeW6p+aomVxuICBfaXNFbmQ6IGJvb2xlYW47IC8vIEFQUOe1guS6huOBl+OBpuOBhOOCi+OBi1xuICBfdGV4dHVyZU1hbmFnZXI6IExBcHBUZXh0dXJlTWFuYWdlcjsgLy8g44OG44Kv44K544OB44Oj44Oe44ON44O844K444Oj44O8XG59XG5cbi8qKlxuICog44Kv44Oq44OD44Kv44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uQ2xpY2tCZWdhbihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSB0cnVlO1xuXG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUucGFnZVg7XG4gIGNvbnN0IHBvc1k6IG51bWJlciA9IGUucGFnZVk7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzQmVnYW4ocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44Oe44Km44K544Od44Kk44Oz44K/44GM5YuV44GE44Gf44KJ5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlZChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVjdCA9IChlLnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgcG9zWDogbnVtYmVyID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICBjb25zdCBwb3NZOiBudW1iZXIgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNNb3ZlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgq/jg6rjg4Pjgq/jgYzntYLkuobjgZfjgZ/jgonlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25DbGlja0VuZGVkKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gZmFsc2U7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWTogbnVtYmVyID0gZS5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzRW5kZWQocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44K/44OD44OB44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uVG91Y2hCZWdhbihlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IHRydWU7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0JlZ2FuKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCueODr+OCpOODl+OBmeOCi+OBqOWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoTW92ZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc01vdmVkKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCv+ODg+ODgeOBjOe1guS6huOBl+OBn+OCieWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoRW5kZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSBmYWxzZTtcblxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNFbmRlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgr/jg4Pjg4HjgYzjgq3jg6Pjg7Pjgrvjg6vjgZXjgozjgovjgajlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25Ub3VjaENhbmNlbChlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IGZhbHNlO1xuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uIH0gZnJvbSAnQGZyYW1ld29yay9tb3Rpb24vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEF6dXJlQWkgfSBmcm9tICcuL2F6dXJlYWknO1xuXG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5pbXBvcnQgeyBjYW52YXMgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgeyBMQXBwTW9kZWwgfSBmcm9tICcuL2xhcHBtb2RlbCc7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcblxuZXhwb3J0IGxldCBzX2luc3RhbmNlOiBMQXBwTGl2ZTJETWFuYWdlciA9IG51bGw7XG5cbi8qKlxuICog44K144Oz44OX44Or44Ki44OX44Oq44Kx44O844K344On44Oz44Gr44GK44GE44GmQ3ViaXNtTW9kZWzjgpLnrqHnkIbjgZnjgovjgq/jg6njgrlcbiAqIOODouODh+ODq+eUn+aIkOOBqOegtOajhOOAgeOCv+ODg+ODl+OCpOODmeODs+ODiOOBruWHpueQhuOAgeODouODh+ODq+WIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcExpdmUyRE1hbmFnZXIge1xuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6L+U44GZ44CCXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBjOeUn+aIkOOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOBr+WGhemDqOOBp+OCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBmeOCi+OAglxuICAgKlxuICAgKiBAcmV0dXJuIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBMQXBwTGl2ZTJETWFuYWdlciB7XG4gICAgaWYgKHNfaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IG5ldyBMQXBwTGl2ZTJETWFuYWdlcigpO1xuICAgIH1cblxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgaWYgKHNfaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jgrfjg7zjg7Pjgafkv53mjIHjgZfjgabjgYTjgovjg6Ljg4fjg6vjgpLov5TjgZnjgIJcbiAgICpcbiAgICogQHBhcmFtIG5vIOODouODh+ODq+ODquOCueODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCueOCkui/lOOBmeOAguOCpOODs+ODh+ODg+OCr+OCueWApOOBjOevhOWbsuWkluOBruWgtOWQiOOBr05VTEzjgpLov5TjgZnjgIJcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbChubzogbnVtYmVyKTogTEFwcE1vZGVsIHtcbiAgICBpZiAobm8gPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWxzLmF0KG5vKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jgrfjg7zjg7Pjgafkv53mjIHjgZfjgabjgYTjgovjgZnjgbnjgabjga7jg6Ljg4fjg6vjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlQWxsTW9kZWwoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX21vZGVscy5hdChpKS5yZWxlYXNlKCk7XG4gICAgICB0aGlzLl9tb2RlbHMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVscy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+mdouOCkuODieODqeODg+OCsOOBl+OBn+aZguOBruWHpueQhlxuICAgKlxuICAgKiBAcGFyYW0geCDnlLvpnaLjga5Y5bqn5qiZXG4gICAqIEBwYXJhbSB5IOeUu+mdouOBrlnluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvbkRyYWcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgY29uc3QgbW9kZWw6IExBcHBNb2RlbCA9IHRoaXMuZ2V0TW9kZWwoaSk7XG5cbiAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICBtb2RlbC5zZXREcmFnZ2luZyh4LCB5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i44KS44K/44OD44OX44GX44Gf5pmC44Gu5Yem55CGXG4gICAqXG4gICAqIEBwYXJhbSB4IOeUu+mdouOBrljluqfmqJlcbiAgICogQHBhcmFtIHkg55S76Z2i44GuWeW6p+aomVxuICAgKi9cbiAgcHVibGljIG9uVGFwKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICBgW0FQUF10YXAgcG9pbnQ6IHt4OiAke3gudG9GaXhlZCgyKX0geTogJHt5LnRvRml4ZWQoMil9fWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbHMuYXQoaSkuaGl0VGVzdChMQXBwRGVmaW5lLkhpdEFyZWFOYW1lSGVhZCwgeCwgeSkpIHtcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcbiAgICAgICAgICAgIGBbQVBQXWhpdCBhcmVhOiBbJHtMQXBwRGVmaW5lLkhpdEFyZWFOYW1lSGVhZH1dYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW9kZWxzLmF0KGkpLnNldFJhbmRvbUV4cHJlc3Npb24oKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fbW9kZWxzLmF0KGkpLmhpdFRlc3QoTEFwcERlZmluZS5IaXRBcmVhTmFtZUJvZHksIHgsIHkpKSB7XG4gICAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XG4gICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXG4gICAgICAgICAgICBgW0FQUF1oaXQgYXJlYTogWyR7TEFwcERlZmluZS5IaXRBcmVhTmFtZUJvZHl9XWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvbXB0OiBzdHJpbmcgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9tcHRcIikgYXMgYW55KS52YWx1ZTtcbiAgICAgICAgY29uc3QgbGFuZ3VhZ2U6IHN0cmluZyA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhbmd1YWdlXCIpIGFzIGFueSkudmFsdWU7XG4gICAgICAgIGNvbnN0IGF6dXJlQWkgPSBuZXcgQXp1cmVBaSgpO1xuICAgICAgICBhenVyZUFpLmdldE9wZW5BaUFuc3dlcihwcm9tcHQpXG4gICAgICAgICAgLnRoZW4oYW5zID0+IGF6dXJlQWkuZ2V0U3BlZWNoVXJsKGxhbmd1YWdlLCBhbnMpKVxuICAgICAgICAgIC50aGVuKHVybCA9PiB7XG4gICAgICAgICAgICB0aGlzLl9tb2RlbHMuYXQoaSkuX3dhdkZpbGVIYW5kbGVyLmxvYWRXYXZGaWxlKHVybCk7XG4gICAgICAgICAgICB0aGlzLl9tb2RlbHNcbiAgICAgICAgICAgICAgLmF0KGkpXG4gICAgICAgICAgICAgIC5zdGFydFJhbmRvbU1vdGlvbihcbiAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLk1vdGlvbkdyb3VwVGFwQm9keSxcbiAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5Tm9ybWFsLFxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkTW90aW9uXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhcnRWb2ljZUNvbnZlcnNhdGlvbihsYW5ndWFnZTogc3RyaW5nLCBkYXRhOiBCbG9iKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICAgIGBzdGFydENvbnZlcnNhdGlvbmBcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgYXp1cmVBaSA9IG5ldyBBenVyZUFpKCk7XG5cbiAgICAgICAgYXp1cmVBaS5nZXRUZXh0RnJvbVNwZWVjaChsYW5ndWFnZSwgZGF0YSlcbiAgICAgICAgICAudGhlbih0ZXh0ID0+IHtcbiAgICAgICAgICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb21wdFwiKSBhcyBhbnkpLnZhbHVlID0gdGV4dDtcbiAgICAgICAgICAgIHJldHVybiBhenVyZUFpLmdldE9wZW5BaUFuc3dlcih0ZXh0KTtcbiAgICAgICAgICB9KS50aGVuKGFucyA9PiBhenVyZUFpLmdldFNwZWVjaFVybChsYW5ndWFnZSwgYW5zKSlcbiAgICAgICAgICAudGhlbih1cmwgPT4ge1xuICAgICAgICAgICAgdGhpcy5fbW9kZWxzLmF0KGkpLl93YXZGaWxlSGFuZGxlci5sb2FkV2F2RmlsZSh1cmwpO1xuICAgICAgICAgICAgdGhpcy5fbW9kZWxzXG4gICAgICAgICAgICAgIC5hdChpKVxuICAgICAgICAgICAgICAuc3RhcnRSYW5kb21Nb3Rpb24oXG4gICAgICAgICAgICAgICAgTEFwcERlZmluZS5Nb3Rpb25Hcm91cFRhcEJvZHksXG4gICAgICAgICAgICAgICAgTEFwcERlZmluZS5Qcmlvcml0eU5vcm1hbCxcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hlZE1vdGlvblxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvpnaLjgpLmm7TmlrDjgZnjgovjgajjgY3jga7lh6bnkIZcbiAgICog44Oi44OH44Or44Gu5pu05paw5Yem55CG5Y+K44Gz5o+P55S75Yem55CG44KS6KGM44GGXG4gICAqL1xuICBwdWJsaWMgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBjYW52YXM7XG5cbiAgICBjb25zdCBtb2RlbENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbENvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHByb2plY3Rpb246IEN1YmlzbU1hdHJpeDQ0ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgICBjb25zdCBtb2RlbDogTEFwcE1vZGVsID0gdGhpcy5nZXRNb2RlbChpKTtcblxuICAgICAgaWYgKG1vZGVsLmdldE1vZGVsKCkpIHtcbiAgICAgICAgaWYgKG1vZGVsLmdldE1vZGVsKCkuZ2V0Q2FudmFzV2lkdGgoKSA+IDEuMCAmJiB3aWR0aCA8IGhlaWdodCkge1xuICAgICAgICAgIC8vIOaoquOBq+mVt+OBhOODouODh+ODq+OCkue4pumVt+OCpuOCo+ODs+ODieOCpuOBq+ihqOekuuOBmeOCi+mam+ODouODh+ODq+OBruaoquOCteOCpOOCuuOBp3NjYWxl44KS566X5Ye644GZ44KLXG4gICAgICAgICAgbW9kZWwuZ2V0TW9kZWxNYXRyaXgoKS5zZXRXaWR0aCgyLjApO1xuICAgICAgICAgIHByb2plY3Rpb24uc2NhbGUoMS4wLCB3aWR0aCAvIGhlaWdodCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvamVjdGlvbi5zY2FsZShoZWlnaHQgLyB3aWR0aCwgMS4wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOW/heimgeOBjOOBguOCjOOBsOOBk+OBk+OBp+S5l+eul1xuICAgICAgICBpZiAodGhpcy5fdmlld01hdHJpeCAhPSBudWxsKSB7XG4gICAgICAgICAgcHJvamVjdGlvbi5tdWx0aXBseUJ5TWF0cml4KHRoaXMuX3ZpZXdNYXRyaXgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1vZGVsLnVwZGF0ZSgpO1xuICAgICAgbW9kZWwuZHJhdyhwcm9qZWN0aW9uKTsgLy8g5Y+C54Wn5rih44GX44Gq44Gu44GncHJvamVjdGlvbuOBr+WkieizquOBmeOCi+OAglxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmrKHjga7jgrfjg7zjg7PjgavliIfjgorjgYvjgYjjgotcbiAgICog44K144Oz44OX44Or44Ki44OX44Oq44Kx44O844K344On44Oz44Gn44Gv44Oi44OH44Or44K744OD44OI44Gu5YiH44KK5pu/44GI44KS6KGM44GG44CCXG4gICAqL1xuICBwdWJsaWMgbmV4dFNjZW5lKCk6IHZvaWQge1xuICAgIGNvbnN0IG5vOiBudW1iZXIgPSAodGhpcy5fc2NlbmVJbmRleCArIDEpICUgTEFwcERlZmluZS5Nb2RlbERpclNpemU7XG4gICAgdGhpcy5jaGFuZ2VTY2VuZShubyk7XG4gIH1cblxuICAvKipcbiAgICog44K344O844Oz44KS5YiH44KK5pu/44GI44KLXG4gICAqIOOCteODs+ODl+ODq+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBp+OBr+ODouODh+ODq+OCu+ODg+ODiOOBruWIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICAgKi9cbiAgcHVibGljIGNoYW5nZVNjZW5lKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zY2VuZUluZGV4ID0gaW5kZXg7XG4gICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXW1vZGVsIGluZGV4OiAke3RoaXMuX3NjZW5lSW5kZXh9YCk7XG4gICAgfVxuXG4gICAgLy8gTW9kZWxEaXJbXeOBq+S/neaMgeOBl+OBn+ODh+OCo+ODrOOCr+ODiOODquWQjeOBi+OCiVxuICAgIC8vIG1vZGVsMy5qc29u44Gu44OR44K544KS5rG65a6a44GZ44KL44CCXG4gICAgLy8g44OH44Kj44Os44Kv44OI44Oq5ZCN44GobW9kZWwzLmpzb27jga7lkI3liY3jgpLkuIDoh7TjgZXjgZvjgabjgYrjgY/jgZPjgajjgIJcbiAgICBjb25zdCBtb2RlbDogc3RyaW5nID0gTEFwcERlZmluZS5Nb2RlbERpcltpbmRleF07XG4gICAgY29uc3QgbW9kZWxQYXRoOiBzdHJpbmcgPSBMQXBwRGVmaW5lLlJlc291cmNlc1BhdGggKyBtb2RlbCArICcvJztcbiAgICBsZXQgbW9kZWxKc29uTmFtZTogc3RyaW5nID0gTEFwcERlZmluZS5Nb2RlbERpcltpbmRleF07XG4gICAgbW9kZWxKc29uTmFtZSArPSAnLm1vZGVsMy5qc29uJztcblxuICAgIHRoaXMucmVsZWFzZUFsbE1vZGVsKCk7XG4gICAgdGhpcy5fbW9kZWxzLnB1c2hCYWNrKG5ldyBMQXBwTW9kZWwoKSk7XG4gICAgdGhpcy5fbW9kZWxzLmF0KDApLmxvYWRBc3NldHMobW9kZWxQYXRoLCBtb2RlbEpzb25OYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRWaWV3TWF0cml4KG06IEN1YmlzbU1hdHJpeDQ0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICB0aGlzLl92aWV3TWF0cml4LmdldEFycmF5KClbaV0gPSBtLmdldEFycmF5KClbaV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX21vZGVscyA9IG5ldyBjc21WZWN0b3I8TEFwcE1vZGVsPigpO1xuICAgIHRoaXMuX3NjZW5lSW5kZXggPSAwO1xuICAgIHRoaXMuY2hhbmdlU2NlbmUodGhpcy5fc2NlbmVJbmRleCk7XG4gIH1cblxuICBfdmlld01hdHJpeDogQ3ViaXNtTWF0cml4NDQ7IC8vIOODouODh+ODq+aPj+eUu+OBq+eUqOOBhOOCi3ZpZXfooYzliJdcbiAgX21vZGVsczogY3NtVmVjdG9yPExBcHBNb2RlbD47IC8vIOODouODh+ODq+OCpOODs+OCueOCv+ODs+OCueOBruOCs+ODs+ODhuODilxuICBfc2NlbmVJbmRleDogbnVtYmVyOyAvLyDooajnpLrjgZnjgovjgrfjg7zjg7Pjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgLy8g44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Gu44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gIF9maW5pc2hlZE1vdGlvbiA9IChzZWxmOiBBQ3ViaXNtTW90aW9uKTogdm9pZCA9PiB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ01vdGlvbiBGaW5pc2hlZDonKTtcbiAgICBjb25zb2xlLmxvZyhzZWxmKTtcbiAgfTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuaW1wb3J0IHsgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkIH0gZnJvbSAnQGZyYW1ld29yay9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiB9IGZyb20gJ0BmcmFtZXdvcmsvY3ViaXNtbW9kZWxzZXR0aW5nanNvbic7XG5pbXBvcnQge1xuICBCcmVhdGhQYXJhbWV0ZXJEYXRhLFxuICBDdWJpc21CcmVhdGhcbn0gZnJvbSAnQGZyYW1ld29yay9lZmZlY3QvY3ViaXNtYnJlYXRoJztcbmltcG9ydCB7IEN1YmlzbUV5ZUJsaW5rIH0gZnJvbSAnQGZyYW1ld29yay9lZmZlY3QvY3ViaXNtZXllYmxpbmsnO1xuaW1wb3J0IHsgSUN1YmlzbU1vZGVsU2V0dGluZyB9IGZyb20gJ0BmcmFtZXdvcmsvaWN1YmlzbW1vZGVsc2V0dGluZyc7XG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJ0BmcmFtZXdvcmsvaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnQGZyYW1ld29yay9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICdAZnJhbWV3b3JrL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtVXNlck1vZGVsIH0gZnJvbSAnQGZyYW1ld29yay9tb2RlbC9jdWJpc211c2VybW9kZWwnO1xuaW1wb3J0IHtcbiAgQUN1YmlzbU1vdGlvbixcbiAgRmluaXNoZWRNb3Rpb25DYWxsYmFja1xufSBmcm9tICdAZnJhbWV3b3JrL21vdGlvbi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvbiB9IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2N1YmlzbW1vdGlvbic7XG5pbXBvcnQge1xuICBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlLFxuICBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlXG59IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVJlY3QgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtcmVjdGYnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnQGZyYW1ld29yay90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUxvZ0Vycm9yLCBDdWJpc21Mb2dJbmZvIH0gZnJvbSAnQGZyYW1ld29yay91dGlscy9jdWJpc21kZWJ1Zyc7XG5cbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCB7IGNhbnZhcywgZnJhbWVCdWZmZXIsIGdsLCBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcbmltcG9ydCB7IFRleHR1cmVJbmZvIH0gZnJvbSAnLi9sYXBwdGV4dHVyZW1hbmFnZXInO1xuaW1wb3J0IHsgTEFwcFdhdkZpbGVIYW5kbGVyIH0gZnJvbSAnLi9sYXBwd2F2ZmlsZWhhbmRsZXInO1xuXG5lbnVtIExvYWRTdGVwIHtcbiAgTG9hZEFzc2V0cyxcbiAgTG9hZE1vZGVsLFxuICBXYWl0TG9hZE1vZGVsLFxuICBMb2FkRXhwcmVzc2lvbixcbiAgV2FpdExvYWRFeHByZXNzaW9uLFxuICBMb2FkUGh5c2ljcyxcbiAgV2FpdExvYWRQaHlzaWNzLFxuICBMb2FkUG9zZSxcbiAgV2FpdExvYWRQb3NlLFxuICBTZXR1cEV5ZUJsaW5rLFxuICBTZXR1cEJyZWF0aCxcbiAgTG9hZFVzZXJEYXRhLFxuICBXYWl0TG9hZFVzZXJEYXRhLFxuICBTZXR1cEV5ZUJsaW5rSWRzLFxuICBTZXR1cExpcFN5bmNJZHMsXG4gIFNldHVwTGF5b3V0LFxuICBMb2FkTW90aW9uLFxuICBXYWl0TG9hZE1vdGlvbixcbiAgQ29tcGxldGVJbml0aWFsaXplLFxuICBDb21wbGV0ZVNldHVwTW9kZWwsXG4gIExvYWRUZXh0dXJlLFxuICBXYWl0TG9hZFRleHR1cmUsXG4gIENvbXBsZXRlU2V0dXBcbn1cblxuLyoqXG4gKiDjg6bjg7zjgrbjg7zjgYzlrp/pmpvjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6vjga7lrp/oo4Xjgq/jg6njgrk8YnI+XG4gKiDjg6Ljg4fjg6vnlJ/miJDjgIHmqZ/og73jgrPjg7Pjg53jg7zjg43jg7Pjg4jnlJ/miJDjgIHmm7TmlrDlh6bnkIbjgajjg6zjg7Pjg4Djg6rjg7PjgrDjga7lkbzjgbPlh7rjgZfjgpLooYzjgYbjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBNb2RlbCBleHRlbmRzIEN1YmlzbVVzZXJNb2RlbCB7XG4gIHByaXZhdGUgX2F1ZGlvU3JjOiBhbnk7XG4gIC8qKlxuICAgKiBtb2RlbDMuanNvbuOBjOe9ruOBi+OCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBqOODleOCoeOCpOODq+ODkeOCueOBi+OCieODouODh+ODq+OCkueUn+aIkOOBmeOCi1xuICAgKiBAcGFyYW0gZGlyXG4gICAqIEBwYXJhbSBmaWxlTmFtZVxuICAgKi9cbiAgcHVibGljIGxvYWRBc3NldHMoZGlyOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbEhvbWVEaXIgPSBkaXI7XG5cbiAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHtmaWxlTmFtZX1gKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgY29uc3Qgc2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZyA9IG5ldyBDdWJpc21Nb2RlbFNldHRpbmdKc29uKFxuICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDjgrnjg4bjg7zjg4jjgpLmm7TmlrBcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkTW9kZWw7XG5cbiAgICAgICAgLy8g57WQ5p6c44KS5L+d5a2YXG4gICAgICAgIHRoaXMuc2V0dXBNb2RlbChzZXR0aW5nKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG1vZGVsMy5qc29u44GL44KJ44Oi44OH44Or44KS55Sf5oiQ44GZ44KL44CCXG4gICAqIG1vZGVsMy5qc29u44Gu6KiY6L+w44Gr5b6T44Gj44Gm44Oi44OH44Or55Sf5oiQ44CB44Oi44O844K344On44Oz44CB54mp55CG5ryU566X44Gq44Gp44Gu44Kz44Oz44Od44O844ON44Oz44OI55Sf5oiQ44KS6KGM44GG44CCXG4gICAqXG4gICAqIEBwYXJhbSBzZXR0aW5nIElDdWJpc21Nb2RlbFNldHRpbmfjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHByaXZhdGUgc2V0dXBNb2RlbChzZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nKTogdm9pZCB7XG4gICAgdGhpcy5fdXBkYXRpbmcgPSB0cnVlO1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9tb2RlbFNldHRpbmcgPSBzZXR0aW5nO1xuXG4gICAgLy8gQ3ViaXNtTW9kZWxcbiAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vZGVsRmlsZU5hbWUoKSAhPSAnJykge1xuICAgICAgY29uc3QgbW9kZWxGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb2RlbEZpbGVOYW1lKCk7XG5cbiAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke21vZGVsRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZE1vZGVsKGFycmF5QnVmZmVyKTtcbiAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRFeHByZXNzaW9uO1xuXG4gICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICBsb2FkQ3ViaXNtRXhwcmVzc2lvbigpO1xuICAgICAgICB9KTtcblxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZE1vZGVsO1xuICAgIH0gZWxzZSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgnTW9kZWwgZGF0YSBkb2VzIG5vdCBleGlzdC4nKTtcbiAgICB9XG5cbiAgICAvLyBFeHByZXNzaW9uXG4gICAgY29uc3QgbG9hZEN1YmlzbUV4cHJlc3Npb24gPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25Db3VudCgpID4gMCkge1xuICAgICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25Db3VudCgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25OYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25OYW1lKGkpO1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25GaWxlTmFtZSA9XG4gICAgICAgICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGkpO1xuXG4gICAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7ZXhwcmVzc2lvbkZpbGVOYW1lfWApXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtb3Rpb246IEFDdWJpc21Nb3Rpb24gPSB0aGlzLmxvYWRFeHByZXNzaW9uKFxuICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbk5hbWVcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICBpZiAodGhpcy5fZXhwcmVzc2lvbnMuZ2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZShcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25zLmdldFZhbHVlKGV4cHJlc3Npb25OYW1lKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuc2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUsIG51bGwpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuc2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUsIG1vdGlvbik7XG5cbiAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbkNvdW50Kys7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb25Db3VudCA+PSBjb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFBoeXNpY3M7XG5cbiAgICAgICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGxvYWRDdWJpc21QaHlzaWNzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRFeHByZXNzaW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUGh5c2ljcztcblxuICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICBsb2FkQ3ViaXNtUGh5c2ljcygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQaHlzaWNzXG4gICAgY29uc3QgbG9hZEN1YmlzbVBoeXNpY3MgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldFBoeXNpY3NGaWxlTmFtZSgpICE9ICcnKSB7XG4gICAgICAgIGNvbnN0IHBoeXNpY3NGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKTtcblxuICAgICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHtwaHlzaWNzRmlsZU5hbWV9YClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZFBoeXNpY3MoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQb3NlO1xuXG4gICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgbG9hZEN1YmlzbVBvc2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFBoeXNpY3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQb3NlO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIGxvYWRDdWJpc21Qb3NlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFBvc2VcbiAgICBjb25zdCBsb2FkQ3ViaXNtUG9zZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0UG9zZUZpbGVOYW1lKCkgIT0gJycpIHtcbiAgICAgICAgY29uc3QgcG9zZUZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFBvc2VGaWxlTmFtZSgpO1xuXG4gICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke3Bvc2VGaWxlTmFtZX1gKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2FkUG9zZShhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBFeWVCbGluaztcblxuICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIHNldHVwRXllQmxpbmsoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFBvc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbms7XG5cbiAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgc2V0dXBFeWVCbGluaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFeWVCbGlua1xuICAgIGNvbnN0IHNldHVwRXllQmxpbmsgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKSA+IDApIHtcbiAgICAgICAgdGhpcy5fZXllQmxpbmsgPSBDdWJpc21FeWVCbGluay5jcmVhdGUodGhpcy5fbW9kZWxTZXR0aW5nKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEJyZWF0aDtcbiAgICAgIH1cblxuICAgICAgLy8gY2FsbGJhY2tcbiAgICAgIHNldHVwQnJlYXRoKCk7XG4gICAgfTtcblxuICAgIC8vIEJyZWF0aFxuICAgIGNvbnN0IHNldHVwQnJlYXRoID0gKCk6IHZvaWQgPT4ge1xuICAgICAgdGhpcy5fYnJlYXRoID0gQ3ViaXNtQnJlYXRoLmNyZWF0ZSgpO1xuXG4gICAgICBjb25zdCBicmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT4gPSBuZXcgY3NtVmVjdG9yKCk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVYLCAwLjAsIDE1LjAsIDYuNTM0NSwgMC41KVxuICAgICAgKTtcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgIG5ldyBCcmVhdGhQYXJhbWV0ZXJEYXRhKHRoaXMuX2lkUGFyYW1BbmdsZVksIDAuMCwgOC4wLCAzLjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVaLCAwLjAsIDEwLjAsIDUuNTM0NSwgMC41KVxuICAgICAgKTtcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgIG5ldyBCcmVhdGhQYXJhbWV0ZXJEYXRhKHRoaXMuX2lkUGFyYW1Cb2R5QW5nbGVYLCAwLjAsIDQuMCwgMTUuNTM0NSwgMC41KVxuICAgICAgKTtcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgIG5ldyBCcmVhdGhQYXJhbWV0ZXJEYXRhKFxuICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyZWF0aFxuICAgICAgICAgICksXG4gICAgICAgICAgMC41LFxuICAgICAgICAgIDAuNSxcbiAgICAgICAgICAzLjIzNDUsXG4gICAgICAgICAgMVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICB0aGlzLl9icmVhdGguc2V0UGFyYW1ldGVycyhicmVhdGhQYXJhbWV0ZXJzKTtcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFVzZXJEYXRhO1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgbG9hZFVzZXJEYXRhKCk7XG4gICAgfTtcblxuICAgIC8vIFVzZXJEYXRhXG4gICAgY29uc3QgbG9hZFVzZXJEYXRhID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRVc2VyRGF0YUZpbGUoKSAhPSAnJykge1xuICAgICAgICBjb25zdCB1c2VyRGF0YUZpbGUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VXNlckRhdGFGaWxlKCk7XG5cbiAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7dXNlckRhdGFGaWxlfWApXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvYWRVc2VyRGF0YShhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBFeWVCbGlua0lkcztcblxuICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIHNldHVwRXllQmxpbmtJZHMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkVXNlckRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbmtJZHM7XG5cbiAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgc2V0dXBFeWVCbGlua0lkcygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFeWVCbGlua0lkc1xuICAgIGNvbnN0IHNldHVwRXllQmxpbmtJZHMgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBleWVCbGlua0lkQ291bnQ6IG51bWJlciA9XG4gICAgICAgIHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXllQmxpbmtJZENvdW50OyArK2kpIHtcbiAgICAgICAgdGhpcy5fZXllQmxpbmtJZHMucHVzaEJhY2soXG4gICAgICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cExpcFN5bmNJZHM7XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBzZXR1cExpcFN5bmNJZHMoKTtcbiAgICB9O1xuXG4gICAgLy8gTGlwU3luY0lkc1xuICAgIGNvbnN0IHNldHVwTGlwU3luY0lkcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IGxpcFN5bmNJZENvdW50ID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpcFN5bmNJZENvdW50OyArK2kpIHtcbiAgICAgICAgdGhpcy5fbGlwU3luY0lkcy5wdXNoQmFjayh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TGlwU3luY1BhcmFtZXRlcklkKGkpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBMYXlvdXQ7XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBzZXR1cExheW91dCgpO1xuICAgIH07XG5cbiAgICAvLyBMYXlvdXRcbiAgICBjb25zdCBzZXR1cExheW91dCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IGxheW91dDogY3NtTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBjc21NYXA8c3RyaW5nLCBudW1iZXI+KCk7XG5cbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcgPT0gbnVsbCB8fCB0aGlzLl9tb2RlbE1hdHJpeCA9PSBudWxsKSB7XG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gc2V0dXBMYXlvdXQoKS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TGF5b3V0TWFwKGxheW91dCk7XG4gICAgICB0aGlzLl9tb2RlbE1hdHJpeC5zZXR1cEZyb21MYXlvdXQobGF5b3V0KTtcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZE1vdGlvbjtcblxuICAgICAgLy8gY2FsbGJhY2tcbiAgICAgIGxvYWRDdWJpc21Nb3Rpb24oKTtcbiAgICB9O1xuXG4gICAgLy8gTW90aW9uXG4gICAgY29uc3QgbG9hZEN1YmlzbU1vdGlvbiA9ICgpOiB2b2lkID0+IHtcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRNb3Rpb247XG4gICAgICB0aGlzLl9tb2RlbC5zYXZlUGFyYW1ldGVycygpO1xuICAgICAgdGhpcy5fYWxsTW90aW9uQ291bnQgPSAwO1xuICAgICAgdGhpcy5fbW90aW9uQ291bnQgPSAwO1xuICAgICAgY29uc3QgZ3JvdXA6IHN0cmluZ1tdID0gW107XG5cbiAgICAgIGNvbnN0IG1vdGlvbkdyb3VwQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Hcm91cENvdW50KCk7XG5cbiAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBrue3j+aVsOOCkuaxguOCgeOCi1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb3Rpb25Hcm91cENvdW50OyBpKyspIHtcbiAgICAgICAgZ3JvdXBbaV0gPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uR3JvdXBOYW1lKGkpO1xuICAgICAgICB0aGlzLl9hbGxNb3Rpb25Db3VudCArPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXBbaV0pO1xuICAgICAgfVxuXG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7oqq3jgb/ovrzjgb9cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW90aW9uR3JvdXBDb3VudDsgaSsrKSB7XG4gICAgICAgIHRoaXMucHJlTG9hZE1vdGlvbkdyb3VwKGdyb3VwW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8g44Oi44O844K344On44Oz44GM44Gq44GE5aC05ZCIXG4gICAgICBpZiAobW90aW9uR3JvdXBDb3VudCA9PSAwKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFRleHR1cmU7XG5cbiAgICAgICAgLy8g5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXG4gICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc3RvcEFsbE1vdGlvbnMoKTtcblxuICAgICAgICB0aGlzLl91cGRhdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgICAgICB0aGlzLnNldHVwVGV4dHVyZXMoKTtcbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnN0YXJ0VXAoZ2wpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44Om44OL44OD44OI44Gr44OG44Kv44K544OB44Oj44KS44Ot44O844OJ44GZ44KLXG4gICAqL1xuICBwcml2YXRlIHNldHVwVGV4dHVyZXMoKTogdm9pZCB7XG4gICAgLy8gaVBob25l44Gn44Gu44Ki44Or44OV44Kh5ZOB6LOq5ZCR5LiK44Gu44Gf44KBVHlwZXNjcmlwdOOBp+OBr3ByZW11bHRpcGxpZWRBbHBoYeOCkuaOoeeUqFxuICAgIGNvbnN0IHVzZVByZW11bHRpcGx5ID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PSBMb2FkU3RlcC5Mb2FkVGV4dHVyZSkge1xuICAgICAgLy8g44OG44Kv44K544OB44Oj6Kqt44G/6L6844G/55SoXG4gICAgICBjb25zdCB0ZXh0dXJlQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRUZXh0dXJlQ291bnQoKTtcblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IG1vZGVsVGV4dHVyZU51bWJlciA9IDA7XG4gICAgICAgIG1vZGVsVGV4dHVyZU51bWJlciA8IHRleHR1cmVDb3VudDtcbiAgICAgICAgbW9kZWxUZXh0dXJlTnVtYmVyKytcbiAgICAgICkge1xuICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PlkI3jgYznqbrmloflrZfjgaDjgaPjgZ/loLTlkIjjga/jg63jg7zjg4njg7vjg5DjgqTjg7Pjg4nlh6bnkIbjgpLjgrnjgq3jg4Pjg5dcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRUZXh0dXJlRmlsZU5hbWUobW9kZWxUZXh0dXJlTnVtYmVyKSA9PSAnJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdnZXRUZXh0dXJlRmlsZU5hbWUgbnVsbCcpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2ViR0zjga7jg4bjgq/jgrnjg4Hjg6Pjg6bjg4vjg4Pjg4jjgavjg4bjgq/jgrnjg4Hjg6PjgpLjg63jg7zjg4njgZnjgotcbiAgICAgICAgbGV0IHRleHR1cmVQYXRoID1cbiAgICAgICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUZpbGVOYW1lKG1vZGVsVGV4dHVyZU51bWJlcik7XG4gICAgICAgIHRleHR1cmVQYXRoID0gdGhpcy5fbW9kZWxIb21lRGlyICsgdGV4dHVyZVBhdGg7XG5cbiAgICAgICAgLy8g44Ot44O844OJ5a6M5LqG5pmC44Gr5ZG844Gz5Ye644GZ44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAgICAgIGNvbnN0IG9uTG9hZCA9ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pOiB2b2lkID0+IHtcbiAgICAgICAgICB0aGlzLmdldFJlbmRlcmVyKCkuYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTnVtYmVyLCB0ZXh0dXJlSW5mby5pZCk7XG5cbiAgICAgICAgICB0aGlzLl90ZXh0dXJlQ291bnQrKztcblxuICAgICAgICAgIGlmICh0aGlzLl90ZXh0dXJlQ291bnQgPj0gdGV4dHVyZUNvdW50KSB7XG4gICAgICAgICAgICAvLyDjg63jg7zjg4nlrozkuoZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8g6Kqt44G/6L6844G/XG4gICAgICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpXG4gICAgICAgICAgLmdldFRleHR1cmVNYW5hZ2VyKClcbiAgICAgICAgICAuY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKHRleHR1cmVQYXRoLCB1c2VQcmVtdWx0aXBseSwgb25Mb2FkKTtcbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldElzUHJlbXVsdGlwbGllZEFscGhhKHVzZVByZW11bHRpcGx5KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFRleHR1cmU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOCkuWGjeani+evieOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbG9hZFJlbmRlcmVyKCk6IHZvaWQge1xuICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKCk7XG4gICAgdGhpcy5zZXR1cFRleHR1cmVzKCk7XG4gIH1cblxuICAvKipcbiAgICog5pu05pawXG4gICAqL1xuXG5cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc3RhdGUgIT0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cCkgcmV0dXJuO1xuXG4gICAgY29uc3QgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyID0gTEFwcFBhbC5nZXREZWx0YVRpbWUoKTtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcblxuICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICB0aGlzLl9kcmFnWCA9IHRoaXMuX2RyYWdNYW5hZ2VyLmdldFgoKTtcbiAgICB0aGlzLl9kcmFnWSA9IHRoaXMuX2RyYWdNYW5hZ2VyLmdldFkoKTtcblxuICAgIC8vIOODouODvOOCt+ODp+ODs+OBq+OCiOOCi+ODkeODqeODoeODvOOCv+abtOaWsOOBruacieeEoVxuICAgIGxldCBtb3Rpb25VcGRhdGVkID0gZmFsc2U7XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdGhpcy5fbW9kZWwubG9hZFBhcmFtZXRlcnMoKTsgLy8g5YmN5Zue44K744O844OW44GV44KM44Gf54q25oWL44KS44Ot44O844OJXG4gICAgaWYgKHRoaXMuX21vdGlvbk1hbmFnZXIuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgYzjgarjgYTloLTlkIjjgIHlvoXmqZ/jg6Ljg7zjgrfjg6fjg7Pjga7kuK3jgYvjgonjg6njg7Pjg4Djg6Djgaflho3nlJ/jgZnjgotcbiAgICAgIHRoaXMuc3RhcnRSYW5kb21Nb3Rpb24oXG4gICAgICAgIExBcHBEZWZpbmUuTW90aW9uR3JvdXBJZGxlLFxuICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5SWRsZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW90aW9uVXBkYXRlZCA9IHRoaXMuX21vdGlvbk1hbmFnZXIudXBkYXRlTW90aW9uKFxuICAgICAgICB0aGlzLl9tb2RlbCxcbiAgICAgICAgZGVsdGFUaW1lU2Vjb25kc1xuICAgICAgKTsgLy8g44Oi44O844K344On44Oz44KS5pu05pawXG4gICAgfVxuICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7IC8vIOeKtuaFi+OCkuS/neWtmFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8vIOOBvuOBsOOBn+OBjVxuICAgIGlmICghbW90aW9uVXBkYXRlZCkge1xuICAgICAgaWYgKHRoaXMuX2V5ZUJsaW5rICE9IG51bGwpIHtcbiAgICAgICAgLy8g44Oh44Kk44Oz44Oi44O844K344On44Oz44Gu5pu05paw44GM44Gq44GE44Go44GNXG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rLnVwZGF0ZVBhcmFtZXRlcnModGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpOyAvLyDnm67jg5Hjg4FcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIudXBkYXRlTW90aW9uKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTsgLy8g6KGo5oOF44Gn44OR44Op44Oh44O844K/5pu05paw77yI55u45a++5aSJ5YyW77yJXG4gICAgfVxuXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL5aSJ5YyWXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL6aGU44Gu5ZCR44GN44Gu6Kq/5pW0XG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1BbmdsZVgsIHRoaXMuX2RyYWdYICogMzApOyAvLyAtMzDjgYvjgokzMOOBruWApOOCkuWKoOOBiOOCi1xuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9pZFBhcmFtQW5nbGVZLCB0aGlzLl9kcmFnWSAqIDMwKTtcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICB0aGlzLl9pZFBhcmFtQW5nbGVaLFxuICAgICAgdGhpcy5fZHJhZ1ggKiB0aGlzLl9kcmFnWSAqIC0zMFxuICAgICk7XG5cbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovkvZPjga7lkJHjgY3jga7oqr/mlbRcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICB0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCxcbiAgICAgIHRoaXMuX2RyYWdYICogMTBcbiAgICApOyAvLyAtMTDjgYvjgokxMOOBruWApOOCkuWKoOOBiOOCi1xuXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL55uu44Gu5ZCR44GN44Gu6Kq/5pW0XG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1FeWVCYWxsWCwgdGhpcy5fZHJhZ1gpOyAvLyAtMeOBi+OCiTHjga7lgKTjgpLliqDjgYjjgotcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUV5ZUJhbGxZLCB0aGlzLl9kcmFnWSk7XG5cbiAgICAvLyDlkbzlkLjjgarjgalcbiAgICBpZiAodGhpcy5fYnJlYXRoICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2JyZWF0aC51cGRhdGVQYXJhbWV0ZXJzKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICB9XG5cbiAgICAvLyDniannkIbmvJTnrpfjga7oqK3lrppcbiAgICBpZiAodGhpcy5fcGh5c2ljcyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9waHlzaWNzLmV2YWx1YXRlKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICB9XG5cbiAgICAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jga7oqK3lrppcbiAgICBpZiAodGhpcy5fbGlwc3luYykge1xuICAgICAgbGV0IHZhbHVlID0gMC4wOyAvLyDjg6rjgqLjg6vjgr/jgqTjg6Djgafjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLooYzjgYbloLTlkIjjgIHjgrfjgrnjg4bjg6DjgYvjgonpn7Pph4/jgpLlj5blvpfjgZfjgabjgIEwfjHjga7nr4Tlm7LjgaflgKTjgpLlhaXlipvjgZfjgb7jgZnjgIJcblxuICAgICAgdGhpcy5fd2F2RmlsZUhhbmRsZXIudXBkYXRlKGRlbHRhVGltZVNlY29uZHMpO1xuICAgICAgdmFsdWUgPSB0aGlzLl93YXZGaWxlSGFuZGxlci5nZXRSbXMoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saXBTeW5jSWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9saXBTeW5jSWRzLmF0KGkpLCB2YWx1ZSwgMC44KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg53jg7zjgrrjga7oqK3lrppcbiAgICBpZiAodGhpcy5fcG9zZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9wb3NlLnVwZGF0ZVBhcmFtZXRlcnModGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpO1xuICAgIH1cblxuICAgIGNvbnN0IGF1ZGlvOiBhbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndm9pY2UnKTtcbiAgICBpZiAoYXVkaW8uc3JjICE9PSB0aGlzLl9hdWRpb1NyYykge1xuICAgICAgdGhpcy5fYXVkaW9TcmMgPSBhdWRpby5zcmM7XG4gICAgICBhdWRpby5wbGF5KCk7XG4gICAgfVxuICAgIHRoaXMuX21vZGVsLnVwZGF0ZSgpO1xuXG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu5YaN55Sf44KS6ZaL5aeL44GZ44KLXG4gICAqIEBwYXJhbSBncm91cCDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIG5vIOOCsOODq+ODvOODl+WGheOBrueVquWPt1xuICAgKiBAcGFyYW0gcHJpb3JpdHkg5YSq5YWI5bqmXG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDplovlp4vjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjgpLov5TjgZnjgILlgIvliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/jgYvlkKbjgYvjgpLliKTlrprjgZnjgotpc0ZpbmlzaGVkKCnjga7lvJXmlbDjgafkvb/nlKjjgZnjgovjgILplovlp4vjgafjgY3jgarjgYTmmYLjga9bLTFdXG4gICAqL1xuICBwdWJsaWMgc3RhcnRNb3Rpb24oXG4gICAgZ3JvdXA6IHN0cmluZyxcbiAgICBubzogbnVtYmVyLFxuICAgIHByaW9yaXR5OiBudW1iZXIsXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuXG4gICAgaWYgKHByaW9yaXR5ID09IExBcHBEZWZpbmUuUHJpb3JpdHlGb3JjZSkge1xuICAgICAgdGhpcy5fbW90aW9uTWFuYWdlci5zZXRSZXNlcnZlUHJpb3JpdHkocHJpb3JpdHkpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuX21vdGlvbk1hbmFnZXIucmVzZXJ2ZU1vdGlvbihwcmlvcml0eSkpIHtcbiAgICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXCJbQVBQXWNhbid0IHN0YXJ0IG1vdGlvbi5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtb3Rpb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cCwgbm8pO1xuXG4gICAgLy8gZXgpIGlkbGVfMFxuICAgIGNvbnN0IG5hbWUgPSBgJHtncm91cH1fJHtub31gO1xuICAgIGxldCBtb3Rpb246IEN1YmlzbU1vdGlvbiA9IHRoaXMuX21vdGlvbnMuZ2V0VmFsdWUobmFtZSkgYXMgQ3ViaXNtTW90aW9uO1xuICAgIGxldCBhdXRvRGVsZXRlID0gZmFsc2U7XG5cbiAgICBpZiAobW90aW9uID09IG51bGwpIHtcbiAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke21vdGlvbkZpbGVOYW1lfWApXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICBtb3Rpb24gPSB0aGlzLmxvYWRNb3Rpb24oXG4gICAgICAgICAgICBhcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXJcbiAgICAgICAgICApO1xuICAgICAgICAgIGxldCBmYWRlVGltZTogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShcbiAgICAgICAgICAgIGdyb3VwLFxuICAgICAgICAgICAgbm9cbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgbW90aW9uLnNldEZhZGVJblRpbWUoZmFkZVRpbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZhZGVUaW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXAsIG5vKTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XG4gICAgICAgICAgICBtb3Rpb24uc2V0RmFkZU91dFRpbWUoZmFkZVRpbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vdGlvbi5zZXRFZmZlY3RJZHModGhpcy5fZXllQmxpbmtJZHMsIHRoaXMuX2xpcFN5bmNJZHMpO1xuICAgICAgICAgIGF1dG9EZWxldGUgPSB0cnVlOyAvLyDntYLkuobmmYLjgavjg6Hjg6Ljg6rjgYvjgonliYrpmaRcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdGlvbi5zZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIob25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8vdm9pY2VcbiAgICBjb25zdCB2b2ljZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKGdyb3VwLCBubyk7XG4gICAgaWYgKHZvaWNlLmxvY2FsZUNvbXBhcmUoJycpICE9IDApIHtcbiAgICAgIGxldCBwYXRoID0gdm9pY2U7XG4gICAgICBwYXRoID0gdGhpcy5fbW9kZWxIb21lRGlyICsgcGF0aDtcbiAgICAgIHRoaXMuX3dhdkZpbGVIYW5kbGVyLnN0YXJ0KHBhdGgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXXN0YXJ0IG1vdGlvbjogWyR7Z3JvdXB9XyR7bm99YCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0YXJ0TW90aW9uUHJpb3JpdHkoXG4gICAgICBtb3Rpb24sXG4gICAgICBhdXRvRGVsZXRlLFxuICAgICAgcHJpb3JpdHlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODqeODs+ODgOODoOOBq+mBuOOBsOOCjOOBn+ODouODvOOCt+ODp+ODs+OBruWGjeeUn+OCkumWi+Wni+OBmeOCi+OAglxuICAgKiBAcGFyYW0gZ3JvdXAg44Oi44O844K344On44Oz44Kw44Or44O844OX5ZCNXG4gICAqIEBwYXJhbSBwcmlvcml0eSDlhKrlhYjluqZcbiAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huaZguOBq+WRvOOBs+WHuuOBleOCjOOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgKiBAcmV0dXJuIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi2lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr1stMV1cbiAgICovXG4gIHB1YmxpYyBzdGFydFJhbmRvbU1vdGlvbihcbiAgICBncm91cDogc3RyaW5nLFxuICAgIHByaW9yaXR5OiBudW1iZXIsXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXApID09IDApIHtcbiAgICAgIHJldHVybiBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG5vOiBudW1iZXIgPSBNYXRoLmZsb29yKFxuICAgICAgTWF0aC5yYW5kb20oKSAqIHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cClcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RhcnRNb3Rpb24oZ3JvdXAsIG5vLCBwcmlvcml0eSwgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ihqOaDheODouODvOOCt+ODp+ODs+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbklkIOihqOaDheODouODvOOCt+ODp+ODs+OBrklEXG4gICAqL1xuICBwdWJsaWMgc2V0RXhwcmVzc2lvbihleHByZXNzaW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IHRoaXMuX2V4cHJlc3Npb25zLmdldFZhbHVlKGV4cHJlc3Npb25JZCk7XG5cbiAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0FQUF1leHByZXNzaW9uOiBbJHtleHByZXNzaW9uSWR9XWApO1xuICAgIH1cblxuICAgIGlmIChtb3Rpb24gIT0gbnVsbCkge1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIuc3RhcnRNb3Rpb25Qcmlvcml0eShcbiAgICAgICAgbW90aW9uLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgTEFwcERlZmluZS5Qcmlvcml0eUZvcmNlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXWV4cHJlc3Npb25bJHtleHByZXNzaW9uSWR9XSBpcyBudWxsYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODqeODs+ODgOODoOOBq+mBuOOBsOOCjOOBn+ihqOaDheODouODvOOCt+ODp+ODs+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldFJhbmRvbUV4cHJlc3Npb24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgbm86IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuX2V4cHJlc3Npb25zLmdldFNpemUoKSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2V4cHJlc3Npb25zLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBpZiAoaSA9PSBubykge1xuICAgICAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSB0aGlzLl9leHByZXNzaW9ucy5fa2V5VmFsdWVzW2ldLmZpcnN0O1xuICAgICAgICB0aGlzLnNldEV4cHJlc3Npb24obmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44Gu55m654Gr44KS5Y+X44GR5Y+W44KLXG4gICAqL1xuICBwdWJsaWMgbW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlOiBjc21TdHJpbmcpOiB2b2lkIHtcbiAgICBDdWJpc21Mb2dJbmZvKCd7MH0gaXMgZmlyZWQgb24gTEFwcE1vZGVsISEnLCBldmVudFZhbHVlLnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumuODhuOCueODiFxuICAgKiDmjIflrprvvKnvvKTjga7poILngrnjg6rjgrnjg4jjgYvjgonnn6nlvaLjgpLoqIjnrpfjgZfjgIHluqfmqJnjgpLjgYznn6nlvaLnr4Tlm7LlhoXjgYvliKTlrprjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGhpdEFyZW5hTmFtZSAg5b2T44Gf44KK5Yik5a6a44KS44OG44K544OI44GZ44KL5a++6LGh44GuSURcbiAgICogQHBhcmFtIHggICAgICAgICAgICAg5Yik5a6a44KS6KGM44GGWOW6p+aomVxuICAgKiBAcGFyYW0geSAgICAgICAgICAgICDliKTlrprjgpLooYzjgYZZ5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgaGl0VGVzdChoaXRBcmVuYU5hbWU6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAvLyDpgI/mmI7mmYLjga/lvZPjgZ/jgorliKTlrprnhKHjgZfjgIJcbiAgICBpZiAodGhpcy5fb3BhY2l0eSA8IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFzQ291bnQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRIaXRBcmVhTmFtZShpKSA9PSBoaXRBcmVuYU5hbWUpIHtcbiAgICAgICAgY29uc3QgZHJhd0lkOiBDdWJpc21JZEhhbmRsZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRIaXRBcmVhSWQoaSk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzSGl0KGRyYXdJZCwgeCwgeSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuOCsOODq+ODvOODl+WQjeOBi+OCieS4gOaLrOOBp+ODreODvOODieOBmeOCi+OAglxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jga7lkI3liY3jga/lhoXpg6jjgadNb2RlbFNldHRpbmfjgYvjgonlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGdyb3VwIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OBruOCsOODq+ODvOODl+WQjVxuICAgKi9cbiAgcHVibGljIHByZUxvYWRNb3Rpb25Hcm91cChncm91cDogc3RyaW5nKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXApOyBpKyspIHtcbiAgICAgIGNvbnN0IG1vdGlvbkZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZpbGVOYW1lKGdyb3VwLCBpKTtcblxuICAgICAgLy8gZXgpIGlkbGVfMFxuICAgICAgY29uc3QgbmFtZSA9IGAke2dyb3VwfV8ke2l9YDtcbiAgICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXG4gICAgICAgICAgYFtBUFBdbG9hZCBtb3Rpb246ICR7bW90aW9uRmlsZU5hbWV9ID0+IFske25hbWV9XWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7bW90aW9uRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIGNvbnN0IHRtcE1vdGlvbjogQ3ViaXNtTW90aW9uID0gdGhpcy5sb2FkTW90aW9uKFxuICAgICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBsZXQgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKGdyb3VwLCBpKTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XG4gICAgICAgICAgICB0bXBNb3Rpb24uc2V0RmFkZUluVGltZShmYWRlVGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShncm91cCwgaSk7XG4gICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgdG1wTW90aW9uLnNldEZhZGVPdXRUaW1lKGZhZGVUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG1wTW90aW9uLnNldEVmZmVjdElkcyh0aGlzLl9leWVCbGlua0lkcywgdGhpcy5fbGlwU3luY0lkcyk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZSh0aGlzLl9tb3Rpb25zLmdldFZhbHVlKG5hbWUpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25zLnNldFZhbHVlKG5hbWUsIHRtcE1vdGlvbik7XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25Db3VudCsrO1xuICAgICAgICAgIGlmICh0aGlzLl9tb3Rpb25Db3VudCA+PSB0aGlzLl9hbGxNb3Rpb25Db3VudCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkVGV4dHVyZTtcblxuICAgICAgICAgICAgLy8g5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBUZXh0dXJlcygpO1xuICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnN0YXJ0VXAoZ2wpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOBmeOBueOBpuOBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VNb3Rpb25zKCk6IHZvaWQge1xuICAgIHRoaXMuX21vdGlvbnMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajjgabjga7ooajmg4Xjg4fjg7zjgr/jgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlRXhwcmVzc2lvbnMoKTogdm9pZCB7XG4gICAgdGhpcy5fZXhwcmVzc2lvbnMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovlh6bnkIbjgILjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovnqbrplpPjga5WaWV3LVByb2plY3Rpb27ooYzliJfjgpLmuKHjgZnjgIJcbiAgICovXG4gIHB1YmxpYyBkb0RyYXcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHJldHVybjtcblxuICAgIC8vIOOCreODo+ODs+ODkOOCueOCteOCpOOCuuOCkua4oeOBmVxuICAgIGNvbnN0IHZpZXdwb3J0OiBudW1iZXJbXSA9IFswLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHRdO1xuXG4gICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldFJlbmRlclN0YXRlKGZyYW1lQnVmZmVyLCB2aWV3cG9ydCk7XG4gICAgdGhpcy5nZXRSZW5kZXJlcigpLmRyYXdNb2RlbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+WHpueQhuOAguODouODh+ODq+OCkuaPj+eUu+OBmeOCi+epuumWk+OBrlZpZXctUHJvamVjdGlvbuihjOWIl+OCkua4oeOBmeOAglxuICAgKi9cbiAgcHVibGljIGRyYXcobWF0cml4OiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g5ZCE6Kqt44G/6L6844G/57WC5LqG5b6MXG4gICAgaWYgKHRoaXMuX3N0YXRlID09IExvYWRTdGVwLkNvbXBsZXRlU2V0dXApIHtcbiAgICAgIG1hdHJpeC5tdWx0aXBseUJ5TWF0cml4KHRoaXMuX21vZGVsTWF0cml4KTtcblxuICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldE12cE1hdHJpeChtYXRyaXgpO1xuXG4gICAgICB0aGlzLmRvRHJhdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fbW9kZWxTZXR0aW5nID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbEhvbWVEaXIgPSBudWxsO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcblxuICAgIHRoaXMuX2V5ZUJsaW5rSWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcbiAgICB0aGlzLl9saXBTeW5jSWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcblxuICAgIHRoaXMuX21vdGlvbnMgPSBuZXcgY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj4oKTtcbiAgICB0aGlzLl9leHByZXNzaW9ucyA9IG5ldyBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPigpO1xuXG4gICAgdGhpcy5faGl0QXJlYSA9IG5ldyBjc21WZWN0b3I8Y3NtUmVjdD4oKTtcbiAgICB0aGlzLl91c2VyQXJlYSA9IG5ldyBjc21WZWN0b3I8Y3NtUmVjdD4oKTtcblxuICAgIHRoaXMuX2lkUGFyYW1BbmdsZVggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVhcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1BbmdsZVkgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVlcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1BbmdsZVogPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVpcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1FeWVCYWxsWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxYXG4gICAgKTtcbiAgICB0aGlzLl9pZFBhcmFtRXllQmFsbFkgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWVxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUJvZHlBbmdsZVggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Cb2R5QW5nbGVYXG4gICAgKTtcblxuICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZEFzc2V0cztcbiAgICB0aGlzLl9leHByZXNzaW9uQ291bnQgPSAwO1xuICAgIHRoaXMuX3RleHR1cmVDb3VudCA9IDA7XG4gICAgdGhpcy5fbW90aW9uQ291bnQgPSAwO1xuICAgIHRoaXMuX2FsbE1vdGlvbkNvdW50ID0gMDtcbiAgICB0aGlzLl93YXZGaWxlSGFuZGxlciA9IG5ldyBMQXBwV2F2RmlsZUhhbmRsZXIoKTtcbiAgfVxuXG4gIF9tb2RlbFNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmc7IC8vIOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsOaDheWgsVxuICBfbW9kZWxIb21lRGlyOiBzdHJpbmc7IC8vIOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsOOBjOe9ruOBi+OCjOOBn+ODh+OCo+ODrOOCr+ODiOODqlxuICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG5cbiAgX2V5ZUJsaW5rSWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/nnqzjgY3mqZ/og73nlKjjg5Hjg6njg6Hjg7zjgr9JRFxuICBfbGlwU3luY0lkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf44Oq44OD44OX44K344Oz44Kv5qmf6IO955So44OR44Op44Oh44O844K/SURcblxuICBfbW90aW9uczogY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj47IC8vIOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs+OBruODquOCueODiFxuICBfZXhwcmVzc2lvbnM6IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+OyAvLyDoqq3jgb/ovrzjgb7jgozjgabjgYTjgovooajmg4Xjga7jg6rjgrnjg4hcblxuICBfaGl0QXJlYTogY3NtVmVjdG9yPGNzbVJlY3Q+O1xuICBfdXNlckFyZWE6IGNzbVZlY3Rvcjxjc21SZWN0PjtcblxuICBfaWRQYXJhbUFuZ2xlWDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUFuZ2xlWFxuICBfaWRQYXJhbUFuZ2xlWTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUFuZ2xlWVxuICBfaWRQYXJhbUFuZ2xlWjogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUFuZ2xlWlxuICBfaWRQYXJhbUV5ZUJhbGxYOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtRXllQmFsbFhcbiAgX2lkUGFyYW1FeWVCYWxsWTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUV5ZUJBbGxZXG4gIF9pZFBhcmFtQm9keUFuZ2xlWDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUJvZHlBbmdsZVhcblxuICBfc3RhdGU6IG51bWJlcjsgLy8g54++5Zyo44Gu44K544OG44O844K/44K5566h55CG55SoXG4gIF9leHByZXNzaW9uQ291bnQ6IG51bWJlcjsgLy8g6KGo5oOF44OH44O844K/44Kr44Km44Oz44OIXG4gIF90ZXh0dXJlQ291bnQ6IG51bWJlcjsgLy8g44OG44Kv44K544OB44Oj44Kr44Km44Oz44OIXG4gIF9tb3Rpb25Db3VudDogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgqvjgqbjg7Pjg4hcbiAgX2FsbE1vdGlvbkNvdW50OiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+e3j+aVsFxuICBfd2F2RmlsZUhhbmRsZXI6IExBcHBXYXZGaWxlSGFuZGxlcjsgLy93YXbjg5XjgqHjgqTjg6vjg4/jg7Pjg4njg6lcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICog44OX44Op44OD44OI44OV44Kp44O844Og5L6d5a2Y5qmf6IO944KS5oq96LGh5YyW44GZ44KLIEN1YmlzbSBQbGF0Zm9ybSBBYnN0cmFjdGlvbiBMYXllci5cbiAqXG4gKiDjg5XjgqHjgqTjg6voqq3jgb/ovrzjgb/jgoTmmYLliLvlj5blvpfnrYnjga7jg5fjg6njg4Pjg4jjg5Xjgqnjg7zjg6Djgavkvp3lrZjjgZnjgovplqLmlbDjgpLjgb7jgajjgoHjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBQYWwge1xuICAvKipcbiAgICog44OV44Kh44Kk44Or44KS44OQ44Kk44OI44OH44O844K/44Go44GX44Gm6Kqt44G/44GT44KAXG4gICAqXG4gICAqIEBwYXJhbSBmaWxlUGF0aCDoqq3jgb/ovrzjgb/lr77osaHjg5XjgqHjgqTjg6vjga7jg5HjgrlcbiAgICogQHJldHVyblxuICAgKiB7XG4gICAqICAgICAgYnVmZmVyLCAgIOiqreOBv+i+vOOCk+OBoOODkOOCpOODiOODh+ODvOOCv1xuICAgKiAgICAgIHNpemUgICAgICAgIOODleOCoeOCpOODq+OCteOCpOOCulxuICAgKiB9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGxvYWRGaWxlQXNCeXRlcyhcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiAoYXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpID0+IHZvaWRcbiAgKTogdm9pZCB7XG4gICAgZmV0Y2goZmlsZVBhdGgpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4gY2FsbGJhY2soYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg6vjgr/mmYLplpPvvIjliY3lm57jg5Xjg6zjg7zjg6Djgajjga7lt67liIbvvInjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg6vjgr/mmYLplpNbbXNdXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldERlbHRhVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNfZGVsdGFUaW1lO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB1cGRhdGVUaW1lKCk6IHZvaWQge1xuICAgIHRoaXMuc19jdXJyZW50RnJhbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuc19kZWx0YVRpbWUgPSAodGhpcy5zX2N1cnJlbnRGcmFtZSAtIHRoaXMuc19sYXN0RnJhbWUpIC8gMTAwMDtcbiAgICB0aGlzLnNfbGFzdEZyYW1lID0gdGhpcy5zX2N1cnJlbnRGcmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Hjg4Pjgrvjg7zjgrjjgpLlh7rlipvjgZnjgotcbiAgICogQHBhcmFtIG1lc3NhZ2Ug5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHByaW50TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgfVxuXG4gIHN0YXRpYyBsYXN0VXBkYXRlID0gRGF0ZS5ub3coKTtcblxuICBzdGF0aWMgc19jdXJyZW50RnJhbWUgPSAwLjA7XG4gIHN0YXRpYyBzX2xhc3RGcmFtZSA9IDAuMDtcbiAgc3RhdGljIHNfZGVsdGFUaW1lID0gMC4wO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY2FudmFzLCBnbCB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcblxuLyoqXG4gKiDjgrnjg5fjg6njgqTjg4jjgpLlrp/oo4XjgZnjgovjgq/jg6njgrlcbiAqXG4gKiDjg4bjgq/jgrnjg4Hjg6PvvKnvvKTjgIFSZWN044Gu566h55CGXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwU3ByaXRlIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0geCAgICAgICAgICAgIHjluqfmqJlcbiAgICogQHBhcmFtIHkgICAgICAgICAgICB55bqn5qiZXG4gICAqIEBwYXJhbSB3aWR0aCAgICAgICAg5qiq5bmFXG4gICAqIEBwYXJhbSBoZWlnaHQgICAgICAg6auY44GVXG4gICAqIEBwYXJhbSB0ZXh0dXJlSWQgICAg44OG44Kv44K544OB44OjXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgdGV4dHVyZUlkOiBXZWJHTFRleHR1cmVcbiAgKSB7XG4gICAgdGhpcy5fcmVjdCA9IG5ldyBSZWN0KCk7XG4gICAgdGhpcy5fcmVjdC5sZWZ0ID0geCAtIHdpZHRoICogMC41O1xuICAgIHRoaXMuX3JlY3QucmlnaHQgPSB4ICsgd2lkdGggKiAwLjU7XG4gICAgdGhpcy5fcmVjdC51cCA9IHkgKyBoZWlnaHQgKiAwLjU7XG4gICAgdGhpcy5fcmVjdC5kb3duID0geSAtIGhlaWdodCAqIDAuNTtcbiAgICB0aGlzLl90ZXh0dXJlID0gdGV4dHVyZUlkO1xuICAgIHRoaXMuX3ZlcnRleEJ1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5fdXZCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMuX2luZGV4QnVmZmVyID0gbnVsbDtcblxuICAgIHRoaXMuX3Bvc2l0aW9uTG9jYXRpb24gPSBudWxsO1xuICAgIHRoaXMuX3V2TG9jYXRpb24gPSBudWxsO1xuICAgIHRoaXMuX3RleHR1cmVMb2NhdGlvbiA9IG51bGw7XG5cbiAgICB0aGlzLl9wb3NpdGlvbkFycmF5ID0gbnVsbDtcbiAgICB0aGlzLl91dkFycmF5ID0gbnVsbDtcbiAgICB0aGlzLl9pbmRleEFycmF5ID0gbnVsbDtcblxuICAgIHRoaXMuX2ZpcnN0RHJhdyA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9yZWN0ID0gbnVsbDtcblxuICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy5fdGV4dHVyZSk7XG4gICAgdGhpcy5fdGV4dHVyZSA9IG51bGw7XG5cbiAgICBnbC5kZWxldGVCdWZmZXIodGhpcy5fdXZCdWZmZXIpO1xuICAgIHRoaXMuX3V2QnVmZmVyID0gbnVsbDtcblxuICAgIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl92ZXJ0ZXhCdWZmZXIpO1xuICAgIHRoaXMuX3ZlcnRleEJ1ZmZlciA9IG51bGw7XG5cbiAgICBnbC5kZWxldGVCdWZmZXIodGhpcy5faW5kZXhCdWZmZXIpO1xuICAgIHRoaXMuX2luZGV4QnVmZmVyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6PjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRUZXh0dXJlKCk6IFdlYkdMVGV4dHVyZSB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHR1cmU7XG4gIH1cblxuICAvKipcbiAgICog5o+P55S744GZ44KL44CCXG4gICAqIEBwYXJhbSBwcm9ncmFtSWQg44K344Kn44O844OA44O844OX44Ot44Kw44Op44OgXG4gICAqIEBwYXJhbSBjYW52YXMg5o+P55S744GZ44KL44Kt44Oj44Oz44OR44K55oOF5aCxXG4gICAqL1xuICBwdWJsaWMgcmVuZGVyKHByb2dyYW1JZDogV2ViR0xQcm9ncmFtKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3RleHR1cmUgPT0gbnVsbCkge1xuICAgICAgLy8g44Ot44O844OJ44GM5a6M5LqG44GX44Gm44GE44Gq44GEXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g5Yid5Zue5o+P55S75pmCXG4gICAgaWYgKHRoaXMuX2ZpcnN0RHJhdykge1xuICAgICAgLy8g5L2V55Wq55uu44GuYXR0cmlidXRl5aSJ5pWw44GL5Y+W5b6XXG4gICAgICB0aGlzLl9wb3NpdGlvbkxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbUlkLCAncG9zaXRpb24nKTtcbiAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuX3Bvc2l0aW9uTG9jYXRpb24pO1xuXG4gICAgICB0aGlzLl91dkxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbUlkLCAndXYnKTtcbiAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuX3V2TG9jYXRpb24pO1xuXG4gICAgICAvLyDkvZXnlarnm67jga51bmlmb3Jt5aSJ5pWw44GL5Y+W5b6XXG4gICAgICB0aGlzLl90ZXh0dXJlTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbUlkLCAndGV4dHVyZScpO1xuXG4gICAgICAvLyB1bmlmb3Jt5bGe5oCn44Gu55m76YyyXG4gICAgICBnbC51bmlmb3JtMWkodGhpcy5fdGV4dHVyZUxvY2F0aW9uLCAwKTtcblxuICAgICAgLy8gdXbjg5Djg4Pjg5XjgqHjgIHluqfmqJnliJ3mnJ/ljJZcbiAgICAgIHtcbiAgICAgICAgdGhpcy5fdXZBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDEuMCwgMS4wXG4gICAgICAgIF0pO1xuXG4gICAgICAgIC8vIHV244OQ44OD44OV44Kh44KS5L2c5oiQXG4gICAgICAgIHRoaXMuX3V2QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIOmggueCueODkOODg+ODleOCoeOAgeW6p+aomeWIneacn+WMllxuICAgICAge1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcblxuICAgICAgICAvLyDpoILngrnjg4fjg7zjgr9cbiAgICAgICAgdGhpcy5fcG9zaXRpb25BcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgICh0aGlzLl9yZWN0LnJpZ2h0IC0gbWF4V2lkdGggKiAwLjUpIC8gKG1heFdpZHRoICogMC41KSxcbiAgICAgICAgICAodGhpcy5fcmVjdC51cCAtIG1heEhlaWdodCAqIDAuNSkgLyAobWF4SGVpZ2h0ICogMC41KSxcbiAgICAgICAgICAodGhpcy5fcmVjdC5sZWZ0IC0gbWF4V2lkdGggKiAwLjUpIC8gKG1heFdpZHRoICogMC41KSxcbiAgICAgICAgICAodGhpcy5fcmVjdC51cCAtIG1heEhlaWdodCAqIDAuNSkgLyAobWF4SGVpZ2h0ICogMC41KSxcbiAgICAgICAgICAodGhpcy5fcmVjdC5sZWZ0IC0gbWF4V2lkdGggKiAwLjUpIC8gKG1heFdpZHRoICogMC41KSxcbiAgICAgICAgICAodGhpcy5fcmVjdC5kb3duIC0gbWF4SGVpZ2h0ICogMC41KSAvIChtYXhIZWlnaHQgKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LnJpZ2h0IC0gbWF4V2lkdGggKiAwLjUpIC8gKG1heFdpZHRoICogMC41KSxcbiAgICAgICAgICAodGhpcy5fcmVjdC5kb3duIC0gbWF4SGVpZ2h0ICogMC41KSAvIChtYXhIZWlnaHQgKiAwLjUpXG4gICAgICAgIF0pO1xuXG4gICAgICAgIC8vIOmggueCueODkOODg+ODleOCoeOCkuS9nOaIkFxuICAgICAgICB0aGlzLl92ZXJ0ZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cblxuICAgICAgLy8g6aCC54K544Kk44Oz44OH44OD44Kv44K544OQ44OD44OV44Kh44CB5Yid5pyf5YyWXG4gICAgICB7XG4gICAgICAgIC8vIOOCpOODs+ODh+ODg+OCr+OCueODh+ODvOOCv1xuICAgICAgICB0aGlzLl9pbmRleEFycmF5ID0gbmV3IFVpbnQxNkFycmF5KFswLCAxLCAyLCAzLCAyLCAwXSk7XG5cbiAgICAgICAgLy8g44Kk44Oz44OH44OD44Kv44K544OQ44OD44OV44Kh44KS5L2c5oiQXG4gICAgICAgIHRoaXMuX2luZGV4QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2ZpcnN0RHJhdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFVW5bqn5qiZ55m76YyyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX3V2QnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdXZBcnJheSwgZ2wuU1RBVElDX0RSQVcpO1xuXG4gICAgLy8gYXR0cmlidXRl5bGe5oCn44KS55m76YyyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLl91dkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgLy8g6aCC54K55bqn5qiZ44KS55m76YyyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX3ZlcnRleEJ1ZmZlcik7XG4gICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX3Bvc2l0aW9uQXJyYXksIGdsLlNUQVRJQ19EUkFXKTtcblxuICAgIC8vIGF0dHJpYnV0ZeWxnuaAp+OCkueZu+mMslxuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5fcG9zaXRpb25Mb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblxuICAgIC8vIOmggueCueOCpOODs+ODh+ODg+OCr+OCueOCkuS9nOaIkFxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuX2luZGV4QnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9pbmRleEFycmF5LCBnbC5EWU5BTUlDX0RSQVcpO1xuXG4gICAgLy8g44Oi44OH44Or44Gu5o+P55S7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XG4gICAgZ2wuZHJhd0VsZW1lbnRzKFxuICAgICAgZ2wuVFJJQU5HTEVTLFxuICAgICAgdGhpcy5faW5kZXhBcnJheS5sZW5ndGgsXG4gICAgICBnbC5VTlNJR05FRF9TSE9SVCxcbiAgICAgIDBcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumlxuICAgKiBAcGFyYW0gcG9pbnRYIHjluqfmqJlcbiAgICogQHBhcmFtIHBvaW50WSB55bqn5qiZXG4gICAqL1xuICBwdWJsaWMgaXNIaXQocG9pbnRYOiBudW1iZXIsIHBvaW50WTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgLy8g55S76Z2i44K144Kk44K644KS5Y+W5b6X44GZ44KL44CCXG4gICAgY29uc3QgeyBoZWlnaHQgfSA9IGNhbnZhcztcblxuICAgIC8vIFnluqfmqJnjga/lpInmj5vjgZnjgovlv4XopoHjgYLjgopcbiAgICBjb25zdCB5ID0gaGVpZ2h0IC0gcG9pbnRZO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHBvaW50WCA+PSB0aGlzLl9yZWN0LmxlZnQgJiZcbiAgICAgIHBvaW50WCA8PSB0aGlzLl9yZWN0LnJpZ2h0ICYmXG4gICAgICB5IDw9IHRoaXMuX3JlY3QudXAgJiZcbiAgICAgIHkgPj0gdGhpcy5fcmVjdC5kb3duXG4gICAgKTtcbiAgfVxuXG4gIF90ZXh0dXJlOiBXZWJHTFRleHR1cmU7IC8vIOODhuOCr+OCueODgeODo1xuICBfdmVydGV4QnVmZmVyOiBXZWJHTEJ1ZmZlcjsgLy8g6aCC54K544OQ44OD44OV44KhXG4gIF91dkJ1ZmZlcjogV2ViR0xCdWZmZXI7IC8vIHV26aCC54K544OQ44OD44OV44KhXG4gIF9pbmRleEJ1ZmZlcjogV2ViR0xCdWZmZXI7IC8vIOmggueCueOCpOODs+ODh+ODg+OCr+OCueODkOODg+ODleOCoVxuICBfcmVjdDogUmVjdDsgLy8g55+p5b2iXG5cbiAgX3Bvc2l0aW9uTG9jYXRpb246IG51bWJlcjtcbiAgX3V2TG9jYXRpb246IG51bWJlcjtcbiAgX3RleHR1cmVMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG5cbiAgX3Bvc2l0aW9uQXJyYXk6IEZsb2F0MzJBcnJheTtcbiAgX3V2QXJyYXk6IEZsb2F0MzJBcnJheTtcbiAgX2luZGV4QXJyYXk6IFVpbnQxNkFycmF5O1xuXG4gIF9maXJzdERyYXc6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBSZWN0IHtcbiAgcHVibGljIGxlZnQ6IG51bWJlcjsgLy8g5bem6L66XG4gIHB1YmxpYyByaWdodDogbnVtYmVyOyAvLyDlj7PovrpcbiAgcHVibGljIHVwOiBudW1iZXI7IC8vIOS4iui+ulxuICBwdWJsaWMgZG93bjogbnVtYmVyOyAvLyDkuIvovrpcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yJztcblxuaW1wb3J0IHsgZ2wgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5cbi8qKlxuICog44OG44Kv44K544OB44Oj566h55CG44Kv44Op44K5XG4gKiDnlLvlg4/oqq3jgb/ovrzjgb/jgIHnrqHnkIbjgpLooYzjgYbjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBUZXh0dXJlTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3RleHR1cmVzID0gbmV3IGNzbVZlY3RvcjxUZXh0dXJlSW5mbz4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxUZXh0dXJlSW5mbz4gPSB0aGlzLl90ZXh0dXJlcy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX3RleHR1cmVzLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgZ2wuZGVsZXRlVGV4dHVyZShpdGUucHRyKCkuaWQpO1xuICAgIH1cbiAgICB0aGlzLl90ZXh0dXJlcyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP6Kqt44G/6L6844G/XG4gICAqXG4gICAqIEBwYXJhbSBmaWxlTmFtZSDoqq3jgb/ovrzjgoDnlLvlg4/jg5XjgqHjgqTjg6vjg5HjgrnlkI1cbiAgICogQHBhcmFtIHVzZVByZW11bHRpcGx5IFByZW11bHTlh6bnkIbjgpLmnInlirnjgavjgZnjgovjgYtcbiAgICogQHJldHVybiDnlLvlg4/mg4XloLHjgIHoqq3jgb/ovrzjgb/lpLHmlZfmmYLjga9udWxs44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKFxuICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgdXNlUHJlbXVsdGlwbHk6IGJvb2xlYW4sXG4gICAgY2FsbGJhY2s6ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pID0+IHZvaWRcbiAgKTogdm9pZCB7XG4gICAgLy8gc2VhcmNoIGxvYWRlZCB0ZXh0dXJlIGFscmVhZHlcbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8VGV4dHVyZUluZm8+ID0gdGhpcy5fdGV4dHVyZXMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl90ZXh0dXJlcy5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGlmIChcbiAgICAgICAgaXRlLnB0cigpLmZpbGVOYW1lID09IGZpbGVOYW1lICYmXG4gICAgICAgIGl0ZS5wdHIoKS51c2VQcmVtdWx0cGx5ID09IHVzZVByZW11bHRpcGx5XG4gICAgICApIHtcbiAgICAgICAgLy8gMuWbnuebruS7pemZjeOBr+OCreODo+ODg+OCt+ODpeOBjOS9v+eUqOOBleOCjOOCiyjlvoXjgaHmmYLplpPjgarjgZcpXG4gICAgICAgIC8vIFdlYktpdOOBp+OBr+WQjOOBmEltYWdl44Gub25sb2Fk44KS5YaN5bqm5ZG844G244Gr44Gv5YaN44Kk44Oz44K544K/44Oz44K544GM5b+F6KaBXG4gICAgICAgIC8vIOips+e0sO+8mmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MDI0MTgxXG4gICAgICAgIGl0ZS5wdHIoKS5pbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaXRlLnB0cigpLmltZy5vbmxvYWQgPSAoKTogdm9pZCA9PiBjYWxsYmFjayhpdGUucHRyKCkpO1xuICAgICAgICBpdGUucHRyKCkuaW1nLnNyYyA9IGZpbGVOYW1lO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g44OH44O844K/44Gu44Kq44Oz44Ot44O844OJ44KS44OI44Oq44Ks44O844Gr44GZ44KLXG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaW1nLm9ubG9hZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OCquODluOCuOOCp+OCr+ODiOOBruS9nOaIkFxuICAgICAgY29uc3QgdGV4OiBXZWJHTFRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OCkumBuOaKnlxuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4KTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44Gr44OU44Kv44K744Or44KS5pu444GN6L6844KAXG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICBnbC5URVhUVVJFX01JTl9GSUxURVIsXG4gICAgICAgIGdsLkxJTkVBUl9NSVBNQVBfTElORUFSXG4gICAgICApO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG5cbiAgICAgIC8vIFByZW11bHTlh6bnkIbjgpLooYzjgo/jgZvjgotcbiAgICAgIGlmICh1c2VQcmVtdWx0aXBseSkge1xuICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIDEpO1xuICAgICAgfVxuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgavjg5Tjgq/jgrvjg6vjgpLmm7jjgY3ovrzjgoBcbiAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgaW1nKTtcblxuICAgICAgLy8g44Of44OD44OX44Oe44OD44OX44KS55Sf5oiQXG4gICAgICBnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44KS44OQ44Kk44Oz44OJXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcblxuICAgICAgY29uc3QgdGV4dHVyZUluZm86IFRleHR1cmVJbmZvID0gbmV3IFRleHR1cmVJbmZvKCk7XG4gICAgICBpZiAodGV4dHVyZUluZm8gIT0gbnVsbCkge1xuICAgICAgICB0ZXh0dXJlSW5mby5maWxlTmFtZSA9IGZpbGVOYW1lO1xuICAgICAgICB0ZXh0dXJlSW5mby53aWR0aCA9IGltZy53aWR0aDtcbiAgICAgICAgdGV4dHVyZUluZm8uaGVpZ2h0ID0gaW1nLmhlaWdodDtcbiAgICAgICAgdGV4dHVyZUluZm8uaWQgPSB0ZXg7XG4gICAgICAgIHRleHR1cmVJbmZvLmltZyA9IGltZztcbiAgICAgICAgdGV4dHVyZUluZm8udXNlUHJlbXVsdHBseSA9IHVzZVByZW11bHRpcGx5O1xuICAgICAgICB0aGlzLl90ZXh0dXJlcy5wdXNoQmFjayh0ZXh0dXJlSW5mbyk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKHRleHR1cmVJbmZvKTtcbiAgICB9O1xuICAgIGltZy5zcmMgPSBmaWxlTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/jga7op6PmlL5cbiAgICpcbiAgICog6YWN5YiX44Gr5a2Y5Zyo44GZ44KL55S75YOP5YWo44Gm44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZVRleHR1cmVzKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGV4dHVyZXMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICB9XG5cbiAgICB0aGlzLl90ZXh0dXJlcy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDmjIflrprjgZfjgZ/jg4bjgq/jgrnjg4Hjg6Pjga7nlLvlg4/jgpLop6PmlL7jgZnjgovjgIJcbiAgICogQHBhcmFtIHRleHR1cmUg6Kej5pS+44GZ44KL44OG44Kv44K544OB44OjXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZVRleHR1cmVCeVRleHR1cmUodGV4dHVyZTogV2ViR0xUZXh0dXJlKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX3RleHR1cmVzLmF0KGkpLmlkICE9IHRleHR1cmUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnJlbW92ZShpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/jga7op6PmlL5cbiAgICpcbiAgICog5oyH5a6a44GX44Gf5ZCN5YmN44Gu55S75YOP44KS6Kej5pS+44GZ44KL44CCXG4gICAqIEBwYXJhbSBmaWxlTmFtZSDop6PmlL7jgZnjgovnlLvlg4/jg5XjgqHjgqTjg6vjg5HjgrnlkI1cbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZUJ5RmlsZVBhdGgoZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGV4dHVyZXMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl90ZXh0dXJlcy5hdChpKS5maWxlTmFtZSA9PSBmaWxlTmFtZSkge1xuICAgICAgICB0aGlzLl90ZXh0dXJlcy5zZXQoaSwgbnVsbCk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnJlbW92ZShpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3RleHR1cmVzOiBjc21WZWN0b3I8VGV4dHVyZUluZm8+O1xufVxuXG4vKipcbiAqIOeUu+WDj+aDheWgseani+mAoOS9k1xuICovXG5leHBvcnQgY2xhc3MgVGV4dHVyZUluZm8ge1xuICBpbWc6IEhUTUxJbWFnZUVsZW1lbnQ7IC8vIOeUu+WDj1xuICBpZDogV2ViR0xUZXh0dXJlID0gbnVsbDsgLy8g44OG44Kv44K544OB44OjXG4gIHdpZHRoID0gMDsgLy8g5qiq5bmFXG4gIGhlaWdodCA9IDA7IC8vIOmrmOOBlVxuICB1c2VQcmVtdWx0cGx5OiBib29sZWFuOyAvLyBQcmVtdWx05Yem55CG44KS5pyJ5Yq544Gr44GZ44KL44GLXG4gIGZpbGVOYW1lOiBzdHJpbmc7IC8vIOODleOCoeOCpOODq+WQjVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICdAZnJhbWV3b3JrL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtVmlld01hdHJpeCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc212aWV3bWF0cml4JztcblxuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xuaW1wb3J0IHsgY2FudmFzLCBnbCwgTEFwcERlbGVnYXRlIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuaW1wb3J0IHsgTEFwcExpdmUyRE1hbmFnZXIgfSBmcm9tICcuL2xhcHBsaXZlMmRtYW5hZ2VyJztcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xuaW1wb3J0IHsgTEFwcFNwcml0ZSB9IGZyb20gJy4vbGFwcHNwcml0ZSc7XG5pbXBvcnQgeyBUZXh0dXJlSW5mbyB9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcbmltcG9ydCB7IFRvdWNoTWFuYWdlciB9IGZyb20gJy4vdG91Y2htYW5hZ2VyJztcblxuLyoqXG4gKiDmj4/nlLvjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBWaWV3IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcHJvZ3JhbUlkID0gbnVsbDtcbiAgICB0aGlzLl9iYWNrID0gbnVsbDtcbiAgICB0aGlzLl9nZWFyID0gbnVsbDtcblxuICAgIC8vIOOCv+ODg+ODgemWouS/guOBruOCpOODmeODs+ODiOeuoeeQhlxuICAgIHRoaXMuX3RvdWNoTWFuYWdlciA9IG5ldyBUb3VjaE1hbmFnZXIoKTtcblxuICAgIC8vIOODh+ODkOOCpOOCueW6p+aomeOBi+OCieOCueOCr+ODquODvOODs+W6p+aomeOBq+WkieaPm+OBmeOCi+OBn+OCgeOBrlxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG5cbiAgICAvLyDnlLvpnaLjga7ooajnpLrjga7mi6HlpKfnuK7lsI/jgoTnp7vli5Xjga7lpInmj5vjgpLooYzjgYbooYzliJdcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gbmV3IEN1YmlzbVZpZXdNYXRyaXgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuXG4gICAgY29uc3QgcmF0aW86IG51bWJlciA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgIGNvbnN0IGxlZnQ6IG51bWJlciA9IC1yYXRpbztcbiAgICBjb25zdCByaWdodDogbnVtYmVyID0gcmF0aW87XG4gICAgY29uc3QgYm90dG9tOiBudW1iZXIgPSBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTGVmdDtcbiAgICBjb25zdCB0b3A6IG51bWJlciA9IExBcHBEZWZpbmUuVmlld0xvZ2ljYWxSaWdodDtcblxuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0U2NyZWVuUmVjdChsZWZ0LCByaWdodCwgYm90dG9tLCB0b3ApOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovnlLvpnaLjga7nr4Tlm7LjgIIgWOOBruW3puerr+OAgVjjga7lj7Pnq6/jgIFZ44Gu5LiL56uv44CBWeOBruS4iuerr1xuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2NhbGUoTEFwcERlZmluZS5WaWV3U2NhbGUsIExBcHBEZWZpbmUuVmlld1NjYWxlKTtcblxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLmxvYWRJZGVudGl0eSgpO1xuICAgIGlmICh3aWR0aCA+IGhlaWdodCkge1xuICAgICAgY29uc3Qgc2NyZWVuVzogbnVtYmVyID0gTWF0aC5hYnMocmlnaHQgLSBsZWZ0KTtcbiAgICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLnNjYWxlUmVsYXRpdmUoc2NyZWVuVyAvIHdpZHRoLCAtc2NyZWVuVyAvIHdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2NyZWVuSDogbnVtYmVyID0gTWF0aC5hYnModG9wIC0gYm90dG9tKTtcbiAgICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLnNjYWxlUmVsYXRpdmUoc2NyZWVuSCAvIGhlaWdodCwgLXNjcmVlbkggLyBoZWlnaHQpO1xuICAgIH1cbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2xhdGVSZWxhdGl2ZSgtd2lkdGggKiAwLjUsIC1oZWlnaHQgKiAwLjUpO1xuXG4gICAgLy8g6KGo56S656+E5Zuy44Gu6Kit5a6aXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNYXhTY2FsZShMQXBwRGVmaW5lLlZpZXdNYXhTY2FsZSk7IC8vIOmZkOeVjOaLoeW8teeOh1xuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0TWluU2NhbGUoTEFwcERlZmluZS5WaWV3TWluU2NhbGUpOyAvLyDpmZDnlYznuK7lsI/njodcblxuICAgIC8vIOihqOekuuOBp+OBjeOCi+acgOWkp+evhOWbslxuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0TWF4U2NyZWVuUmVjdChcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhMZWZ0LFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heFJpZ2h0LFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heEJvdHRvbSxcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhUb3BcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG51bGw7XG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbiA9IG51bGw7XG5cbiAgICB0aGlzLl9nZWFyLnJlbGVhc2UoKTtcbiAgICB0aGlzLl9nZWFyID0gbnVsbDtcblxuICAgIHRoaXMuX2JhY2sucmVsZWFzZSgpO1xuICAgIHRoaXMuX2JhY2sgPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSWQpO1xuICAgIHRoaXMuX3Byb2dyYW1JZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5o+P55S744GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgIGdsLnVzZVByb2dyYW0odGhpcy5fcHJvZ3JhbUlkKTtcblxuICAgIGlmICh0aGlzLl9iYWNrKSB7XG4gICAgICB0aGlzLl9iYWNrLnJlbmRlcih0aGlzLl9wcm9ncmFtSWQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZ2Vhcikge1xuICAgICAgdGhpcy5fZ2Vhci5yZW5kZXIodGhpcy5fcHJvZ3JhbUlkKTtcbiAgICB9XG5cbiAgICBnbC5mbHVzaCgpO1xuXG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgbGl2ZTJETWFuYWdlci5zZXRWaWV3TWF0cml4KHRoaXMuX3ZpZXdNYXRyaXgpO1xuXG4gICAgbGl2ZTJETWFuYWdlci5vblVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruWIneacn+WMluOCkuihjOOBhuOAglxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemVTcHJpdGUoKTogdm9pZCB7XG4gICAgY29uc3Qgd2lkdGg6IG51bWJlciA9IGNhbnZhcy53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQ6IG51bWJlciA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICBjb25zdCB0ZXh0dXJlTWFuYWdlciA9IExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmdldFRleHR1cmVNYW5hZ2VyKCk7XG4gICAgY29uc3QgcmVzb3VyY2VzUGF0aCA9IExBcHBEZWZpbmUuUmVzb3VyY2VzUGF0aDtcblxuICAgIGxldCBpbWFnZU5hbWUgPSAnJztcblxuICAgIC8vIOiDjOaZr+eUu+WDj+WIneacn+WMllxuICAgIGltYWdlTmFtZSA9IExBcHBEZWZpbmUuQmFja0ltYWdlTmFtZTtcblxuICAgIC8vIOmdnuWQjOacn+OBquOBruOBp+OCs+ODvOODq+ODkOODg+OCr+mWouaVsOOCkuS9nOaIkFxuICAgIGNvbnN0IGluaXRCYWNrR3JvdW5kVGV4dHVyZSA9ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IHg6IG51bWJlciA9IHdpZHRoICogMC41O1xuICAgICAgY29uc3QgeTogbnVtYmVyID0gaGVpZ2h0ICogMC41O1xuXG4gICAgICBjb25zdCBmd2lkdGggPSB0ZXh0dXJlSW5mby53aWR0aCAqIDIuMDtcbiAgICAgIGNvbnN0IGZoZWlnaHQgPSBoZWlnaHQgKiAwLjk1O1xuICAgICAgdGhpcy5fYmFjayA9IG5ldyBMQXBwU3ByaXRlKHgsIHksIGZ3aWR0aCwgZmhlaWdodCwgdGV4dHVyZUluZm8uaWQpO1xuICAgIH07XG5cbiAgICB0ZXh0dXJlTWFuYWdlci5jcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUoXG4gICAgICByZXNvdXJjZXNQYXRoICsgaW1hZ2VOYW1lLFxuICAgICAgZmFsc2UsXG4gICAgICBpbml0QmFja0dyb3VuZFRleHR1cmVcbiAgICApO1xuXG4gICAgLy8g5q2v6LuK55S75YOP5Yid5pyf5YyWXG4gICAgaW1hZ2VOYW1lID0gTEFwcERlZmluZS5HZWFySW1hZ2VOYW1lO1xuICAgIGNvbnN0IGluaXRHZWFyVGV4dHVyZSA9ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IHggPSB3aWR0aCAtIHRleHR1cmVJbmZvLndpZHRoICogMC41O1xuICAgICAgY29uc3QgeSA9IGhlaWdodCAtIHRleHR1cmVJbmZvLmhlaWdodCAqIDAuNTtcbiAgICAgIGNvbnN0IGZ3aWR0aCA9IHRleHR1cmVJbmZvLndpZHRoO1xuICAgICAgY29uc3QgZmhlaWdodCA9IHRleHR1cmVJbmZvLmhlaWdodDtcbiAgICAgIHRoaXMuX2dlYXIgPSBuZXcgTEFwcFNwcml0ZSh4LCB5LCBmd2lkdGgsIGZoZWlnaHQsIHRleHR1cmVJbmZvLmlkKTtcbiAgICB9O1xuXG4gICAgdGV4dHVyZU1hbmFnZXIuY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKFxuICAgICAgcmVzb3VyY2VzUGF0aCArIGltYWdlTmFtZSxcbiAgICAgIGZhbHNlLFxuICAgICAgaW5pdEdlYXJUZXh0dXJlXG4gICAgKTtcblxuICAgIC8vIOOCt+OCp+ODvOODgOODvOOCkuS9nOaIkFxuICAgIGlmICh0aGlzLl9wcm9ncmFtSWQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcHJvZ3JhbUlkID0gTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuY3JlYXRlU2hhZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgeOBleOCjOOBn+aZguOBq+WRvOOBsOOCjOOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnRYIOOCueOCr+ODquODvOODs1jluqfmqJlcbiAgICogQHBhcmFtIHBvaW50WSDjgrnjgq/jg6rjg7zjg7NZ5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgb25Ub3VjaGVzQmVnYW4ocG9pbnRYOiBudW1iZXIsIHBvaW50WTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyLnRvdWNoZXNCZWdhbihwb2ludFgsIHBvaW50WSk7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB44GX44Gm44GE44KL44Go44GN44Gr44Od44Kk44Oz44K/44GM5YuV44GE44Gf44KJ5ZG844Gw44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludFgg44K544Kv44Oq44O844OzWOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIOOCueOCr+ODquODvOODs1nluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNNb3ZlZChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB2aWV3WDogbnVtYmVyID0gdGhpcy50cmFuc2Zvcm1WaWV3WCh0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpKTtcbiAgICBjb25zdCB2aWV3WTogbnVtYmVyID0gdGhpcy50cmFuc2Zvcm1WaWV3WSh0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WSgpKTtcblxuICAgIHRoaXMuX3RvdWNoTWFuYWdlci50b3VjaGVzTW92ZWQocG9pbnRYLCBwb2ludFkpO1xuXG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGxpdmUyRE1hbmFnZXIub25EcmFnKHZpZXdYLCB2aWV3WSk7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB44GM57WC5LqG44GX44Gf44KJ5ZG844Gw44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludFgg44K544Kv44Oq44O844OzWOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIOOCueOCr+ODquODvOODs1nluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNFbmRlZChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyDjgr/jg4Pjg4HntYLkuoZcbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyOiBMQXBwTGl2ZTJETWFuYWdlciA9IExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgbGl2ZTJETWFuYWdlci5vbkRyYWcoMC4wLCAwLjApO1xuXG4gICAge1xuICAgICAgLy8g44K344Oz44Kw44Or44K/44OD44OXXG4gICAgICBjb25zdCB4OiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKFxuICAgICAgICB0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpXG4gICAgICApOyAvLyDoq5bnkIbluqfmqJnlpInmj5vjgZfjgZ/luqfmqJnjgpLlj5blvpfjgIJcbiAgICAgIGNvbnN0IHk6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoXG4gICAgICAgIHRoaXMuX3RvdWNoTWFuYWdlci5nZXRZKClcbiAgICAgICk7IC8vIOirlueQhuW6p+aomeWkieWMluOBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuXG4gICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z1RvdWNoTG9nRW5hYmxlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXXRvdWNoZXNFbmRlZCB4OiAke3h9IHk6ICR7eX1gKTtcbiAgICAgIH1cbiAgICAgIGxpdmUyRE1hbmFnZXIub25UYXAoeCwgeSk7XG5cbiAgICAgIC8vIOatr+i7iuOBq+OCv+ODg+ODl+OBl+OBn+OBi1xuICAgICAgLy8gaWYgKHRoaXMuX2dlYXIuaXNIaXQocG9pbnRYLCBwb2ludFkpKSB7XG4gICAgICAvLyAgIGxpdmUyRE1hbmFnZXIubmV4dFNjZW5lKCk7XG4gICAgICAvLyB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFjluqfmqJnjgpJWaWV35bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VYIOODh+ODkOOCpOOCuVjluqfmqJlcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1WaWV3WChkZXZpY2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHNjcmVlblg6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVgoZGV2aWNlWCk7IC8vIOirlueQhuW6p+aomeWkieaPm+OBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4LmludmVydFRyYW5zZm9ybVgoc2NyZWVuWCk7IC8vIOaLoeWkp+OAgee4ruWwj+OAgeenu+WLleW+jOOBruWApOOAglxuICB9XG5cbiAgLyoqXG4gICAqIFnluqfmqJnjgpJWaWV35bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VZIOODh+ODkOOCpOOCuVnluqfmqJlcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1WaWV3WShkZXZpY2VZOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHNjcmVlblk6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoZGV2aWNlWSk7IC8vIOirlueQhuW6p+aomeWkieaPm+OBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4LmludmVydFRyYW5zZm9ybVkoc2NyZWVuWSk7XG4gIH1cblxuICAvKipcbiAgICogWOW6p+aomeOCklNjcmVlbuW6p+aomeOBq+WkieaPm+OBmeOCi+OAglxuICAgKiBAcGFyYW0gZGV2aWNlWCDjg4fjg5DjgqTjgrlY5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtU2NyZWVuWChkZXZpY2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKGRldmljZVgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFnluqfmqJnjgpJTY3JlZW7luqfmqJnjgavlpInmj5vjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRldmljZVkg44OH44OQ44Kk44K5WeW6p+aomVxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybVNjcmVlblkoZGV2aWNlWTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWShkZXZpY2VZKTtcbiAgfVxuXG4gIF90b3VjaE1hbmFnZXI6IFRvdWNoTWFuYWdlcjsgLy8g44K/44OD44OB44Oe44ON44O844K444Oj44O8XG4gIF9kZXZpY2VUb1NjcmVlbjogQ3ViaXNtTWF0cml4NDQ7IC8vIOODh+ODkOOCpOOCueOBi+OCieOCueOCr+ODquODvOODs+OBuOOBruihjOWIl1xuICBfdmlld01hdHJpeDogQ3ViaXNtVmlld01hdHJpeDsgLy8gdmlld01hdHJpeFxuICBfcHJvZ3JhbUlkOiBXZWJHTFByb2dyYW07IC8vIOOCt+OCp+ODvOODgElEXG4gIF9iYWNrOiBMQXBwU3ByaXRlOyAvLyDog4zmma/nlLvlg49cbiAgX2dlYXI6IExBcHBTcHJpdGU7IC8vIOOCruOCoueUu+WDj1xuICBfY2hhbmdlTW9kZWw6IGJvb2xlYW47IC8vIOODouODh+ODq+WIh+OCiuabv+OBiOODleODqeOCsFxuICBfaXNDbGljazogYm9vbGVhbjsgLy8g44Kv44Oq44OD44Kv5LitXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5cblxuZXhwb3J0IGxldCBzX2luc3RhbmNlOiBMQXBwV2F2RmlsZUhhbmRsZXIgPSBudWxsO1xuXG5leHBvcnQgY2xhc3MgTEFwcFdhdkZpbGVIYW5kbGVyIHtcbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkui/lOOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgYznlJ/miJDjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/lhoXpg6jjgafjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTEFwcFdhdkZpbGVIYW5kbGVyIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IExBcHBXYXZGaWxlSGFuZGxlcigpO1xuICAgIH1cblxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgaWYgKHNfaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKSB7XG4gICAgbGV0IGdvYWxPZmZzZXQ6IG51bWJlcjtcbiAgICBsZXQgcm1zOiBudW1iZXI7XG5cbiAgICAvLyDjg4fjg7zjgr/jg63jg7zjg4nliY0v44OV44Kh44Kk44Or5pyr5bC+44Gr6YGU44GX44Gf5aC05ZCI44Gv5pu05paw44GX44Gq44GEXG4gICAgaWYgKFxuICAgICAgdGhpcy5fcGNtRGF0YSA9PSBudWxsIHx8XG4gICAgICB0aGlzLl9zYW1wbGVPZmZzZXQgPj0gdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsXG4gICAgKSB7XG4gICAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIOe1jOmBjuaZgumWk+W+jOOBrueKtuaFi+OCkuS/neaMgVxuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuICAgIGdvYWxPZmZzZXQgPSBNYXRoLmZsb29yKFxuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICogdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsaW5nUmF0ZVxuICAgICk7XG4gICAgaWYgKGdvYWxPZmZzZXQgPiB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWwpIHtcbiAgICAgIGdvYWxPZmZzZXQgPSB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWw7XG4gICAgfVxuXG4gICAgLy8gUk1T6KiI5risXG4gICAgcm1zID0gMC4wO1xuICAgIGZvciAoXG4gICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgIGNoYW5uZWxDb3VudCA8IHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzO1xuICAgICAgY2hhbm5lbENvdW50KytcbiAgICApIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzYW1wbGVDb3VudCA9IHRoaXMuX3NhbXBsZU9mZnNldDtcbiAgICAgICAgc2FtcGxlQ291bnQgPCBnb2FsT2Zmc2V0O1xuICAgICAgICBzYW1wbGVDb3VudCsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgcGNtID0gdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdW3NhbXBsZUNvdW50XTtcbiAgICAgICAgcm1zICs9IHBjbSAqIHBjbTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm1zID0gTWF0aC5zcXJ0KFxuICAgICAgcm1zIC9cbiAgICAgICh0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscyAqXG4gICAgICAgIChnb2FsT2Zmc2V0IC0gdGhpcy5fc2FtcGxlT2Zmc2V0KSlcbiAgICApO1xuXG4gICAgdGhpcy5fbGFzdFJtcyA9IHJtcztcbiAgICB0aGlzLl9zYW1wbGVPZmZzZXQgPSBnb2FsT2Zmc2V0O1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cblxuICBwdWJsaWMgc3RhcnQoZmlsZVBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIOOCteODs+ODl+ODq+S9jeWPgueFp+S9jee9ruOCkuWIneacn+WMllxuICAgIHRoaXMuX3NhbXBsZU9mZnNldCA9IDA7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuXG4gICAgLy8gUk1T5YCk44KS44Oq44K744OD44OIXG4gICAgdGhpcy5fbGFzdFJtcyA9IDAuMDtcblxuICB9XG5cbiAgcHVibGljIGdldFJtcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0Um1zO1xuICB9XG5cbiAgcHVibGljIGxvYWRXYXZGaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBsZXQgcmV0ID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5fcGNtRGF0YSAhPSBudWxsKSB7XG4gICAgICB0aGlzLnJlbGVhc2VQY21EYXRhKCk7XG4gICAgfVxuXG4gICAgLy8g44OV44Kh44Kk44Or44Ot44O844OJXG4gICAgY29uc3QgYXN5bmNGaWxlTG9hZCA9IGFzeW5jICgpID0+IHtcbiAgICAgIHJldHVybiBmZXRjaChmaWxlUGF0aCkudGhlbihyZXNwb25jZSA9PiB7XG4gICAgICAgIHJldHVybiByZXNwb25jZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGFzeW5jV2F2RmlsZU1hbmFnZXIgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUgPSBhd2FpdCBhc3luY0ZpbGVMb2FkKCk7XG4gICAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlRGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUpO1xuICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZVNpemUgPSB0aGlzLl9ieXRlUmVhZGVyLl9maWxlQnl0ZS5ieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fcmVhZE9mZnNldCA9IDA7XG5cbiAgICAgIC8vIOODleOCoeOCpOODq+ODreODvOODieOBq+WkseaVl+OBl+OBpuOBhOOCi+OBi+OAgeWFiOmgreOBruOCt+OCsOODjeODgeODo1wiUklGRlwi44KS5YWl44KM44KL44K144Kk44K644KC44Gq44GE5aC05ZCI44Gv5aSx5pWXXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlID09IG51bGwgfHxcbiAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZVNpemUgPCA0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyDjg5XjgqHjgqTjg6vlkI1cbiAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9maWxlTmFtZSA9IGZpbGVQYXRoO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyDjgrfjgrDjg43jg4Hjg6MgXCJSSUZGXCJcbiAgICAgICAgaWYgKCF0aGlzLl9ieXRlUmVhZGVyLmdldENoZWNrU2lnbmF0dXJlKCdSSUZGJykpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIFNpZ25ldHVyZSBcIlJJRkZcIi4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDjg5XjgqHjgqTjg6vjgrXjgqTjgrotOO+8iOiqreOBv+mjm+OBsOOBl++8iVxuICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOOCt+OCsOODjeODgeODoyBcIldBVkVcIlxuICAgICAgICBpZiAoIXRoaXMuX2J5dGVSZWFkZXIuZ2V0Q2hlY2tTaWduYXR1cmUoJ1dBVkUnKSkge1xuICAgICAgICAgIHJldCA9IGZhbHNlO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgU2lnbmV0dXJlIFwiV0FWRVwiLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOOCt+OCsOODjeODgeODoyBcImZtdCBcIlxuICAgICAgICBpZiAoIXRoaXMuX2J5dGVSZWFkZXIuZ2V0Q2hlY2tTaWduYXR1cmUoJ2ZtdCAnKSkge1xuICAgICAgICAgIHJldCA9IGZhbHNlO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgU2lnbmV0dXJlIFwiZm10XCIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZm1044OB44Oj44Oz44Kv44K144Kk44K6XG4gICAgICAgIGNvbnN0IGZtdENodW5rU2l6ZSA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MzJMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g44OV44Kp44O844Oe44OD44OISUTjga8x77yI44Oq44OL44KiUENN77yJ5Lul5aSW5Y+X44GR5LuY44GR44Gq44GEXG4gICAgICAgIGlmICh0aGlzLl9ieXRlUmVhZGVyLmdldDE2TGl0dGxlRW5kaWFuKCkgIT0gMSkge1xuICAgICAgICAgIHJldCA9IGZhbHNlO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmlsZSBpcyBub3QgbGluZWFyIFBDTS4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDjg4Hjg6Pjg7Pjg43jg6vmlbBcbiAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHMgPVxuICAgICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g44K144Oz44OX44Oq44Oz44Kw44Os44O844OIXG4gICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9zYW1wbGluZ1JhdGUgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOODh+ODvOOCv+mAn+W6pltieXRlL3NlY13vvIjoqq3jgb/po5vjgbDjgZfvvIlcbiAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjg5bjg63jg4Pjgq/jgrXjgqTjgrrvvIjoqq3jgb/po5vjgbDjgZfvvIlcbiAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDph4/lrZDljJbjg5Pjg4Pjg4jmlbBcbiAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX2JpdHNQZXJTYW1wbGUgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDE2TGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIGZtdOODgeODo+ODs+OCr+OBruaLoeW8temDqOWIhuOBruiqreOBv+mjm+OBsOOBl1xuICAgICAgICBpZiAoZm10Q2h1bmtTaXplID4gMTYpIHtcbiAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0ICs9IGZtdENodW5rU2l6ZSAtIDE2O1xuICAgICAgICB9XG4gICAgICAgIC8vIFwiZGF0YVwi44OB44Oj44Oz44Kv44GM5Ye654++44GZ44KL44G+44Gn6Kqt44G/6aOb44Gw44GXXG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICAhdGhpcy5fYnl0ZVJlYWRlci5nZXRDaGVja1NpZ25hdHVyZSgnZGF0YScpICYmXG4gICAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fcmVhZE9mZnNldCA8IHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgKz1cbiAgICAgICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MzJMaXR0bGVFbmRpYW4oKSArIDQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44OV44Kh44Kk44Or5YaF44GrXCJkYXRhXCLjg4Hjg6Pjg7Pjgq/jgYzlh7rnj77jgZfjgarjgYvjgaPjgZ9cbiAgICAgICAgaWYgKHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgPj0gdGhpcy5fYnl0ZVJlYWRlci5fZmlsZVNpemUpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIFwiZGF0YVwiIENodW5rLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOOCteODs+ODl+ODq+aVsFxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgZGF0YUNodW5rU2l6ZSA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MzJMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgICB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWwgPVxuICAgICAgICAgICAgKGRhdGFDaHVua1NpemUgKiA4KSAvXG4gICAgICAgICAgICAodGhpcy5fd2F2RmlsZUluZm8uX2JpdHNQZXJTYW1wbGUgKlxuICAgICAgICAgICAgICB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g6aCY5Z+f56K65L+dXG4gICAgICAgIHRoaXMuX3BjbURhdGEgPSBuZXcgQXJyYXkodGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHMpO1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBjaGFubmVsQ291bnQgPSAwO1xuICAgICAgICAgIGNoYW5uZWxDb3VudCA8IHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzO1xuICAgICAgICAgIGNoYW5uZWxDb3VudCsrXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuX3BjbURhdGFbY2hhbm5lbENvdW50XSA9IG5ldyBGbG9hdDMyQXJyYXkoXG4gICAgICAgICAgICB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIOazouW9ouODh+ODvOOCv+WPluW+l1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBzYW1wbGVDb3VudCA9IDA7XG4gICAgICAgICAgc2FtcGxlQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWw7XG4gICAgICAgICAgc2FtcGxlQ291bnQrK1xuICAgICAgICApIHtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgbGV0IGNoYW5uZWxDb3VudCA9IDA7XG4gICAgICAgICAgICBjaGFubmVsQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscztcbiAgICAgICAgICAgIGNoYW5uZWxDb3VudCsrXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLl9wY21EYXRhW2NoYW5uZWxDb3VudF1bc2FtcGxlQ291bnRdID0gdGhpcy5nZXRQY21TYW1wbGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQY21TYW1wbGUoKTogbnVtYmVyIHtcbiAgICBsZXQgcGNtMzI7XG5cbiAgICAvLyAzMuODk+ODg+ODiOW5heOBq+aLoeW8teOBl+OBpuOBi+OCiS0x772eMeOBruevhOWbsuOBq+S4uOOCgeOCi1xuICAgIHN3aXRjaCAodGhpcy5fd2F2RmlsZUluZm8uX2JpdHNQZXJTYW1wbGUpIHtcbiAgICAgIGNhc2UgODpcbiAgICAgICAgcGNtMzIgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDgoKSAtIDEyODtcbiAgICAgICAgcGNtMzIgPDw9IDI0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTY6XG4gICAgICAgIHBjbTMyID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpIDw8IDE2O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHBjbTMyID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQyNExpdHRsZUVuZGlhbigpIDw8IDg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8g5a++5b+c44GX44Gm44GE44Gq44GE44OT44OD44OI5bmFXG4gICAgICAgIHBjbTMyID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBjbTMyIC8gMjE0NzQ4MzY0NzsgLy9OdW1iZXIuTUFYX1ZBTFVFO1xuICB9XG5cbiAgcHVibGljIHJlbGVhc2VQY21EYXRhKCk6IHZvaWQge1xuICAgIGZvciAoXG4gICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgIGNoYW5uZWxDb3VudCA8IHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzO1xuICAgICAgY2hhbm5lbENvdW50KytcbiAgICApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9wY21EYXRhW2NoYW5uZWxDb3VudF07XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLl9wY21EYXRhO1xuICAgIHRoaXMuX3BjbURhdGEgPSBudWxsO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcGNtRGF0YSA9IG51bGw7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX2xhc3RSbXMgPSAwLjA7XG4gICAgdGhpcy5fc2FtcGxlT2Zmc2V0ID0gMC4wO1xuICAgIHRoaXMuX3dhdkZpbGVJbmZvID0gbmV3IFdhdkZpbGVJbmZvKCk7XG4gICAgdGhpcy5fYnl0ZVJlYWRlciA9IG5ldyBCeXRlUmVhZGVyKCk7XG4gIH1cblxuICBfcGNtRGF0YTogQXJyYXk8RmxvYXQzMkFycmF5PjtcbiAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyO1xuICBfbGFzdFJtczogbnVtYmVyO1xuICBfc2FtcGxlT2Zmc2V0OiBudW1iZXI7XG4gIF93YXZGaWxlSW5mbzogV2F2RmlsZUluZm87XG4gIF9ieXRlUmVhZGVyOiBCeXRlUmVhZGVyO1xuICBfbG9hZEZpbGV0b0J5dGVzID0gKGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlciwgbGVuZ3RoOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlQnl0ZSA9IGFycmF5QnVmZmVyO1xuICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVEYXRhVmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLl9ieXRlUmVhZGVyLl9maWxlQnl0ZSk7XG4gICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZVNpemUgPSBsZW5ndGg7XG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBXYXZGaWxlSW5mbyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2ZpbGVOYW1lID0gJyc7XG4gICAgdGhpcy5fbnVtYmVyT2ZDaGFubmVscyA9IDA7XG4gICAgdGhpcy5fYml0c1BlclNhbXBsZSA9IDA7XG4gICAgdGhpcy5fc2FtcGxpbmdSYXRlID0gMDtcbiAgICB0aGlzLl9zYW1wbGVzUGVyQ2hhbm5lbCA9IDA7XG4gIH1cblxuICBfZmlsZU5hbWU6IHN0cmluZzsgLy8vPCDjg5XjgqHjgqTjg6vlkI1cbiAgX251bWJlck9mQ2hhbm5lbHM6IG51bWJlcjsgLy8vPCDjg4Hjg6Pjg7Pjg43jg6vmlbBcbiAgX2JpdHNQZXJTYW1wbGU6IG51bWJlcjsgLy8vPCDjgrXjg7Pjg5fjg6vjgYLjgZ/jgorjg5Pjg4Pjg4jmlbBcbiAgX3NhbXBsaW5nUmF0ZTogbnVtYmVyOyAvLy88IOOCteODs+ODl+ODquODs+OCsOODrOODvOODiFxuICBfc2FtcGxlc1BlckNoYW5uZWw6IG51bWJlcjsgLy8vPCAx44OB44Oj44Oz44ON44Or44GC44Gf44KK57eP44K144Oz44OX44Or5pWwXG59XG5cbmV4cG9ydCBjbGFzcyBCeXRlUmVhZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZmlsZUJ5dGUgPSBudWxsO1xuICAgIHRoaXMuX2ZpbGVEYXRhVmlldyA9IG51bGw7XG4gICAgdGhpcy5fZmlsZVNpemUgPSAwO1xuICAgIHRoaXMuX3JlYWRPZmZzZXQgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBicmllZiA444OT44OD44OI6Kqt44G/6L6844G/XG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50OCDoqq3jgb/lj5bjgaPjgZ8444OT44OD44OI5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0OCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9IHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0KTtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0Kys7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYgMTbjg5Pjg4Pjg4joqq3jgb/ovrzjgb/vvIjjg6rjg4jjg6vjgqjjg7Pjg4fjgqPjgqLjg7PvvIlcbiAgICogQHJldHVybiBDc206OmNzbVVpbnQxNiDoqq3jgb/lj5bjgaPjgZ8xNuODk+ODg+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldDE2TGl0dGxlRW5kaWFuKCk6IG51bWJlciB7XG4gICAgY29uc3QgcmV0ID1cbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDEpIDw8IDgpIHxcbiAgICAgIHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0KTtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0ICs9IDI7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYgMjTjg5Pjg4Pjg4joqq3jgb/ovrzjgb/vvIjjg6rjg4jjg6vjgqjjg7Pjg4fjgqPjgqLjg7PvvIlcbiAgICogQHJldHVybiBDc206OmNzbVVpbnQzMiDoqq3jgb/lj5bjgaPjgZ8yNOODk+ODg+ODiOWApO+8iOS4i+S9jTI044OT44OD44OI44Gr6Kit5a6a77yJXG4gICAqL1xuICBwdWJsaWMgZ2V0MjRMaXR0bGVFbmRpYW4oKTogbnVtYmVyIHtcbiAgICBjb25zdCByZXQgPVxuICAgICAgKHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0ICsgMikgPDwgMTYpIHxcbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDEpIDw8IDgpIHxcbiAgICAgIHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0KTtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0ICs9IDM7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYgMzLjg5Pjg4Pjg4joqq3jgb/ovrzjgb/vvIjjg6rjg4jjg6vjgqjjg7Pjg4fjgqPjgqLjg7PvvIlcbiAgICogQHJldHVybiBDc206OmNzbVVpbnQzMiDoqq3jgb/lj5bjgaPjgZ8zMuODk+ODg+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldDMyTGl0dGxlRW5kaWFuKCk6IG51bWJlciB7XG4gICAgY29uc3QgcmV0ID1cbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDMpIDw8IDI0KSB8XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAyKSA8PCAxNikgfFxuICAgICAgKHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0ICsgMSkgPDwgOCkgfFxuICAgICAgdGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQpO1xuICAgIHRoaXMuX3JlYWRPZmZzZXQgKz0gNDtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBicmllZiDjgrfjgrDjg43jg4Hjg6Pjga7lj5blvpfjgajlj4LnhafmloflrZfliJfjgajjga7kuIDoh7Tjg4Hjgqfjg4Pjgq9cbiAgICogQHBhcmFtW2luXSByZWZlcmVuY2Ug5qSc5p+75a++6LGh44Gu44K344Kw44ON44OB44Oj5paH5a2X5YiXXG4gICAqIEByZXR2YWwgIHRydWUgICAg5LiA6Ie044GX44Gm44GE44KLXG4gICAqIEByZXR2YWwgIGZhbHNlICAg5LiA6Ie044GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2hlY2tTaWduYXR1cmUocmVmZXJlbmNlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBnZXRTaWduYXR1cmU6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICBjb25zdCByZWZlcmVuY2VTdHJpbmc6IFVpbnQ4QXJyYXkgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUocmVmZXJlbmNlKTtcbiAgICBpZiAocmVmZXJlbmNlLmxlbmd0aCAhPSA0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IHNpZ25hdHVyZU9mZnNldCA9IDA7IHNpZ25hdHVyZU9mZnNldCA8IDQ7IHNpZ25hdHVyZU9mZnNldCsrKSB7XG4gICAgICBnZXRTaWduYXR1cmVbc2lnbmF0dXJlT2Zmc2V0XSA9IHRoaXMuZ2V0OCgpO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgZ2V0U2lnbmF0dXJlWzBdID09IHJlZmVyZW5jZVN0cmluZ1swXSAmJlxuICAgICAgZ2V0U2lnbmF0dXJlWzFdID09IHJlZmVyZW5jZVN0cmluZ1sxXSAmJlxuICAgICAgZ2V0U2lnbmF0dXJlWzJdID09IHJlZmVyZW5jZVN0cmluZ1syXSAmJlxuICAgICAgZ2V0U2lnbmF0dXJlWzNdID09IHJlZmVyZW5jZVN0cmluZ1szXVxuICAgICk7XG4gIH1cblxuICBfZmlsZUJ5dGU6IEFycmF5QnVmZmVyOyAvLy88IOODreODvOODieOBl+OBn+ODleOCoeOCpOODq+OBruODkOOCpOODiOWIl1xuICBfZmlsZURhdGFWaWV3OiBEYXRhVmlldztcbiAgX2ZpbGVTaXplOiBudW1iZXI7IC8vLzwg44OV44Kh44Kk44Or44K144Kk44K6XG4gIF9yZWFkT2Zmc2V0OiBudW1iZXI7IC8vLzwg44OV44Kh44Kk44Or5Y+C54Wn5L2N572uXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5cbi8qKlxuICog44OW44Op44Km44K244Ot44O844OJ5b6M44Gu5Yem55CGXG4gKi9cbndpbmRvdy5vbmxvYWQgPSAoKTogdm9pZCA9PiB7XG4gIC8vIGNyZWF0ZSB0aGUgYXBwbGljYXRpb24gaW5zdGFuY2VcbiAgaWYgKExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmluaXRpYWxpemUoKSA9PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLnJ1bigpO1xufTtcblxuLyoqXG4gKiDntYLkuobmmYLjga7lh6bnkIZcbiAqL1xud2luZG93Lm9uYmVmb3JldW5sb2FkID0gKCk6IHZvaWQgPT4gTEFwcERlbGVnYXRlLnJlbGVhc2VJbnN0YW5jZSgpO1xuXG4vKipcbiAqIFByb2Nlc3Mgd2hlbiBjaGFuZ2luZyBzY3JlZW4gc2l6ZS5cbiAqL1xud2luZG93Lm9ucmVzaXplID0gKCkgPT4ge1xuICBpZiAoTEFwcERlZmluZS5DYW52YXNTaXplID09PSAnYXV0bycpIHtcbiAgICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5vblJlc2l6ZSgpO1xuICB9XG59O1xuXG4od2luZG93IGFzIGFueSkuc3RhcnRWb2ljZUNvbnZlcnNhdGlvbiA9IChsYW5ndWFnZTogc3RyaW5nLCBkYXRhOiBCbG9iKSA9PiB7XG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLnN0YXJ0Vm9pY2VDb252ZXJzYXRpb24obGFuZ3VhZ2UsIGRhdGEpO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmV4cG9ydCBjbGFzcyBUb3VjaE1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zdGFydFggPSAwLjA7XG4gICAgdGhpcy5fc3RhcnRZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYMSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WTEgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFgyID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZMiA9IDAuMDtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IDAuMDtcbiAgICB0aGlzLl9kZWx0YVggPSAwLjA7XG4gICAgdGhpcy5fZGVsdGFZID0gMC4wO1xuICAgIHRoaXMuX3NjYWxlID0gMS4wO1xuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gZmFsc2U7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldENlbnRlclgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2VudGVyWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREZWx0YVgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsdGFYO1xuICB9XG5cbiAgcHVibGljIGdldERlbHRhWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RhcnRYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGFydFkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRZO1xuICB9XG5cbiAgcHVibGljIGdldFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NjYWxlO1xuICB9XG5cbiAgcHVibGljIGdldFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRYMSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDE7XG4gIH1cblxuICBwdWJsaWMgZ2V0WTEoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkxO1xuICB9XG5cbiAgcHVibGljIGdldFgyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYMjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZMigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTI7XG4gIH1cblxuICBwdWJsaWMgaXNTaW5nbGVUb3VjaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdG91Y2hTaW5nbGU7XG4gIH1cblxuICBwdWJsaWMgaXNGbGlja0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZmxpcEF2YWlsYWJsZTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNhYmxlRmxpY2soKTogdm9pZCB7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgemWi+Wni+aZguOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzQmVnYW4oZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX3N0YXJ0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fc3RhcnRZID0gZGV2aWNlWTtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IC0xLjA7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IHRydWU7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODieODqeODg+OCsOaZguOBruOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzTW92ZWQoZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gLTEuMDtcbiAgICB0aGlzLl90b3VjaFNpbmdsZSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Oq44OD44Kv44Gu6Led6Zui5ris5a6aXG4gICAqIEByZXR1cm4g44OV44Oq44OD44Kv6Led6ZuiXG4gICAqL1xuICBwdWJsaWMgZ2V0RmxpY2tEaXN0YW5jZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKFxuICAgICAgdGhpcy5fc3RhcnRYLFxuICAgICAgdGhpcy5fc3RhcnRZLFxuICAgICAgdGhpcy5fbGFzdFgsXG4gICAgICB0aGlzLl9sYXN0WVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog54K577yR44GL44KJ54K577yS44G444Gu6Led6Zui44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqIEBwYXJhbSB4MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqL1xuICBwdWJsaWMgY2FsY3VsYXRlRGlzdGFuY2UoXG4gICAgeDE6IG51bWJlcixcbiAgICB5MTogbnVtYmVyLFxuICAgIHgyOiBudW1iZXIsXG4gICAgeTI6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHgxIC0geDIpICogKHgxIC0geDIpICsgKHkxIC0geTIpICogKHkxIC0geTIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDvvJLjgaTnm67jga7lgKTjgYvjgonjgIHnp7vli5Xph4/jgpLmsYLjgoHjgovjgIJcbiAgICog6YGV44GG5pa55ZCR44Gu5aC05ZCI44Gv56e75YuV6YeP77yQ44CC5ZCM44GY5pa55ZCR44Gu5aC05ZCI44Gv44CB57W25a++5YCk44GM5bCP44GV44GE5pa544Gu5YCk44KS5Y+C54Wn44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSB2MSDvvJHjgaTnm67jga7np7vli5Xph49cbiAgICogQHBhcmFtIHYyIO+8kuOBpOebruOBruenu+WLlemHj1xuICAgKlxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIGNhbGN1bGF0ZU1vdmluZ0Ftb3VudCh2MTogbnVtYmVyLCB2MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodjEgPiAwLjAgIT0gdjIgPiAwLjApIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuXG4gICAgY29uc3Qgc2lnbjogbnVtYmVyID0gdjEgPiAwLjAgPyAxLjAgOiAtMS4wO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUxID0gTWF0aC5hYnModjEpO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUyID0gTWF0aC5hYnModjIpO1xuICAgIHJldHVybiAoXG4gICAgICBzaWduICogKGFic29sdXRlVmFsdWUxIDwgYWJzb2x1dGVWYWx1ZTIgPyBhYnNvbHV0ZVZhbHVlMSA6IGFic29sdXRlVmFsdWUyKVxuICAgICk7XG4gIH1cblxuICBfc3RhcnRZOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnjjga7lgKRcbiAgX3N0YXJ0WDogbnVtYmVyOyAvLyDjgr/jg4Pjg4HjgpLplovlp4vjgZfjgZ/mmYLjga5544Gu5YCkXG4gIF9sYXN0WDogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5444Gu5YCkXG4gIF9sYXN0WTogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5544Gu5YCkXG4gIF9sYXN0WDE6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LiA44Gk55uu44GueOOBruWApFxuICBfbGFzdFkxOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS4gOOBpOebruOBrnnjga7lgKRcbiAgX2xhc3RYMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5444Gu5YCkXG4gIF9sYXN0WTI6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LqM44Gk55uu44GueeOBruWApFxuICBfbGFzdFRvdWNoRGlzdGFuY2U6IG51bWJlcjsgLy8gMuacrOS7peS4iuOBp+OCv+ODg+ODgeOBl+OBn+OBqOOBjeOBruaMh+OBrui3nembolxuICBfZGVsdGFYOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnjjga7np7vli5Xot53pm6LjgIJcbiAgX2RlbHRhWTogbnVtYmVyOyAvLyDliY3lm57jga7lgKTjgYvjgonku4rlm57jga7lgKTjgbjjga5544Gu56e75YuV6Led6Zui44CCXG4gIF9zY2FsZTogbnVtYmVyOyAvLyDjgZPjga7jg5Xjg6zjg7zjg6DjgafmjpvjgZHlkIjjgo/jgZvjgovmi6HlpKfnjofjgILmi6HlpKfmk43kvZzkuK3ku6XlpJbjga8x44CCXG4gIF90b3VjaFNpbmdsZTogYm9vbGVhbjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GvdHJ1ZVxuICBfZmxpcEF2YWlsYWJsZTogYm9vbGVhbjsgLy8g44OV44Oq44OD44OX44GM5pyJ5Yq544GL44Gp44GG44GLXG59XG4iLCJjb25zdCBnZXRXYXZlQmxvYiA9IHJlcXVpcmUoXCIuL3dhdkJsb2JVdGlsXCIpO1xyXG5jb25zdCBkb3dubG9hZFdhdiA9IHJlcXVpcmUoXCIuL2Rvd25sb2FkVXRpbFwiKTtcclxuXHJcbi8qKiBDbGFzcyBSZXByZXNlbnRpbmcgYSBXYXZSZWNvcmRlciAqL1xyXG5jbGFzcyBXYXZSZWNvcmRlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwcm9wZXJ0eSB7TWVkaWFSZWNvcmRlcn0gbWVkaWFSZWNvcmRlciAtIE1lZGlhUmVjb3JkZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgbWVkaWFSZWNvcmRlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcm9wZXJ0eSB7TWVkaWFTdHJlYW19IC0gc3RyZWFtIFVzZXIncyBNZWRpYVN0cmVhbVxyXG4gICAgICovXHJcbiAgICBzdHJlYW07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJvcGVydHkge0Jsb2J9IF9fZGF0YSAtIFJlY29yZGVkIFdFQk0gZGF0YVxyXG4gICAgICovXHJcbiAgICBfX2RhdGE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBY2Nlc3MgdXNlciBtZWRpYSBmcm9tIHRoZSBhdWRpbyBpbnB1dCwgd2lsbCBiZSBhc2tpbmcgYXVkaW8gcGVybWlzc2lvbiBpZiBub3QgYXZhaWxhYmxlIGFscmVhZHlcclxuICAgICAqIEBwYXJhbSB7TWVkaWFUcmFja0NvbnN0cmFpbnRzfSBjb25zdHJhaW50cyAtIE1lZGlhVHJhY2tDb25zdHJhaW50cyB0byBiZSBhcHBsaWVkLCBpZiBhbnkgZGVmYXVsdHMgPSB7IGF1ZGlvOiB0cnVlLCB2aWRlbzogZmFsc2UgfVxyXG4gICAgICogQHJldHVybiAtIEdvdCBVc2VyIE1lZGlhU3RyZWFtIG9yIG5vdFxyXG4gICAgICovXHJcbiAgICBhc3luYyBzdGFydChjb25zdHJhaW50cyA9IHsgYXVkaW86IHRydWUsIHZpZGVvOiBmYWxzZSB9KSB7XHJcbiAgICAgICAgaWYgKHRoaXMubWVkaWFSZWNvcmRlcj8uc3RhdGUgPT09IFwicmVjb3JkaW5nXCIpIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICBjb25zdCBtZWRpYVRyYWNrQ29uc3RyYWludHMgPSBjb25zdHJhaW50cyB8fCB7IGF1ZGlvOiB0cnVlLCB2aWRlbzogZmFsc2UgfTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShtZWRpYVRyYWNrQ29uc3RyYWludHMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyID0gbmV3IE1lZGlhUmVjb3JkZXIodGhpcy5zdHJlYW0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLm9uZGF0YWF2YWlsYWJsZSA9IChlKSA9PiB0aGlzLl9fZGF0YSA9IGUuZGF0YTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXI/LnN0YXJ0KCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wIHJlY29yZGluZyB0aGUgYXVkaW9cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBzdG9wKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1lZGlhUmVjb3JkZXI/LnN0YXRlICE9PSBcInJlY29yZGluZ1wiKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLnN0b3AoKTtcclxuICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXIub25zdG9wID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHRyYWNrLnN0b3AoKSk7XHJcbiAgICAgICAgICAgIHRoaXMubWVkaWFSZWNvcmRlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRG93bmxvYWQgdGhlIHdhdiBhdWRpbyBmaWxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBmaWxlIHRvIGJlIGRvd25sb2FkZWQsIHdpdGhvdXQgZXh0ZW5zaW9uIFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBhczMyQml0IC0gQXVkaW8gcmVxdWlyZWQgaW4gMzItYml0LCBkZWZhdWx0IGlzIDE2LWJpdC5cclxuICAgICAqIEBwYXJhbSB7QXVkaW9Db250ZXh0T3B0aW9uc30gY29udGV4dE9wdGlvbnMgLSBvcHRpb3NuIG5lZWRzIHRvIGJlIHVzZWQgZm9yIGVuY29kaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZG93bmxvYWQoXHJcbiAgICAgICAgZmlsZW5hbWUgPSBudWxsLCBhczMyQml0ID0gZmFsc2UsIGNvbnRleHRPcHRpb25zID0gdW5kZWZpbmVkXHJcbiAgICApIHtcclxuICAgICAgICBpZiAodGhpcy5fX2RhdGEpIHJldHVybiBhd2FpdCBkb3dubG9hZFdhdih0aGlzLl9fZGF0YSwgYXMzMkJpdCwgZmlsZW5hbWUsIGNvbnRleHRPcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgcmVjb3JkZWQgd2F2IGF1ZGlvIEJsb2JcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYXMzMkJpdCAtIEdldCAzMi1iaXQgYXVkaW8sIGRlZmF1bHQgaXMgMTYtYml0XHJcbiAgICAgKiBAcGFyYW0ge0F1ZGlvQ29udGV4dE9wdGlvbnN9IGNvbnRleHRPcHRpb25zIC0gb3B0aW9zbiBuZWVkcyB0byBiZSB1c2VkIGZvciBlbmNvZGluZ1xyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldEJsb2IoYXMzMkJpdCA9IGZhbHNlLCBjb250ZXh0T3B0aW9ucyA9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9fZGF0YSkgcmV0dXJuIGF3YWl0IGdldFdhdmVCbG9iKHRoaXMuX19kYXRhLCBhczMyQml0LCBjb250ZXh0T3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gV2F2UmVjb3JkZXI7IiwiY29uc3QgZ2V0V2F2ZUJsb2IgPSByZXF1aXJlKFwiLi93YXZCbG9iVXRpbFwiKTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge0Jsb2IgfCBCbG9iW119IGJsb2JEYXRhIC0gQmxvYiBvciBCbG9iW10gdG8gYmUgY29udmVydGVkIHRvIGF1ZGlvL3dhdmUgQmxvYlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFzMzJCaXRGbG9hdCAtIENvbnZlcnQgdG8gMTYtYml0IG9yIDMyLWJpdCBmaWxlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZSAtIE5hbWUgb2YgdGhlIGZpbGVcclxuICogQHBhcmFtIHtBdWRpb0NvbnRleHRPcHRpb25zfSBjb250ZXh0T3B0aW9ucyAtIGF1ZGlvIGNvbnRleHQgb3B0aW9ucyBmb3IgZW5jb2RpbmdcclxuICogQHJldHVybnNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkV2F2KFxyXG4gICAgYmxvYkRhdGEsIGFzMzJCaXRGbG9hdCwgZmlsZW5hbWUgPSBudWxsLCBjb250ZXh0T3B0aW9ucyA9IHVuZGVmaW5lZFxyXG4pIHtcclxuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCBnZXRXYXZlQmxvYihibG9iRGF0YSwgYXMzMkJpdEZsb2F0LCBjb250ZXh0T3B0aW9ucyk7XHJcblxyXG4gICAgY29uc3QgYW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIGFuY2hvckVsZW1lbnQuaHJlZiA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgYW5jaG9yRWxlbWVudC5kb3dubG9hZCA9IGZpbGVuYW1lIHx8IGByZWNvcmRpbmcoJyR7YXMzMkJpdEZsb2F0ID8gJzMyYml0JyA6ICcxNmJpdCd9KS53YXZgO1xyXG4gICAgYW5jaG9yRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhbmNob3JFbGVtZW50KTtcclxuICAgIGFuY2hvckVsZW1lbnQuY2xpY2soKTtcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYW5jaG9yRWxlbWVudCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZG93bmxvYWRXYXY7IiwibW9kdWxlLmV4cG9ydHMuV2F2UmVjb3JkZXIgPSByZXF1aXJlKFwiLi9XYXZSZWNvcmRlclwiKTtcclxubW9kdWxlLmV4cG9ydHMuZ2V0V2F2ZUJsb2IgPSByZXF1aXJlKFwiLi93YXZCbG9iVXRpbFwiKTtcclxubW9kdWxlLmV4cG9ydHMuZG93bmxvYWRXYXYgPSByZXF1aXJlKFwiLi9kb3dubG9hZFV0aWxcIik7IiwiZnVuY3Rpb24gX3dyaXRlU3RyaW5nVG9BcnJheShhU3RyaW5nLCB0YXJnZXRBcnJheSwgb2Zmc2V0KSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFTdHJpbmcubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgdGFyZ2V0QXJyYXlbb2Zmc2V0ICsgaV0gPSBhU3RyaW5nLmNoYXJDb2RlQXQoaSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF93cml0ZUludDE2VG9BcnJheShhTnVtYmVyLCB0YXJnZXRBcnJheSwgb2Zmc2V0KSB7XHJcbiAgICBhTnVtYmVyID0gTWF0aC5mbG9vcihhTnVtYmVyKTtcclxuICAgIHRhcmdldEFycmF5W29mZnNldCArIDBdID0gYU51bWJlciAmIDI1NTsgICAgICAgICAgLy8gYnl0ZSAxXHJcbiAgICB0YXJnZXRBcnJheVtvZmZzZXQgKyAxXSA9IChhTnVtYmVyID4+IDgpICYgMjU1OyAgIC8vIGJ5dGUgMlxyXG59XHJcblxyXG5mdW5jdGlvbiBfd3JpdGVJbnQzMlRvQXJyYXkoYU51bWJlciwgdGFyZ2V0QXJyYXksIG9mZnNldCkge1xyXG4gICAgYU51bWJlciA9IE1hdGguZmxvb3IoYU51bWJlcik7XHJcbiAgICB0YXJnZXRBcnJheVtvZmZzZXQgKyAwXSA9IGFOdW1iZXIgJiAyNTU7ICAgICAgICAgIC8vIGJ5dGUgMVxyXG4gICAgdGFyZ2V0QXJyYXlbb2Zmc2V0ICsgMV0gPSAoYU51bWJlciA+PiA4KSAmIDI1NTsgICAvLyBieXRlIDJcclxuICAgIHRhcmdldEFycmF5W29mZnNldCArIDJdID0gKGFOdW1iZXIgPj4gMTYpICYgMjU1OyAgLy8gYnl0ZSAzXHJcbiAgICB0YXJnZXRBcnJheVtvZmZzZXQgKyAzXSA9IChhTnVtYmVyID4+IDI0KSAmIDI1NTsgIC8vIGJ5dGUgNFxyXG59XHJcblxyXG4vLyBSZXR1cm4gdGhlIGJpdHMgb2YgdGhlIGZsb2F0IGFzIGEgMzItYml0IGludGVnZXIgdmFsdWUuICBUaGlzXHJcbi8vIHByb2R1Y2VzIHRoZSByYXcgYml0czsgbm8gaW50ZXByZXRhdGlvbiBvZiB0aGUgdmFsdWUgaXMgZG9uZS5cclxuZnVuY3Rpb24gX2Zsb2F0Qml0cyhmKSB7XHJcbiAgICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoNCk7XHJcbiAgICAobmV3IEZsb2F0MzJBcnJheShidWYpKVswXSA9IGY7XHJcbiAgICBjb25zdCBiaXRzID0gKG5ldyBVaW50MzJBcnJheShidWYpKVswXTtcclxuICAgIC8vIFJldHVybiBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgcmV0dXJuIGJpdHMgfCAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfd3JpdGVBdWRpb0J1ZmZlclRvQXJyYXkoXHJcbiAgICBhdWRpb0J1ZmZlcixcclxuICAgIHRhcmdldEFycmF5LFxyXG4gICAgb2Zmc2V0LFxyXG4gICAgYml0RGVwdGhcclxuKSB7XHJcbiAgICBsZXQgaW5kZXggPSAwLCBjaGFubmVsID0gMDtcclxuICAgIGNvbnN0IGxlbmd0aCA9IGF1ZGlvQnVmZmVyLmxlbmd0aDtcclxuICAgIGNvbnN0IGNoYW5uZWxzID0gYXVkaW9CdWZmZXIubnVtYmVyT2ZDaGFubmVscztcclxuICAgIGxldCBjaGFubmVsRGF0YSwgc2FtcGxlO1xyXG5cclxuICAgIC8vIENsYW1waW5nIHNhbXBsZXMgb250byB0aGUgMTYtYml0IHJlc29sdXRpb24uXHJcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7ICsraW5kZXgpIHtcclxuICAgICAgICBmb3IgKGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgY2hhbm5lbHM7ICsrY2hhbm5lbCkge1xyXG4gICAgICAgICAgICBjaGFubmVsRGF0YSA9IGF1ZGlvQnVmZmVyLmdldENoYW5uZWxEYXRhKGNoYW5uZWwpO1xyXG5cclxuICAgICAgICAgICAgLy8gQnJhbmNoZXMgdXBvbiB0aGUgcmVxdWVzdGVkIGJpdCBkZXB0aFxyXG4gICAgICAgICAgICBpZiAoYml0RGVwdGggPT09IDE2KSB7XHJcbiAgICAgICAgICAgICAgICBzYW1wbGUgPSBjaGFubmVsRGF0YVtpbmRleF0gKiAzMjc2OC4wO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNhbXBsZSA8IC0zMjc2OClcclxuICAgICAgICAgICAgICAgICAgICBzYW1wbGUgPSAtMzI3Njg7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzYW1wbGUgPiAzMjc2NylcclxuICAgICAgICAgICAgICAgICAgICBzYW1wbGUgPSAzMjc2NztcclxuICAgICAgICAgICAgICAgIF93cml0ZUludDE2VG9BcnJheShzYW1wbGUsIHRhcmdldEFycmF5LCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYml0RGVwdGggPT09IDMyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGFzc3VtZXMgd2UncmUgZ29pbmcgdG8gb3V0IDMyLWZsb2F0LCBub3QgMzItYml0IGxpbmVhci5cclxuICAgICAgICAgICAgICAgIHNhbXBsZSA9IF9mbG9hdEJpdHMoY2hhbm5lbERhdGFbaW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIF93cml0ZUludDMyVG9BcnJheShzYW1wbGUsIHRhcmdldEFycmF5LCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW52YWxpZCBiaXQgZGVwdGggZm9yIFBDTSBlbmNvZGluZy4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENvbnZlcnRzIHRoZSBCbG9iIGRhdGEgdG8gQXVkaW9CdWZmZXJcclxuYXN5bmMgZnVuY3Rpb24gX2dldEF1ZGlvQnVmZmVyKGJsb2JEYXRhLCBjb250ZXh0T3B0aW9ucyA9IHVuZGVmaW5lZCkge1xyXG4gICAgbGV0IGJsb2IgPSBibG9iRGF0YTtcclxuXHJcbiAgICBpZiAoIShibG9iIGluc3RhbmNlb2YgQmxvYikpIGJsb2IgPSBuZXcgQmxvYihbYmxvYkRhdGFdKTtcclxuXHJcbiAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcclxuXHJcbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XHJcblxyXG4gICAgY29uc3QgYXVkaW9Db250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dChjb250ZXh0T3B0aW9ucyk7XHJcblxyXG4gICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCBhdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGFycmF5QnVmZmVyKVxyXG5cclxuICAgIHJldHVybiBhdWRpb0J1ZmZlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge0Jsb2IgfCBCbG9iW119IGJsb2JEYXRhIC0gQmxvYiBvciBCbG9iW10gdG8gYmUgY29udmVydGVkIHRvIGF1ZGlvL3dhdmUgQmxvYlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFzMzJCaXRGbG9hdCAtIENvbnZlcnQgdG8gMTYtYml0IG9yIDMyLWJpdCBmaWxlLCBkZWZhdWx0IDE2LWJpdFxyXG4gKiBAcGFyYW0ge0F1ZGlvQ29udGV4dE9wdGlvbnN9IGNvbnRleHRPcHRpb25zIC0gb3B0aW9zbiBuZWVkcyB0byBiZSB1c2VkIGZvciBlbmNvZGluZ1xyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFdhdmVCbG9iKFxyXG4gICAgYmxvYkRhdGEsIGFzMzJCaXRGbG9hdCwgY29udGV4dE9wdGlvbnMgPSB1bmRlZmluZWRcclxuKSB7XHJcbiAgICBjb25zdCBhdWRpb0J1ZmZlciA9IGF3YWl0IF9nZXRBdWRpb0J1ZmZlcihibG9iRGF0YSwgY29udGV4dE9wdGlvbnMpO1xyXG5cclxuICAgIC8vIEVuY29kaW5nIHNldHVwLlxyXG4gICAgY29uc3QgZnJhbWVMZW5ndGggPSBhdWRpb0J1ZmZlci5sZW5ndGg7XHJcbiAgICBjb25zdCBudW1iZXJPZkNoYW5uZWxzID0gYXVkaW9CdWZmZXIubnVtYmVyT2ZDaGFubmVscztcclxuICAgIGNvbnN0IHNhbXBsZVJhdGUgPSBhdWRpb0J1ZmZlci5zYW1wbGVSYXRlO1xyXG4gICAgY29uc3QgYml0c1BlclNhbXBsZSA9IGFzMzJCaXRGbG9hdCA/IDMyIDogMTY7XHJcbiAgICBjb25zdCBieXRlc1BlclNhbXBsZSA9IGJpdHNQZXJTYW1wbGUgLyA4O1xyXG4gICAgY29uc3QgYnl0ZVJhdGUgPSBzYW1wbGVSYXRlICogbnVtYmVyT2ZDaGFubmVscyAqIGJpdHNQZXJTYW1wbGUgLyA4O1xyXG4gICAgY29uc3QgYmxvY2tBbGlnbiA9IG51bWJlck9mQ2hhbm5lbHMgKiBiaXRzUGVyU2FtcGxlIC8gODtcclxuICAgIGNvbnN0IHdhdkRhdGFCeXRlTGVuZ3RoID0gZnJhbWVMZW5ndGggKiBudW1iZXJPZkNoYW5uZWxzICogYnl0ZXNQZXJTYW1wbGU7XHJcbiAgICBjb25zdCBoZWFkZXJCeXRlTGVuZ3RoID0gNDQ7XHJcbiAgICBjb25zdCB0b3RhbExlbmd0aCA9IGhlYWRlckJ5dGVMZW5ndGggKyB3YXZEYXRhQnl0ZUxlbmd0aDtcclxuICAgIGNvbnN0IHdhdmVGaWxlRGF0YSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcclxuICAgIGNvbnN0IHN1YkNodW5rMVNpemUgPSAxNjtcclxuICAgIGNvbnN0IHN1YkNodW5rMlNpemUgPSB3YXZEYXRhQnl0ZUxlbmd0aDtcclxuICAgIGNvbnN0IGNodW5rU2l6ZSA9IDQgKyAoOCArIHN1YkNodW5rMVNpemUpICsgKDggKyBzdWJDaHVuazJTaXplKTtcclxuXHJcbiAgICBfd3JpdGVTdHJpbmdUb0FycmF5KCdSSUZGJywgd2F2ZUZpbGVEYXRhLCAwKTtcclxuICAgIF93cml0ZUludDMyVG9BcnJheShjaHVua1NpemUsIHdhdmVGaWxlRGF0YSwgNCk7XHJcbiAgICBfd3JpdGVTdHJpbmdUb0FycmF5KCdXQVZFJywgd2F2ZUZpbGVEYXRhLCA4KTtcclxuICAgIF93cml0ZVN0cmluZ1RvQXJyYXkoJ2ZtdCAnLCB3YXZlRmlsZURhdGEsIDEyKTtcclxuXHJcbiAgICAvLyBTdWJDaHVuazFTaXplICg0KVxyXG4gICAgX3dyaXRlSW50MzJUb0FycmF5KHN1YkNodW5rMVNpemUsIHdhdmVGaWxlRGF0YSwgMTYpO1xyXG4gICAgLy8gQXVkaW9Gb3JtYXQgKDIpOiAzIG1lYW5zIDMyLWJpdCBmbG9hdCwgMSBtZWFucyBpbnRlZ2VyIFBDTS5cclxuICAgIF93cml0ZUludDE2VG9BcnJheShhczMyQml0RmxvYXQgPyAzIDogMSwgd2F2ZUZpbGVEYXRhLCAyMCk7XHJcbiAgICAvLyBOdW1DaGFubmVscyAoMilcclxuICAgIF93cml0ZUludDE2VG9BcnJheShudW1iZXJPZkNoYW5uZWxzLCB3YXZlRmlsZURhdGEsIDIyKTtcclxuICAgIC8vIFNhbXBsZVJhdGUgKDQpXHJcbiAgICBfd3JpdGVJbnQzMlRvQXJyYXkoc2FtcGxlUmF0ZSwgd2F2ZUZpbGVEYXRhLCAyNCk7XHJcbiAgICAvLyBCeXRlUmF0ZSAoNClcclxuICAgIF93cml0ZUludDMyVG9BcnJheShieXRlUmF0ZSwgd2F2ZUZpbGVEYXRhLCAyOCk7XHJcbiAgICAvLyBCbG9ja0FsaWduICgyKVxyXG4gICAgX3dyaXRlSW50MTZUb0FycmF5KGJsb2NrQWxpZ24sIHdhdmVGaWxlRGF0YSwgMzIpO1xyXG4gICAgLy8gQml0c1BlclNhbXBsZSAoNClcclxuICAgIF93cml0ZUludDMyVG9BcnJheShiaXRzUGVyU2FtcGxlLCB3YXZlRmlsZURhdGEsIDM0KTtcclxuICAgIF93cml0ZVN0cmluZ1RvQXJyYXkoJ2RhdGEnLCB3YXZlRmlsZURhdGEsIDM2KTtcclxuICAgIC8vIFN1YkNodW5rMlNpemUgKDQpXHJcbiAgICBfd3JpdGVJbnQzMlRvQXJyYXkoc3ViQ2h1bmsyU2l6ZSwgd2F2ZUZpbGVEYXRhLCA0MCk7XHJcblxyXG4gICAgLy8gV3JpdGUgYWN0dWFsIGF1ZGlvIGRhdGEgc3RhcnRpbmcgYXQgb2Zmc2V0IDQ0LlxyXG4gICAgX3dyaXRlQXVkaW9CdWZmZXJUb0FycmF5KGF1ZGlvQnVmZmVyLCB3YXZlRmlsZURhdGEsIDQ0LCBiaXRzUGVyU2FtcGxlKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IEJsb2IoW3dhdmVGaWxlRGF0YV0sIHtcclxuICAgICAgICB0eXBlOiAnYXVkaW8vd2F2ZSdcclxuICAgIH0pO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGdldFdhdmVCbG9iO1xyXG4iLCJ2YXIgZ2xvYmFsID1cbiAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpXG5cbnZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGdsb2JhbCxcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIGdsb2JhbCAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gZ2xvYmFsICYmXG4gICAgJ0Jsb2InIGluIGdsb2JhbCAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gZ2xvYmFsLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBnbG9iYWxcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZTogXCInICsgbmFtZSArICdcIicpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIC8qXG4gICAgICBmZXRjaC1tb2NrIHdyYXBzIHRoZSBSZXNwb25zZSBvYmplY3QgaW4gYW4gRVM2IFByb3h5IHRvXG4gICAgICBwcm92aWRlIHVzZWZ1bCB0ZXN0IGhhcm5lc3MgZmVhdHVyZXMgc3VjaCBhcyBmbHVzaC4gSG93ZXZlciwgb25cbiAgICAgIEVTNSBicm93c2VycyB3aXRob3V0IGZldGNoIG9yIFByb3h5IHN1cHBvcnQgcG9sbHlmaWxscyBtdXN0IGJlIHVzZWQ7XG4gICAgICB0aGUgcHJveHktcG9sbHlmaWxsIGlzIHVuYWJsZSB0byBwcm94eSBhbiBhdHRyaWJ1dGUgdW5sZXNzIGl0IGV4aXN0c1xuICAgICAgb24gdGhlIG9iamVjdCBiZWZvcmUgdGhlIFByb3h5IGlzIGNyZWF0ZWQuIFRoaXMgY2hhbmdlIGVuc3VyZXNcbiAgICAgIFJlc3BvbnNlLmJvZHlVc2VkIGV4aXN0cyBvbiB0aGUgaW5zdGFuY2UsIHdoaWxlIG1haW50YWluaW5nIHRoZVxuICAgICAgc2VtYW50aWMgb2Ygc2V0dGluZyBSZXF1ZXN0LmJvZHlVc2VkIGluIHRoZSBjb25zdHJ1Y3RvciBiZWZvcmVcbiAgICAgIF9pbml0Qm9keSBpcyBjYWxsZWQuXG4gICAgKi9cbiAgICB0aGlzLmJvZHlVc2VkID0gdGhpcy5ib2R5VXNlZFxuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICB2YXIgaXNDb25zdW1lZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ29uc3VtZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ1ZmZlci5zbGljZShcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0ICsgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcblxuICBpZiAodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICBpZiAob3B0aW9ucy5jYWNoZSA9PT0gJ25vLXN0b3JlJyB8fCBvcHRpb25zLmNhY2hlID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICAvLyBTZWFyY2ggZm9yIGEgJ18nIHBhcmFtZXRlciBpbiB0aGUgcXVlcnkgc3RyaW5nXG4gICAgICB2YXIgcmVQYXJhbVNlYXJjaCA9IC8oWz8mXSlfPVteJl0qL1xuICAgICAgaWYgKHJlUGFyYW1TZWFyY2gudGVzdCh0aGlzLnVybCkpIHtcbiAgICAgICAgLy8gSWYgaXQgYWxyZWFkeSBleGlzdHMgdGhlbiBzZXQgdGhlIHZhbHVlIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB0aGlzLnVybCA9IHRoaXMudXJsLnJlcGxhY2UocmVQYXJhbVNlYXJjaCwgJyQxXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGEgbmV3ICdfJyBwYXJhbWV0ZXIgdG8gdGhlIGVuZCB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdmFyIHJlUXVlcnlTdHJpbmcgPSAvXFw/L1xuICAgICAgICB0aGlzLnVybCArPSAocmVRdWVyeVN0cmluZy50ZXN0KHRoaXMudXJsKSA/ICcmJyA6ICc/JykgKyAnXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICAvLyBBdm9pZGluZyBzcGxpdCB2aWEgcmVnZXggdG8gd29yayBhcm91bmQgYSBjb21tb24gSUUxMSBidWcgd2l0aCB0aGUgY29yZS1qcyAzLjYuMCByZWdleCBwb2x5ZmlsbFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL2ZldGNoL2lzc3Vlcy83NDhcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzc1MVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzXG4gICAgLnNwbGl0KCdcXHInKVxuICAgIC5tYXAoZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICByZXR1cm4gaGVhZGVyLmluZGV4T2YoJ1xcbicpID09PSAwID8gaGVhZGVyLnN1YnN0cigxLCBoZWFkZXIubGVuZ3RoKSA6IGhlYWRlclxuICAgIH0pXG4gICAgLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHQgPT09IHVuZGVmaW5lZCA/ICcnIDogJycgKyBvcHRpb25zLnN0YXR1c1RleHRcbiAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxufVxuXG5Cb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG5SZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgdXJsOiB0aGlzLnVybFxuICB9KVxufVxuXG5SZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxudmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cblJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxufVxuXG5leHBvcnQgdmFyIERPTUV4Y2VwdGlvbiA9IGdsb2JhbC5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZml4VXJsKHVybCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVybCA9PT0gJycgJiYgZ2xvYmFsLmxvY2F0aW9uLmhyZWYgPyBnbG9iYWwubG9jYXRpb24uaHJlZiA6IHVybFxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdXJsXG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIGZpeFVybChyZXF1ZXN0LnVybCksIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyKSB7XG4gICAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHN1cHBvcnQuYXJyYXlCdWZmZXIgJiZcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgJiZcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykuaW5kZXhPZignYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykgIT09IC0xXG4gICAgICApIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcidcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5pdCAmJiB0eXBlb2YgaW5pdC5oZWFkZXJzID09PSAnb2JqZWN0JyAmJiAhKGluaXQuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbml0LmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBub3JtYWxpemVWYWx1ZShpbml0LmhlYWRlcnNbbmFtZV0pKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICB9KVxufVxuXG5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcblxuaWYgKCFnbG9iYWwuZmV0Y2gpIHtcbiAgZ2xvYmFsLmZldGNoID0gZmV0Y2hcbiAgZ2xvYmFsLkhlYWRlcnMgPSBIZWFkZXJzXG4gIGdsb2JhbC5SZXF1ZXN0ID0gUmVxdWVzdFxuICBnbG9iYWwuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1MTkpO1xuIl0sIm5hbWVzIjpbIkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZCIsIk9iamVjdCIsImZyZWV6ZSIsIkhpdEFyZWFQcmVmaXgiLCJIaXRBcmVhSGVhZCIsIkhpdEFyZWFCb2R5IiwiUGFydHNJZENvcmUiLCJQYXJ0c0FybVByZWZpeCIsIlBhcnRzQXJtTFByZWZpeCIsIlBhcnRzQXJtUlByZWZpeCIsIlBhcmFtQW5nbGVYIiwiUGFyYW1BbmdsZVkiLCJQYXJhbUFuZ2xlWiIsIlBhcmFtRXllTE9wZW4iLCJQYXJhbUV5ZUxTbWlsZSIsIlBhcmFtRXllUk9wZW4iLCJQYXJhbUV5ZVJTbWlsZSIsIlBhcmFtRXllQmFsbFgiLCJQYXJhbUV5ZUJhbGxZIiwiUGFyYW1FeWVCYWxsRm9ybSIsIlBhcmFtQnJvd0xZIiwiUGFyYW1Ccm93UlkiLCJQYXJhbUJyb3dMWCIsIlBhcmFtQnJvd1JYIiwiUGFyYW1Ccm93TEFuZ2xlIiwiUGFyYW1Ccm93UkFuZ2xlIiwiUGFyYW1Ccm93TEZvcm0iLCJQYXJhbUJyb3dSRm9ybSIsIlBhcmFtTW91dGhGb3JtIiwiUGFyYW1Nb3V0aE9wZW5ZIiwiUGFyYW1DaGVlayIsIlBhcmFtQm9keUFuZ2xlWCIsIlBhcmFtQm9keUFuZ2xlWSIsIlBhcmFtQm9keUFuZ2xlWiIsIlBhcmFtQnJlYXRoIiwiUGFyYW1Bcm1MQSIsIlBhcmFtQXJtUkEiLCJQYXJhbUFybUxCIiwiUGFyYW1Bcm1SQiIsIlBhcmFtSGFuZEwiLCJQYXJhbUhhbmRSIiwiUGFyYW1IYWlyRnJvbnQiLCJQYXJhbUhhaXJTaWRlIiwiUGFyYW1IYWlyQmFjayIsIlBhcmFtSGFpckZsdWZmeSIsIlBhcmFtU2hvdWxkZXJZIiwiUGFyYW1CdXN0WCIsIlBhcmFtQnVzdFkiLCJQYXJhbUJhc2VYIiwiUGFyYW1CYXNlWSIsIlBhcmFtTk9ORSIsIkxpdmUyREN1YmlzbUZyYW1ld29yayIsIiQiLCJDU01fTE9HX0xFVkVMX1ZFUkJPU0UiLCJDU01fTE9HX0xFVkVMX0RFQlVHIiwiQ1NNX0xPR19MRVZFTF9JTkZPIiwiQ1NNX0xPR19MRVZFTF9XQVJOSU5HIiwiQ1NNX0xPR19MRVZFTF9FUlJPUiIsIkNTTV9MT0dfTEVWRUxfT0ZGIiwiQ1NNX0xPR19MRVZFTCIsIkZyZXF1ZXN0Tm9kZSIsIkZpbGVSZWZlcmVuY2VzIiwiVXNlckRhdGEiLCJOYW1lIiwiRmlsZVBhdGgiLCJJZHMiLCJTb3VuZFBhdGgiLCJGYWRlSW5UaW1lIiwiRmFkZU91dFRpbWUiLCJMaXBTeW5jIiwiRXllQmxpbmsiLCJidWZmZXIiLCJzaXplIiwiX2pzb24iLCJDdWJpc21Kc29uIiwiY3JlYXRlIiwiX2pzb25WYWx1ZSIsImNzbVZlY3RvciIsInB1c2hCYWNrIiwiZ2V0Um9vdCIsImdldFZhbHVlQnlTdHJpbmciLCJyZWxlYXNlIiwiZGVsZXRlIiwidGhpcyIsIkdldEpzb24iLCJnZXRNb2RlbEZpbGVOYW1lIiwiaXNFeGlzdE1vZGVsRmlsZSIsImF0IiwiRnJlcXVlc3ROb2RlX01vYyIsImdldFJhd1N0cmluZyIsImdldFRleHR1cmVDb3VudCIsImlzRXhpc3RUZXh0dXJlRmlsZXMiLCJGcmVxdWVzdE5vZGVfVGV4dHVyZXMiLCJnZXRTaXplIiwiZ2V0VGV4dHVyZURpcmVjdG9yeSIsInBhdGhBcnJheSIsImdldFZhbHVlQnlJbmRleCIsInNwbGl0IiwiYXJyYXlMZW5ndGgiLCJsZW5ndGgiLCJ0ZXh0dXJlRGlyZWN0b3J5U3RyIiwiaSIsImdldFRleHR1cmVGaWxlTmFtZSIsImluZGV4IiwiZ2V0SGl0QXJlYXNDb3VudCIsImlzRXhpc3RIaXRBcmVhcyIsIkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcyIsImdldEhpdEFyZWFJZCIsIkN1YmlzbUZyYW1ld29yayIsImdldElkTWFuYWdlciIsImdldElkIiwiZ2V0SGl0QXJlYU5hbWUiLCJnZXRQaHlzaWNzRmlsZU5hbWUiLCJpc0V4aXN0UGh5c2ljc0ZpbGUiLCJGcmVxdWVzdE5vZGVfUGh5c2ljcyIsImdldFBvc2VGaWxlTmFtZSIsImlzRXhpc3RQb3NlRmlsZSIsIkZyZXF1ZXN0Tm9kZV9Qb3NlIiwiZ2V0RXhwcmVzc2lvbkNvdW50IiwiaXNFeGlzdEV4cHJlc3Npb25GaWxlIiwiRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zIiwiZ2V0RXhwcmVzc2lvbk5hbWUiLCJnZXRFeHByZXNzaW9uRmlsZU5hbWUiLCJnZXRNb3Rpb25Hcm91cENvdW50IiwiaXNFeGlzdE1vdGlvbkdyb3VwcyIsIkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zIiwiZ2V0S2V5cyIsImdldE1vdGlvbkdyb3VwTmFtZSIsImdldE1vdGlvbkNvdW50IiwiZ3JvdXBOYW1lIiwiaXNFeGlzdE1vdGlvbkdyb3VwTmFtZSIsImdldE1vdGlvbkZpbGVOYW1lIiwiZ2V0TW90aW9uU291bmRGaWxlTmFtZSIsImlzRXhpc3RNb3Rpb25Tb3VuZEZpbGUiLCJnZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUiLCJpc0V4aXN0TW90aW9uRmFkZUluIiwidG9GbG9hdCIsImdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUiLCJpc0V4aXN0TW90aW9uRmFkZU91dCIsImdldFVzZXJEYXRhRmlsZSIsImlzRXhpc3RVc2VyRGF0YUZpbGUiLCJnZXRMYXlvdXRNYXAiLCJvdXRMYXlvdXRNYXAiLCJtYXAiLCJnZXRNYXAiLCJyZXQiLCJpdGUiLCJiZWdpbiIsIm5vdEVxdWFsIiwiZW5kIiwicHJlSW5jcmVtZW50Iiwic2V0VmFsdWUiLCJwdHIiLCJmaXJzdCIsInNlY29uZCIsImdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQiLCJpc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzIiwibnVtIiwiRnJlcXVlc3ROb2RlX0dyb3VwcyIsInJlZkkiLCJpc051bGwiLCJpc0Vycm9yIiwiZ2V0VmVjdG9yIiwiZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZCIsImdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCIsImlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycyIsImdldExpcFN5bmNQYXJhbWV0ZXJJZCIsIm5vZGUiLCJJQ3ViaXNtTW9kZWxTZXR0aW5nIiwiQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiIsIl9jdXJyZW50VGltZSIsIkN1YmlzbUJyZWF0aCIsImluc3RhbmNlIiwic2V0UGFyYW1ldGVycyIsImJyZWF0aFBhcmFtZXRlcnMiLCJfYnJlYXRoUGFyYW1ldGVycyIsImdldFBhcmFtZXRlcnMiLCJ1cGRhdGVQYXJhbWV0ZXJzIiwibW9kZWwiLCJkZWx0YVRpbWVTZWNvbmRzIiwidCIsImRhdGEiLCJhZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQiLCJwYXJhbWV0ZXJJZCIsIm9mZnNldCIsInBlYWsiLCJNYXRoIiwic2luIiwiY3ljbGUiLCJ3ZWlnaHQiLCJCcmVhdGhQYXJhbWV0ZXJEYXRhIiwidW5kZWZpbmVkIiwiRXllU3RhdGUiLCJtb2RlbFNldHRpbmciLCJfYmxpbmtpbmdTdGF0ZSIsIkV5ZVN0YXRlX0ZpcnN0IiwiX25leHRCbGlua2luZ1RpbWUiLCJfc3RhdGVTdGFydFRpbWVTZWNvbmRzIiwiX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzIiwiX2Nsb3NpbmdTZWNvbmRzIiwiX2Nsb3NlZFNlY29uZHMiLCJfb3BlbmluZ1NlY29uZHMiLCJfdXNlclRpbWVTZWNvbmRzIiwiX3BhcmFtZXRlcklkcyIsIkN1YmlzbUV5ZUJsaW5rIiwiZXllQmxpbmsiLCJzZXRCbGlua2luZ0ludGVydmFsIiwiYmxpbmtpbmdJbnRlcnZhbCIsInNldEJsaW5raW5nU2V0dGluZyIsImNsb3NpbmciLCJjbG9zZWQiLCJvcGVuaW5nIiwic2V0UGFyYW1ldGVySWRzIiwicGFyYW1ldGVySWRzIiwiZ2V0UGFyYW1ldGVySWRzIiwicGFyYW1ldGVyVmFsdWUiLCJFeWVTdGF0ZV9DbG9zaW5nIiwiRXllU3RhdGVfQ2xvc2VkIiwiRXllU3RhdGVfT3BlbmluZyIsIkV5ZVN0YXRlX0ludGVydmFsIiwiZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmciLCJDbG9zZUlmWmVybyIsInNldFBhcmFtZXRlclZhbHVlQnlJZCIsInIiLCJyYW5kb20iLCJGYWRlSW4iLCJMaW5rIiwiX2ZhZGVUaW1lU2Vjb25kcyIsIl9sYXN0TW9kZWwiLCJfcGFydEdyb3VwcyIsIl9wYXJ0R3JvdXBDb3VudHMiLCJwb3NlM2pzb24iLCJDdWJpc21Qb3NlIiwianNvbiIsInJvb3QiLCJwb3NlTGlzdEluZm8iLCJwb3NlQ291bnQiLCJwb3NlSW5kZXgiLCJpZExpc3RJbmZvIiwiaWRDb3VudCIsImdyb3VwQ291bnQiLCJncm91cEluZGV4IiwicGFydEluZm8iLCJwYXJ0RGF0YSIsIlBhcnREYXRhIiwicGFydElkIiwibGlua0xpc3RJbmZvIiwibGlua0NvdW50IiwibGlua0luZGV4IiwibGlua1BhcnQiLCJsaW5rSWQiLCJnZXRTdHJpbmciLCJsaW5rIiwiY2xvbmUiLCJwb3NlIiwicmVzZXQiLCJiZWdpbkluZGV4IiwicGFydEdyb3VwQ291bnQiLCJkb0ZhZGUiLCJjb3B5UGFydE9wYWNpdGllcyIsImoiLCJpbml0aWFsaXplIiwicGFydHNJbmRleCIsInBhcnRJbmRleCIsInBhcmFtSW5kZXgiLCJwYXJhbWV0ZXJJbmRleCIsInNldFBhcnRPcGFjaXR5QnlJbmRleCIsInNldFBhcmFtZXRlclZhbHVlQnlJbmRleCIsImsiLCJvcGFjaXR5IiwiZ2V0UGFydE9wYWNpdHlCeUluZGV4IiwibGlua1BhcnRJbmRleCIsInZpc2libGVQYXJ0SW5kZXgiLCJuZXdPcGFjaXR5IiwiZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4IiwiYTEiLCJ2IiwiYXNzaWdubWVudCIsImdldFBhcmFtZXRlckluZGV4IiwiZ2V0UGFydEluZGV4IiwiY2xvbmVQYXJ0RGF0YSIsImluY3JlbWVudCIsImlkIiwiX2lkIiwiY3NtU3RyaW5nIiwiaXNFcXVhbCIsImMiLCJzIiwiQ3ViaXNtSWQiLCJpc05vdEVxdWFsIiwiX2lkcyIsInNldCIsInJlZ2lzdGVySWRzIiwiaWRzIiwicmVnaXN0ZXJJZCIsInJlc3VsdCIsImZpbmRJZCIsImlzRXhpc3QiLCJDdWJpc21JZE1hbmFnZXIiLCJlbmRQdHIiLCJ0ZXN0QyIsInNsaWNlIiwidGVzdCIsInN1YnN0cmluZyIsIm51bWJlciIsIk51bWJlciIsImlzTmFOIiwiZCIsInBhcnNlRmxvYXQiLCJOYU4iLCJzX2lzU3RhcnRlZCIsInNfaXNJbml0aWFsaXplZCIsInNfb3B0aW9uIiwic19jdWJpc21JZE1hbmFnZXIiLCJDb25zdGFudCIsInZlcnRleE9mZnNldCIsInZlcnRleFN0ZXAiLCJhZGRyZXNzIiwic3RhcnRVcCIsIm9wdGlvbiIsIkN1YmlzbUxvZ0luZm8iLCJMaXZlMkRDdWJpc21Db3JlIiwiTG9nZ2luZyIsImNzbVNldExvZ0Z1bmN0aW9uIiwibG9nRnVuY3Rpb24iLCJ2ZXJzaW9uIiwiVmVyc2lvbiIsImNzbUdldFZlcnNpb24iLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJ2ZXJzaW9uTnVtYmVyIiwiY2xlYW5VcCIsIkNTTV9BU1NFUlQiLCJDdWJpc21Mb2dXYXJuaW5nIiwiVmFsdWUiLCJzdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCIsImRpc3Bvc2UiLCJzdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCIsIkN1YmlzbVJlbmRlcmVyIiwic3RhdGljUmVsZWFzZSIsImlzU3RhcnRlZCIsImlzSW5pdGlhbGl6ZWQiLCJjb3JlTG9nRnVuY3Rpb24iLCJtZXNzYWdlIiwiY3NtR2V0TG9nRnVuY3Rpb24iLCJnZXRMb2dnaW5nTGV2ZWwiLCJsb2dnaW5nTGV2ZWwiLCJMb2dMZXZlbCIsIkxvZ0xldmVsX09mZiIsIk9wdGlvbiIsImNzbURlbGV0ZSIsInJhbmdlIiwidmFsdWUiLCJtaW4iLCJtYXgiLCJ4IiwiY29zIiwiYWJzIiwic3FydCIsImNicnQiLCJjeCIsImlzTmVnYXRpdmVOdW1iZXIiLCJJbmZpbml0eSIsImV4cCIsImxvZyIsImdldEVhc2luZ1NpbmUiLCJQSSIsImxlZnQiLCJyaWdodCIsImRlZ3JlZXNUb1JhZGlhbiIsImRlZ3JlZXMiLCJyYWRpYW5Ub0RlZ3JlZXMiLCJyYWRpYW4iLCJkaXJlY3Rpb25Ub1JhZGlhbiIsImZyb20iLCJ0byIsImF0YW4yIiwieSIsImRpcmVjdGlvblRvRGVncmVlcyIsImRlZ3JlZSIsInJhZGlhblRvRGlyZWN0aW9uIiwidG90YWxBbmdsZSIsIkN1YmlzbVZlY3RvcjIiLCJxdWFkcmF0aWNFcXVhdGlvbiIsImEiLCJiIiwiQ3ViaXNtTWF0aCIsIkVwc2lsb24iLCJjYXJkYW5vQWxnb3JpdGhtRm9yQmV6aWVyIiwiYmEiLCJjYSIsInAiLCJwMyIsInEiLCJxMiIsImRpc2NyaW1pbmFudCIsInRocmVzaG9sZCIsImNlbnRlciIsIm1wMyIsIm1wMzMiLCJjb3NwaGkiLCJwaGkiLCJhY29zIiwidDEiLCJyb290MiIsInJvb3QzIiwic2QiLCJyb290MSIsIl90ciIsIkZsb2F0MzJBcnJheSIsImxvYWRJZGVudGl0eSIsIm11bHRpcGx5IiwiZHN0Iiwic2V0TWF0cml4IiwidHIiLCJnZXRBcnJheSIsImdldFNjYWxlWCIsImdldFNjYWxlWSIsImdldFRyYW5zbGF0ZVgiLCJnZXRUcmFuc2xhdGVZIiwidHJhbnNmb3JtWCIsInNyYyIsInRyYW5zZm9ybVkiLCJpbnZlcnRUcmFuc2Zvcm1YIiwiaW52ZXJ0VHJhbnNmb3JtWSIsInRyYW5zbGF0ZVJlbGF0aXZlIiwidHIxIiwiQ3ViaXNtTWF0cml4NDQiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInNjYWxlUmVsYXRpdmUiLCJzY2FsZSIsIm11bHRpcGx5QnlNYXRyaXgiLCJtIiwiY2xvbmVNYXRyaXgiLCJ3IiwiaCIsIl93aWR0aCIsIl9oZWlnaHQiLCJzZXRIZWlnaHQiLCJzZXRXaWR0aCIsInNjYWxlWCIsInNjYWxlWSIsInNldFBvc2l0aW9uIiwic2V0Q2VudGVyUG9zaXRpb24iLCJjZW50ZXJYIiwiY2VudGVyWSIsInRvcCIsInNldFkiLCJib3R0b20iLCJzZXRYIiwic2V0dXBGcm9tTGF5b3V0IiwibGF5b3V0Iiwia2V5IiwiQ3ViaXNtTW9kZWxNYXRyaXgiLCJfZmFjZVRhcmdldFgiLCJfZmFjZVRhcmdldFkiLCJfZmFjZVgiLCJfZmFjZVkiLCJfZmFjZVZYIiwiX2ZhY2VWWSIsIl9sYXN0VGltZVNlY29uZHMiLCJ1cGRhdGUiLCJtYXhWIiwiZGVsdGFUaW1lV2VpZ2h0IiwibWF4QSIsInRpbWVUb01heFNwZWVkIiwiZHgiLCJkeSIsInZ5IiwiYXgiLCJheSIsImN1clYiLCJnZXRYIiwiZ2V0WSIsIkN1YmlzbVRhcmdldFBvaW50IiwiYWRkIiwidmVjdG9yMiIsInN1YnN0cmFjdCIsIm11bHRpcGx5QnlTY2FsZXIiLCJzY2FsYXIiLCJkaXZpc2lvbiIsImRpdmlzaW9uQnlTY2FsYXIiLCJnZXRMZW5ndGgiLCJnZXREaXN0YW5jZVdpdGgiLCJkb3QiLCJub3JtYWxpemUiLCJwb3ciLCJyaHMiLCJfc2NyZWVuTGVmdCIsIl9zY3JlZW5SaWdodCIsIl9zY3JlZW5Ub3AiLCJfc2NyZWVuQm90dG9tIiwiX21heExlZnQiLCJfbWF4UmlnaHQiLCJfbWF4VG9wIiwiX21heEJvdHRvbSIsIl9tYXhTY2FsZSIsIl9taW5TY2FsZSIsImFkanVzdFRyYW5zbGF0ZSIsImFkanVzdFNjYWxlIiwiY3kiLCJtYXhTY2FsZSIsImdldE1heFNjYWxlIiwibWluU2NhbGUiLCJnZXRNaW5TY2FsZSIsInRhcmdldFNjYWxlIiwidHIyIiwidHIzIiwic2V0U2NyZWVuUmVjdCIsInNldE1heFNjcmVlblJlY3QiLCJzZXRNYXhTY2FsZSIsInNldE1pblNjYWxlIiwiaXNNYXhTY2FsZSIsImlzTWluU2NhbGUiLCJnZXRTY3JlZW5MZWZ0IiwiZ2V0U2NyZWVuUmlnaHQiLCJnZXRTY3JlZW5Cb3R0b20iLCJnZXRTY3JlZW5Ub3AiLCJnZXRNYXhMZWZ0IiwiZ2V0TWF4UmlnaHQiLCJnZXRNYXhCb3R0b20iLCJnZXRNYXhUb3AiLCJDdWJpc21WaWV3TWF0cml4IiwibW9jIiwiX21vYyIsIl9tb2RlbENvdW50IiwiX21vY1ZlcnNpb24iLCJtb2NCeXRlcyIsImN1YmlzbU1vYyIsIk1vYyIsImZyb21BcnJheUJ1ZmZlciIsIkN1YmlzbU1vYyIsImNzbUdldE1vY1ZlcnNpb24iLCJfcmVsZWFzZSIsImNyZWF0ZU1vZGVsIiwiY3ViaXNtTW9kZWwiLCJNb2RlbCIsImZyb21Nb2MiLCJDdWJpc21Nb2RlbCIsImRlbGV0ZU1vZGVsIiwiZ2V0TGF0ZXN0TW9jVmVyc2lvbiIsImNzbUdldExhdGVzdE1vY1ZlcnNpb24iLCJnZXRNb2NWZXJzaW9uIiwiaXNPdmVyd3JpdHRlbiIsIkNvbG9yIiwiQ3ViaXNtVGV4dHVyZUNvbG9yIiwiRHJhd2FibGVDb2xvckRhdGEiLCJfbW9kZWwiLCJfcGFyYW1ldGVyVmFsdWVzIiwiX3BhcmFtZXRlck1heGltdW1WYWx1ZXMiLCJfcGFyYW1ldGVyTWluaW11bVZhbHVlcyIsIl9wYXJ0T3BhY2l0aWVzIiwiX3NhdmVkUGFyYW1ldGVycyIsIl9kcmF3YWJsZUlkcyIsIl9wYXJ0SWRzIiwiX2lzT3ZlcndyaXR0ZW5Nb2RlbE11bHRpcGx5Q29sb3JzIiwiX2lzT3ZlcndyaXR0ZW5Nb2RlbFNjcmVlbkNvbG9ycyIsIl91c2VyTXVsdGlwbHlDb2xvcnMiLCJfdXNlclNjcmVlbkNvbG9ycyIsIl9ub3RFeGlzdFBhcnRJZCIsImNzbU1hcCIsIl9ub3RFeGlzdFBhcmFtZXRlcklkIiwiX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzIiwiX25vdEV4aXN0UGFydE9wYWNpdGllcyIsImRyYXdhYmxlcyIsInJlc2V0RHluYW1pY0ZsYWdzIiwiZ2V0Q2FudmFzV2lkdGgiLCJjYW52YXNpbmZvIiwiQ2FudmFzV2lkdGgiLCJQaXhlbHNQZXJVbml0IiwiZ2V0Q2FudmFzSGVpZ2h0IiwiQ2FudmFzSGVpZ2h0Iiwic2F2ZVBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJDb3VudCIsInBhcmFtZXRlcnMiLCJjb3VudCIsInNhdmVkUGFyYW1ldGVyQ291bnQiLCJnZXRNdWx0aXBseUNvbG9yIiwiZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsTXVsdGlwbHlDb2xvcnMiLCJnZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVNdWx0aXBseUNvbG9ycyIsImdldERyYXdhYmxlTXVsdGlwbHlDb2xvciIsImdldFNjcmVlbkNvbG9yIiwiZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsU2NyZWVuQ29sb3JzIiwiZ2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlU2NyZWVuQ29sb3JzIiwiZ2V0RHJhd2FibGVTY3JlZW5Db2xvciIsInNldE11bHRpcGx5Q29sb3JCeVRleHR1cmVDb2xvciIsImNvbG9yIiwic2V0TXVsdGlwbHlDb2xvckJ5UkdCQSIsIlIiLCJHIiwiQiIsIkEiLCJnIiwic2V0U2NyZWVuQ29sb3JCeVRleHR1cmVDb2xvciIsInNldFNjcmVlbkNvbG9yQnlSR0JBIiwic2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsTXVsdGlwbHlDb2xvcnMiLCJzZXRPdmVyd3JpdGVGbGFnRm9yTW9kZWxTY3JlZW5Db2xvcnMiLCJkcmF3YWJsZWluZGV4Iiwic2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlTXVsdGlwbHlDb2xvcnMiLCJzZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVTY3JlZW5Db2xvcnMiLCJnZXRNb2RlbCIsInBhcnRDb3VudCIsInBhcnRzIiwiZ2V0VmFsdWUiLCJhcHBlbmRLZXkiLCJnZXRQYXJ0Q291bnQiLCJzZXRQYXJ0T3BhY2l0eUJ5SWQiLCJnZXRQYXJ0T3BhY2l0eUJ5SWQiLCJnZXRQYXJhbWV0ZXJDb3VudCIsImdldFBhcmFtZXRlclR5cGUiLCJ0eXBlcyIsImdldFBhcmFtZXRlck1heGltdW1WYWx1ZSIsIm1heGltdW1WYWx1ZXMiLCJnZXRQYXJhbWV0ZXJNaW5pbXVtVmFsdWUiLCJtaW5pbXVtVmFsdWVzIiwiZ2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlIiwiZGVmYXVsdFZhbHVlcyIsImdldFBhcmFtZXRlclZhbHVlQnlJZCIsImFkZFBhcmFtZXRlclZhbHVlQnlJbmRleCIsIm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkIiwibXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgiLCJnZXREcmF3YWJsZUluZGV4IiwiZHJhd2FibGVJZCIsImRyYXdhYmxlQ291bnQiLCJkcmF3YWJsZUluZGV4IiwiZ2V0RHJhd2FibGVDb3VudCIsImdldERyYXdhYmxlSWQiLCJnZXREcmF3YWJsZVJlbmRlck9yZGVycyIsInJlbmRlck9yZGVycyIsImdldERyYXdhYmxlVGV4dHVyZUluZGljZXMiLCJnZXREcmF3YWJsZVRleHR1cmVJbmRleCIsInRleHR1cmVJbmRpY2VzIiwiZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZSIsImR5bmFtaWNGbGFncyIsIlV0aWxzIiwiaGFzVmVydGV4UG9zaXRpb25zRGlkQ2hhbmdlQml0IiwiZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50IiwiaW5kZXhDb3VudHMiLCJnZXREcmF3YWJsZVZlcnRleENvdW50IiwidmVydGV4Q291bnRzIiwiZ2V0RHJhd2FibGVWZXJ0aWNlcyIsImdldERyYXdhYmxlVmVydGV4UG9zaXRpb25zIiwiZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzIiwiaW5kaWNlcyIsInZlcnRleFBvc2l0aW9ucyIsImdldERyYXdhYmxlVmVydGV4VXZzIiwidmVydGV4VXZzIiwiZ2V0RHJhd2FibGVPcGFjaXR5Iiwib3BhY2l0aWVzIiwibXVsdGlwbHlDb2xvcnMiLCJtdWx0aXBseUNvbG9yIiwic2NyZWVuQ29sb3JzIiwic2NyZWVuQ29sb3IiLCJnZXREcmF3YWJsZVBhcmVudFBhcnRJbmRleCIsInBhcmVudFBhcnRJbmRpY2VzIiwiZ2V0RHJhd2FibGVDdWxsaW5nIiwiY29uc3RhbnRGbGFncyIsImhhc0lzRG91YmxlU2lkZWRCaXQiLCJnZXREcmF3YWJsZUJsZW5kTW9kZSIsImhhc0JsZW5kQWRkaXRpdmVCaXQiLCJDdWJpc21CbGVuZE1vZGUiLCJDdWJpc21CbGVuZE1vZGVfQWRkaXRpdmUiLCJoYXNCbGVuZE11bHRpcGxpY2F0aXZlQml0IiwiQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlIiwiQ3ViaXNtQmxlbmRNb2RlX05vcm1hbCIsImdldERyYXdhYmxlSW52ZXJ0ZWRNYXNrQml0IiwiaGFzSXNJbnZlcnRlZE1hc2tCaXQiLCJnZXREcmF3YWJsZU1hc2tzIiwibWFza3MiLCJnZXREcmF3YWJsZU1hc2tDb3VudHMiLCJtYXNrQ291bnRzIiwiaXNVc2luZ01hc2tpbmciLCJnZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlIiwiaGFzSXNWaXNpYmxlQml0IiwiZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1Zpc2liaWxpdHlEaWRDaGFuZ2UiLCJoYXNWaXNpYmlsaXR5RGlkQ2hhbmdlQml0IiwiZ2V0RHJhd2FibGVEeW5hbWljRmxhZ09wYWNpdHlEaWRDaGFuZ2UiLCJoYXNPcGFjaXR5RGlkQ2hhbmdlQml0IiwiZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1JlbmRlck9yZGVyRGlkQ2hhbmdlIiwiaGFzUmVuZGVyT3JkZXJEaWRDaGFuZ2VCaXQiLCJnZXREcmF3YWJsZUR5bmFtaWNGbGFnQmxlbmRDb2xvckRpZENoYW5nZSIsImhhc0JsZW5kQ29sb3JEaWRDaGFuZ2VCaXQiLCJsb2FkUGFyYW1ldGVycyIsInZhbHVlcyIsInByZXBhcmVDYXBhY2l0eSIsInBhcnRJZHMiLCJkcmF3YWJsZUlkcyIsInVwZGF0ZVNpemUiLCJDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSIsIl91c2VyRGF0YU5vZGVzIiwiX2FydE1lc2hVc2VyRGF0YU5vZGUiLCJDdWJpc21Nb2RlbFVzZXJEYXRhIiwicGFyc2VVc2VyRGF0YSIsIm1vZGVsVXNlckRhdGEiLCJnZXRBcnRNZXNoVXNlckRhdGFzIiwiQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24iLCJ0eXBlT2ZBcnRNZXNoIiwibm9kZUNvdW50IiwiZ2V0VXNlckRhdGFDb3VudCIsImFkZE5vZGUiLCJ0YXJnZXRJZCIsImdldFVzZXJEYXRhSWQiLCJ0YXJnZXRUeXBlIiwiZ2V0VXNlckRhdGFUYXJnZXRUeXBlIiwiZ2V0VXNlckRhdGFWYWx1ZSIsIk1ldGEiLCJ0b0ludCIsImdldFRvdGFsVXNlckRhdGFTaXplIiwibG9hZE1vdGlvbiIsIm5hbWUiLCJvbkZpbmlzaGVkTW90aW9uSGFuZGxlciIsIkN1YmlzbU1vdGlvbiIsIl9tb3Rpb25NYW5hZ2VyIiwiX2V4cHJlc3Npb25NYW5hZ2VyIiwiX2V5ZUJsaW5rIiwiX2JyZWF0aCIsIl9tb2RlbE1hdHJpeCIsIl9wb3NlIiwiX2RyYWdNYW5hZ2VyIiwiX3BoeXNpY3MiLCJfbW9kZWxVc2VyRGF0YSIsIl9pbml0aWFsaXplZCIsIl91cGRhdGluZyIsIl9vcGFjaXR5IiwiX2xpcHN5bmMiLCJfbGFzdExpcFN5bmNWYWx1ZSIsIl9kcmFnWCIsIl9kcmFnWSIsIl9hY2NlbGVyYXRpb25YIiwiX2FjY2VsZXJhdGlvblkiLCJfYWNjZWxlcmF0aW9uWiIsIl9kZWJ1Z01vZGUiLCJfcmVuZGVyZXIiLCJDdWJpc21Nb3Rpb25NYW5hZ2VyIiwic2V0RXZlbnRDYWxsYmFjayIsIkN1YmlzbVVzZXJNb2RlbCIsImN1YmlzbURlZmF1bHRNb3Rpb25FdmVudENhbGxiYWNrIiwic2V0SW5pdGlhbGl6ZWQiLCJpc1VwZGF0aW5nIiwic2V0VXBkYXRpbmciLCJzZXREcmFnZ2luZyIsInNldEFjY2VsZXJhdGlvbiIsInoiLCJnZXRNb2RlbE1hdHJpeCIsInNldE9wYWNpdHkiLCJnZXRPcGFjaXR5IiwibG9hZE1vZGVsIiwiQ3ViaXNtTG9nRXJyb3IiLCJsb2FkRXhwcmVzc2lvbiIsIkN1YmlzbUV4cHJlc3Npb25Nb3Rpb24iLCJsb2FkUG9zZSIsImxvYWRVc2VyRGF0YSIsImxvYWRQaHlzaWNzIiwiQ3ViaXNtUGh5c2ljcyIsImlzSGl0IiwicG9pbnRYIiwicG9pbnRZIiwiZHJhd0luZGV4IiwidmVydGljZXMiLCJ0eCIsInR5IiwiZ2V0UmVuZGVyZXIiLCJjcmVhdGVSZW5kZXJlciIsImRlbGV0ZVJlbmRlcmVyIiwiQ3ViaXNtUmVuZGVyZXJfV2ViR0wiLCJtb3Rpb25FdmVudEZpcmVkIiwiZXZlbnRWYWx1ZSIsImNhbGxlciIsImN1c3RvbURhdGEiLCJzZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIiLCJfb25GaW5pc2hlZE1vdGlvbiIsImdldEZpbmlzaGVkTW90aW9uSGFuZGxlciIsIl9mYWRlSW5TZWNvbmRzIiwiX2ZhZGVPdXRTZWNvbmRzIiwiX3dlaWdodCIsIl9vZmZzZXRTZWNvbmRzIiwiX2ZpcmVkRXZlbnRWYWx1ZXMiLCJtb3Rpb24iLCJtb3Rpb25RdWV1ZUVudHJ5IiwidXNlclRpbWVTZWNvbmRzIiwiaXNBdmFpbGFibGUiLCJpc0ZpbmlzaGVkIiwic2V0SXNTdGFydGVkIiwic2V0U3RhcnRUaW1lIiwic2V0RmFkZUluU3RhcnRUaW1lIiwiZHVyYXRpb24iLCJnZXREdXJhdGlvbiIsImdldEVuZFRpbWUiLCJzZXRFbmRUaW1lIiwiZ2V0U3RhcnRUaW1lIiwiZmFkZVdlaWdodCIsImdldEZhZGVJblN0YXJ0VGltZSIsInNldFN0YXRlIiwiZG9VcGRhdGVQYXJhbWV0ZXJzIiwic2V0SXNGaW5pc2hlZCIsInNldEZhZGVJblRpbWUiLCJmYWRlSW5TZWNvbmRzIiwic2V0RmFkZU91dFRpbWUiLCJmYWRlT3V0U2Vjb25kcyIsImdldEZhZGVPdXRUaW1lIiwiZ2V0RmFkZUluVGltZSIsInNldFdlaWdodCIsImdldFdlaWdodCIsImdldExvb3BEdXJhdGlvbiIsInNldE9mZnNldFRpbWUiLCJvZmZzZXRTZWNvbmRzIiwiZ2V0RmlyZWRFdmVudCIsImJlZm9yZUNoZWNrVGltZVNlY29uZHMiLCJtb3Rpb25UaW1lU2Vjb25kcyIsIkFDdWJpc21Nb3Rpb24iLCJFeHByZXNzaW9uQmxlbmRUeXBlIiwiRXhwcmVzc2lvbktleVBhcmFtZXRlcnMiLCJFeHByZXNzaW9uS2V5QmxlbmQiLCJfcGFyYW1ldGVycyIsImV4cHJlc3Npb24iLCJibGVuZFR5cGUiLCJwYXJhbSIsIkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkIiwiRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseSIsIkV4cHJlc3Npb25CbGVuZFR5cGVfT3ZlcndyaXRlIiwiaXRlbSIsIkV4cHJlc3Npb25QYXJhbWV0ZXIiLCJwYXJhbWV0ZXIiLCJsZXJwUG9pbnRzIiwiQ3ViaXNtTW90aW9uUG9pbnQiLCJ0aW1lIiwibGluZWFyRXZhbHVhdGUiLCJwb2ludHMiLCJiZXppZXJFdmFsdWF0ZSIsInAwMSIsInAxMiIsInAyMyIsInAwMTIiLCJwMTIzIiwiYmV6aWVyRXZhbHVhdGVDYXJkYW5vSW50ZXJwcmV0YXRpb24iLCJ4MSIsIngyIiwiY3gxIiwiY3gyIiwic3RlcHBlZEV2YWx1YXRlIiwiaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZSIsImV2YWx1YXRlQ3VydmUiLCJtb3Rpb25EYXRhIiwiY3VydmUiLCJjdXJ2ZXMiLCJ0YXJnZXQiLCJ0b3RhbFNlZ21lbnRDb3VudCIsImJhc2VTZWdtZW50SW5kZXgiLCJzZWdtZW50Q291bnQiLCJwb2ludFBvc2l0aW9uIiwic2VnbWVudHMiLCJiYXNlUG9pbnRJbmRleCIsInNlZ21lbnRUeXBlIiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUiLCJDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXIiLCJzZWdtZW50IiwiZXZhbHVhdGUiLCJnZXQiLCJfc291cmNlRnJhbWVSYXRlIiwiX2xvb3BEdXJhdGlvblNlY29uZHMiLCJfaXNMb29wIiwiX2lzTG9vcEZhZGVJbiIsIl9sYXN0V2VpZ2h0IiwiX21vdGlvbkRhdGEiLCJfbW9kZWxDdXJ2ZUlkRXllQmxpbmsiLCJfbW9kZWxDdXJ2ZUlkTGlwU3luYyIsIl9leWVCbGlua1BhcmFtZXRlcklkcyIsIl9saXBTeW5jUGFyYW1ldGVySWRzIiwicGFyc2UiLCJmcHMiLCJ0aW1lT2Zmc2V0U2Vjb25kcyIsImxpcFN5bmNWYWx1ZSIsIk1BWF9WQUxVRSIsImV5ZUJsaW5rVmFsdWUiLCJNYXhUYXJnZXRTaXplIiwibGlwU3luY0ZsYWdzIiwiZXllQmxpbmtGbGFncyIsIkN1YmlzbUxvZ0RlYnVnIiwidG1wRmFkZUluIiwidG1wRmFkZU91dCIsImN1cnZlQ291bnQiLCJ0eXBlIiwiQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQiLCJDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbCIsIkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlciIsInNvdXJjZVZhbHVlIiwiZmFkZUluVGltZSIsImZhZGVPdXRUaW1lIiwiZmluIiwiZm91dCIsIkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5Iiwic2V0SXNMb29wIiwibG9vcCIsImlzTG9vcCIsInNldElzTG9vcEZhZGVJbiIsImxvb3BGYWRlSW4iLCJpc0xvb3BGYWRlSW4iLCJzZXRQYXJhbWV0ZXJGYWRlSW5UaW1lIiwic2V0UGFyYW1ldGVyRmFkZU91dFRpbWUiLCJnZXRQYXJhbWV0ZXJGYWRlSW5UaW1lIiwiZ2V0UGFyYW1ldGVyRmFkZU91dFRpbWUiLCJzZXRFZmZlY3RJZHMiLCJleWVCbGlua1BhcmFtZXRlcklkcyIsImxpcFN5bmNQYXJhbWV0ZXJJZHMiLCJtb3Rpb25Kc29uIiwiQ3ViaXNtTW90aW9uRGF0YSIsIkN1YmlzbU1vdGlvbkpzb24iLCJnZXRNb3Rpb25EdXJhdGlvbiIsImlzTW90aW9uTG9vcCIsImdldE1vdGlvbkN1cnZlQ291bnQiLCJnZXRNb3Rpb25GcHMiLCJldmVudENvdW50IiwiZ2V0RXZlbnRDb3VudCIsImFyZUJlemllcnNSZXN0cnVjdGVkIiwiZ2V0RXZhbHVhdGlvbk9wdGlvbkZsYWciLCJFdmFsdWF0aW9uT3B0aW9uRmxhZyIsIkV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkIiwiaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUiLCJnZXRNb3Rpb25GYWRlSW5UaW1lIiwiaXNFeGlzdE1vdGlvbkZhZGVPdXRUaW1lIiwiZ2V0TW90aW9uRmFkZU91dFRpbWUiLCJDdWJpc21Nb3Rpb25DdXJ2ZSIsImdldE1vdGlvblRvdGFsU2VnbWVudENvdW50IiwiQ3ViaXNtTW90aW9uU2VnbWVudCIsImdldE1vdGlvblRvdGFsUG9pbnRDb3VudCIsImV2ZW50cyIsIkN1YmlzbU1vdGlvbkV2ZW50IiwidG90YWxQb2ludENvdW50IiwiZ2V0TW90aW9uQ3VydmVUYXJnZXQiLCJnZXRNb3Rpb25DdXJ2ZUlkIiwiaXNFeGlzdE1vdGlvbkN1cnZlRmFkZUluVGltZSIsImdldE1vdGlvbkN1cnZlRmFkZUluVGltZSIsImlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lIiwiZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZSIsInNlZ21lbnRQb3NpdGlvbiIsImdldE1vdGlvbkN1cnZlU2VnbWVudENvdW50IiwiZ2V0TW90aW9uQ3VydmVTZWdtZW50IiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyIiwiQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZCIsIkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkIiwidXNlcmRhdGFjb3VudCIsImZpcmVUaW1lIiwiZ2V0RXZlbnRUaW1lIiwiZ2V0RXZlbnRWYWx1ZSIsInUiLCJDdXJ2ZXMiLCJTZWdtZW50cyIsInRvQm9vbGVhbiIsImZsYWdUeXBlIiwiY3VydmVJbmRleCIsInNlZ21lbnRJbmRleCIsImdldFRvdGFsRXZlbnRWYWx1ZVNpemUiLCJ1c2VyRGF0YUluZGV4IiwiX2N1cnJlbnRQcmlvcml0eSIsIl9yZXNlcnZlUHJpb3JpdHkiLCJnZXRDdXJyZW50UHJpb3JpdHkiLCJnZXRSZXNlcnZlUHJpb3JpdHkiLCJzZXRSZXNlcnZlUHJpb3JpdHkiLCJ2YWwiLCJzdGFydE1vdGlvblByaW9yaXR5IiwiYXV0b0RlbGV0ZSIsInByaW9yaXR5Iiwic3RhcnRNb3Rpb24iLCJ1cGRhdGVNb3Rpb24iLCJ1cGRhdGVkIiwiZG9VcGRhdGVNb3Rpb24iLCJyZXNlcnZlTW90aW9uIiwiQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIiwiX2F1dG9EZWxldGUiLCJfbW90aW9uIiwiX2F2YWlsYWJsZSIsIl9maW5pc2hlZCIsIl9zdGFydGVkIiwiX3N0YXJ0VGltZVNlY29uZHMiLCJfZmFkZUluU3RhcnRUaW1lU2Vjb25kcyIsIl9lbmRUaW1lU2Vjb25kcyIsIl9zdGF0ZVRpbWVTZWNvbmRzIiwiX3N0YXRlV2VpZ2h0IiwiX2xhc3RFdmVudENoZWNrU2Vjb25kcyIsIl9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIiwiX2lzVHJpZ2dlcmVkRmFkZU91dCIsInNldEZhZGVPdXQiLCJzdGFydEZhZGVPdXQiLCJuZXdFbmRUaW1lU2Vjb25kcyIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJmIiwic2V0SXNBdmFpbGFibGUiLCJ0aW1lU2Vjb25kcyIsImdldFN0YXRlVGltZSIsImdldFN0YXRlV2VpZ2h0IiwiZ2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzIiwic2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzIiwiY2hlY2tTZWNvbmRzIiwiaXNUcmlnZ2VyZWRGYWRlT3V0IiwiZ2V0RmFkZU91dFNlY29uZHMiLCJDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IiwiX2V2ZW50Q2FsbEJhY2siLCJfZXZlbnRDdXN0b21EYXRhIiwiX21vdGlvbnMiLCJJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlIiwiZXJhc2UiLCJpc0ZpbmlzaGVkQnlIYW5kbGUiLCJtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyIiwic3RvcEFsbE1vdGlvbnMiLCJnZXRDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IiwiY2FsbGJhY2siLCJmaXJlZExpc3QiLCJQaHlzaWNzVHlwZVRhZ0FuZ2xlIiwiX3BoeXNpY3NSaWciLCJfb3B0aW9ucyIsIk9wdGlvbnMiLCJncmF2aXR5Iiwid2luZCIsIl9jdXJyZW50UmlnT3V0cHV0cyIsIl9wcmV2aW91c1JpZ091dHB1dHMiLCJfY3VycmVudFJlbWFpblRpbWUiLCJfcGFyYW1ldGVyQ2FjaGVzIiwiX3BhcmFtZXRlcklucHV0Q2FjaGVzIiwicGh5c2ljcyIsInBoeXNpY3NKc29uIiwiQ3ViaXNtUGh5c2ljc1JpZyIsIkN1YmlzbVBoeXNpY3NKc29uIiwiZ2V0R3Jhdml0eSIsImdldFdpbmQiLCJzdWJSaWdDb3VudCIsImdldFN1YlJpZ0NvdW50IiwiZ2V0RnBzIiwic2V0dGluZ3MiLCJDdWJpc21QaHlzaWNzU3ViUmlnIiwiaW5wdXRzIiwiZ2V0VG90YWxJbnB1dENvdW50IiwiQ3ViaXNtUGh5c2ljc0lucHV0Iiwib3V0cHV0cyIsImdldFRvdGFsT3V0cHV0Q291bnQiLCJDdWJpc21QaHlzaWNzT3V0cHV0IiwicGFydGljbGVzIiwiZ2V0VmVydGV4Q291bnQiLCJDdWJpc21QaHlzaWNzUGFydGljbGUiLCJjbGVhciIsImlucHV0SW5kZXgiLCJvdXRwdXRJbmRleCIsInBhcnRpY2xlSW5kZXgiLCJub3JtYWxpemF0aW9uUG9zaXRpb24iLCJtaW5pbXVtIiwiZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlIiwibWF4aW11bSIsImdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1heGltdW1WYWx1ZSIsImRlZmFsdXQiLCJnZXROb3JtYWxpemF0aW9uUG9zaXRpb25EZWZhdWx0VmFsdWUiLCJub3JtYWxpemF0aW9uQW5nbGUiLCJnZXROb3JtYWxpemF0aW9uQW5nbGVNaW5pbXVtVmFsdWUiLCJnZXROb3JtYWxpemF0aW9uQW5nbGVNYXhpbXVtVmFsdWUiLCJnZXROb3JtYWxpemF0aW9uQW5nbGVEZWZhdWx0VmFsdWUiLCJpbnB1dENvdW50IiwiZ2V0SW5wdXRDb3VudCIsImJhc2VJbnB1dEluZGV4Iiwic291cmNlUGFyYW1ldGVySW5kZXgiLCJnZXRJbnB1dFdlaWdodCIsInJlZmxlY3QiLCJnZXRJbnB1dFJlZmxlY3QiLCJnZXRJbnB1dFR5cGUiLCJDdWJpc21QaHlzaWNzU291cmNlIiwiQ3ViaXNtUGh5c2ljc1NvdXJjZV9YIiwiZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlIiwiZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlIiwiQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZIiwiZ2V0SW5wdXRUcmFuc2xhdGlvbllGcm9tTm9ybWFsaXplZFBhcmFtdGVyVmFsdWUiLCJDdWJpc21QaHlzaWNzU291cmNlX0FuZ2xlIiwiZ2V0SW5wdXRBbmdsZUZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWUiLCJzb3VyY2UiLCJDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSIsIkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlciIsImdldElucHV0U291cmNlSWQiLCJvdXRwdXRDb3VudCIsImdldE91dHB1dENvdW50IiwiYmFzZU91dHB1dEluZGV4IiwiY3VycmVudFJpZ091dHB1dCIsIlBoeXNpY3NPdXRwdXQiLCJyZXNpemUiLCJwcmV2aW91c1JpZ091dHB1dCIsImRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgiLCJ2ZXJ0ZXhJbmRleCIsImdldE91dHB1dFZlcnRleEluZGV4IiwiYW5nbGVTY2FsZSIsImdldE91dHB1dEFuZ2xlU2NhbGUiLCJnZXRPdXRwdXRXZWlnaHQiLCJkZXN0aW5hdGlvbiIsImdldE91dHB1dERlc3RpbmF0aW9uSWQiLCJnZXRPdXRwdXRUeXBlIiwiZ2V0T3V0cHV0VHJhbnNsYXRpb25YIiwiZ2V0U2NhbGUiLCJnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWCIsImdldE91dHB1dFRyYW5zbGF0aW9uWSIsImdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25ZIiwiZ2V0T3V0cHV0QW5nbGUiLCJnZXRPdXRwdXRTY2FsZUFuZ2xlIiwiZ2V0T3V0cHV0UmVmbGVjdCIsInBhcnRpY2xlQ291bnQiLCJnZXRQYXJ0aWNsZUNvdW50IiwiYmFzZVBhcnRpY2xlSW5kZXgiLCJtb2JpbGl0eSIsImdldFBhcnRpY2xlTW9iaWxpdHkiLCJkZWxheSIsImdldFBhcnRpY2xlRGVsYXkiLCJhY2NlbGVyYXRpb24iLCJnZXRQYXJ0aWNsZUFjY2VsZXJhdGlvbiIsInJhZGl1cyIsImdldFBhcnRpY2xlUmFkaXVzIiwicG9zaXRpb24iLCJnZXRQYXJ0aWNsZVBvc2l0aW9uIiwic3RhYmlsaXphdGlvbiIsInJhZEFuZ2xlIiwib3V0cHV0VmFsdWUiLCJjdXJyZW50U2V0dGluZyIsImN1cnJlbnRJbnB1dHMiLCJjdXJyZW50T3V0cHV0cyIsImN1cnJlbnRQYXJ0aWNsZXMiLCJwYXJhbWV0ZXJWYWx1ZXMiLCJwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzIiwicGFyYW1ldGVyTWluaW11bVZhbHVlcyIsInBhcmFtZXRlckRlZmF1bHRWYWx1ZXMiLCJ0b3RhbFRyYW5zbGF0aW9uIiwic2V0dGluZ0luZGV4IiwiYW5nbGUiLCJ1cGRhdGVQYXJ0aWNsZXNGb3JTdGFiaWxpemF0aW9uIiwidHJhbnNsYXRpb24iLCJvdXRQYXJhbWV0ZXJDYWNoZXMiLCJwcm90b3R5cGUiLCJKU09OIiwic3RyaW5naWZ5Iiwic3ViYXJyYXkiLCJ1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZSIsIm91dFBhcmFtSW5kZXgiLCJwaHlzaWNzRGVsdGFUaW1lIiwiaW5wdXRXZWlnaHQiLCJ1cGRhdGVQYXJ0aWNsZXMiLCJhbHBoYSIsImludGVycG9sYXRlIiwib3V0UGFyYW1ldGVyVmFsdWVzIiwic2V0T3B0aW9ucyIsIm9wdGlvbnMiLCJnZXRPcHRpb24iLCJzdHJhbmQiLCJpbml0aWFsUG9zaXRpb24iLCJsYXN0UG9zaXRpb24iLCJsYXN0R3Jhdml0eSIsInZlbG9jaXR5IiwiZm9yY2UiLCJ0YXJnZXRUcmFuc2xhdGlvbiIsInRhcmdldEFuZ2xlIiwicGFyYW1ldGVyTWluaW11bVZhbHVlIiwicGFyYW1ldGVyTWF4aW11bVZhbHVlIiwicGFyYW1ldGVyRGVmYXVsdFZhbHVlIiwiaXNJbnZlcnRlZCIsIm5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlIiwibm9ybWFsaXphaXRpb25Qb3NpdGlvbiIsInBhcmVudEdyYXZpdHkiLCJ0cmFuc2xhdGlvblNjYWxlIiwic3RyYW5kQ291bnQiLCJ3aW5kRGlyZWN0aW9uIiwidGhyZXNob2xkVmFsdWUiLCJhaXJSZXNpc3RhbmNlIiwidG90YWxSYWRpYW4iLCJjdXJyZW50R3Jhdml0eSIsImRpcmVjdGlvbiIsIm5ld0RpcmVjdGlvbiIsInBhcmFtZXRlclZhbHVlTWluaW11bSIsInBhcmFtZXRlclZhbHVlTWF4aW11bSIsIm91dHB1dCIsInZhbHVlQmVsb3dNaW5pbXVtIiwidmFsdWVFeGNlZWRlZE1heGltdW0iLCJwYXJhbWV0ZXJNaW5pbXVtIiwicGFyYW1ldGVyTWF4aW11bSIsInBhcmFtZXRlckRlZmF1bHQiLCJub3JtYWxpemVkTWluaW11bSIsIm5vcm1hbGl6ZWRNYXhpbXVtIiwibm9ybWFsaXplZERlZmF1bHQiLCJtYXhWYWx1ZSIsIm1pblZhbHVlIiwibWluTm9ybVZhbHVlIiwibWF4Tm9ybVZhbHVlIiwibWlkZGxlTm9ybVZhbHVlIiwibWlkZGxlVmFsdWUiLCJnZXRSYW5nZVZhbHVlIiwicGFyYW1WYWx1ZSIsInNpZ24iLCJuTGVuZ3RoIiwicExlbmd0aCIsIlBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzIiwiQ3ViaXNtUGh5c2ljc1BhcmFtZXRlciIsIkN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uIiwiUG9zaXRpb24iLCJBbmdsZSIsIlR5cGUiLCJFZmZlY3RpdmVGb3JjZXMiLCJHcmF2aXR5IiwiV2luZCIsIlBoeXNpY3NTZXR0aW5ncyIsIk5vcm1hbGl6YXRpb24iLCJNaW5pbXVtIiwiTWF4aW11bSIsIkRlZmF1bHQiLCJSZWZsZWN0IiwiV2VpZ2h0IiwiSW5wdXQiLCJPdXRwdXQiLCJWZXJ0aWNlcyIsInBoeXNpY3NTZXR0aW5nSW5kZXgiLCJfaXNDdWxsaW5nIiwiX2lzUHJlbXVsdGlwbGllZEFscGhhIiwiX2FuaXNvdHJvcHkiLCJfbW9kZWxDb2xvciIsIl9tdnBNYXRyaXg0eDQiLCJyZW5kZXJlciIsImRyYXdNb2RlbCIsImRvRHJhd01vZGVsIiwic2V0TXZwTWF0cml4IiwibWF0cml4NDQiLCJnZXRNdnBNYXRyaXgiLCJzZXRNb2RlbENvbG9yIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiZ2V0TW9kZWxDb2xvciIsInNldElzUHJlbXVsdGlwbGllZEFscGhhIiwiZW5hYmxlIiwiaXNQcmVtdWx0aXBsaWVkQWxwaGEiLCJzZXRJc0N1bGxpbmciLCJjdWxsaW5nIiwiaXNDdWxsaW5nIiwic2V0QW5pc290cm9weSIsIm4iLCJnZXRBbmlzb3Ryb3B5Iiwic19pbnN0YW5jZSIsInNfdmlld3BvcnQiLCJzX2ZibyIsIl9tYXNrUmVuZGVyVGV4dHVyZSIsIl9jb2xvckJ1ZmZlciIsIl9jdXJyZW50RnJhbWVObyIsIl9jbGlwcGluZ01hc2tCdWZmZXJTaXplIiwiX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrIiwiX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3IiwiX2NoYW5uZWxDb2xvcnMiLCJfdG1wQm91bmRzT25Nb2RlbCIsImNzbVJlY3QiLCJfdG1wTWF0cml4IiwiX3RtcE1hdHJpeEZvck1hc2siLCJfdG1wTWF0cml4Rm9yRHJhdyIsIl9tYXNrVGV4dHVyZSIsInRtcCIsImdldENoYW5uZWxGbGFnQXNDb2xvciIsImNoYW5uZWxObyIsImdldE1hc2tSZW5kZXJUZXh0dXJlIiwidGV4dHVyZSIsImZyYW1lTm8iLCJnbCIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsIkN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZSIsInNldEdMIiwiY2FsY0NsaXBwZWREcmF3VG90YWxCb3VuZHMiLCJjbGlwcGluZ0NvbnRleHQiLCJjbGlwcGVkRHJhd1RvdGFsTWluWCIsImNsaXBwZWREcmF3VG90YWxNaW5ZIiwiY2xpcHBlZERyYXdUb3RhbE1heFgiLCJNSU5fVkFMVUUiLCJjbGlwcGVkRHJhd1RvdGFsTWF4WSIsImNsaXBwZWREcmF3Q291bnQiLCJfY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0IiwiY2xpcHBlZERyYXdhYmxlSW5kZXgiLCJkcmF3YWJsZVZlcnRleENvdW50IiwiZHJhd2FibGVWZXJ0ZXhlcyIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJwaSIsIl9hbGxDbGlwcGVkRHJhd1JlY3QiLCJ3aWR0aCIsImhlaWdodCIsIl9pc1VzaW5nIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJkZWxldGVUZXh0dXJlIiwiZHJhd2FibGVNYXNrcyIsImRyYXdhYmxlTWFza0NvdW50cyIsImZpbmRTYW1lQ2xpcCIsIkN1YmlzbUNsaXBwaW5nQ29udGV4dCIsImFkZENsaXBwZWREcmF3YWJsZSIsInNldHVwQ2xpcHBpbmdDb250ZXh0IiwidXNpbmdDbGlwQ291bnQiLCJjbGlwSW5kZXgiLCJjYyIsInZpZXdwb3J0IiwicHJlRHJhdyIsInNldHVwTGF5b3V0Qm91bmRzIiwiY2xlYXJDb2xvciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJjbGlwQ29udGV4dCIsImFsbENsaXBlZERyYXdSZWN0IiwibGF5b3V0Qm91bmRzT25UZXgwMSIsIl9sYXlvdXRCb3VuZHMiLCJzZXRSZWN0IiwiZXhwYW5kIiwiX21hdHJpeEZvck1hc2siLCJfbWF0cml4Rm9yRHJhdyIsImNsaXBEcmF3Q291bnQiLCJfY2xpcHBpbmdJZENvdW50IiwiY2xpcERyYXdJbmRleCIsIl9jbGlwcGluZ0lkTGlzdCIsInNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2siLCJkcmF3TWVzaCIsInNhbWVDb3VudCIsImNsaXBJZCIsImRpdiIsIm1vZCIsImN1ckNsaXBJbmRleCIsImxheW91dENvdW50IiwiX2xheW91dENoYW5uZWxObyIsInhwb3MiLCJ5cG9zIiwiZ2V0Q29sb3JCdWZmZXIiLCJnZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdyIsInNldENsaXBwaW5nTWFza0J1ZmZlclNpemUiLCJnZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplIiwiQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMIiwibWFuYWdlciIsImNsaXBwaW5nRHJhd2FibGVJbmRpY2VzIiwiY2xpcENvdW50IiwiX293bmVyIiwicHVzaCIsImdldENsaXBwaW5nTWFuYWdlciIsInNldEdsIiwiX3NoYWRlclNldHMiLCJnZXRJbnN0YW5jZSIsIkN1YmlzbVNoYWRlcl9XZWJHTCIsImRlbGV0ZUluc3RhbmNlIiwicmVsZWFzZVNoYWRlclByb2dyYW0iLCJzZXR1cFNoYWRlclByb2dyYW0iLCJ0ZXh0dXJlSWQiLCJ2ZXJ0ZXhDb3VudCIsInZlcnRleEFycmF5IiwiaW5kZXhBcnJheSIsInV2QXJyYXkiLCJidWZmZXJEYXRhIiwiY29sb3JCbGVuZE1vZGUiLCJiYXNlQ29sb3IiLCJtYXRyaXg0eDQiLCJpbnZlcnRlZE1hc2siLCJTUkNfQ09MT1IiLCJEU1RfQ09MT1IiLCJTUkNfQUxQSEEiLCJEU1RfQUxQSEEiLCJnZW5lcmF0ZVNoYWRlcnMiLCJnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrIiwic2hhZGVyU2V0IiwiU2hhZGVyTmFtZXMiLCJTaGFkZXJOYW1lc19TZXR1cE1hc2siLCJ1c2VQcm9ncmFtIiwic2hhZGVyUHJvZ3JhbSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsInVuaWZvcm0xaSIsInNhbXBsZXJUZXh0dXJlMExvY2F0aW9uIiwidmVydGV4IiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsIkRZTkFNSUNfRFJBVyIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsInV2IiwiYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiIsImNvbG9yQ2hhbm5lbCIsInVuaWZvcm00ZiIsInVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uIiwidW5pZm9ybU1hdHJpeDRmdiIsInVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24iLCJyZWN0IiwidW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uIiwiZ2V0UmlnaHQiLCJnZXRCb3R0b20iLCJ1bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uIiwidW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24iLCJaRVJPIiwiT05FX01JTlVTX1NSQ19DT0xPUiIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJtYXNrZWQiLCJnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3IiwiQ3ViaXNtU2hhZGVyU2V0IiwiU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhIiwiT05FIiwiU2hhZGVyTmFtZXNfQWRkUHJlbXVsdGlwbGllZEFscGhhIiwiU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSIsIlRFWFRVUkUxIiwidGV4Iiwic2FtcGxlclRleHR1cmUxTG9jYXRpb24iLCJ1bmlmb3JtTWF0cml4TG9jYXRpb24iLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImJsZW5kRnVuY1NlcGFyYXRlIiwiZGVsZXRlUHJvZ3JhbSIsImxvYWRTaGFkZXJQcm9ncmFtIiwidmVydGV4U2hhZGVyU3JjU2V0dXBNYXNrIiwiZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2siLCJ2ZXJ0ZXhTaGFkZXJTcmMiLCJmcmFnbWVudFNoYWRlclNyY1ByZW11bHRpcGxpZWRBbHBoYSIsInZlcnRleFNoYWRlclNyY01hc2tlZCIsImZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYSIsImZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ2ZXJ0ZXhTaGFkZXJTb3VyY2UiLCJmcmFnbWVudFNoYWRlclNvdXJjZSIsImNyZWF0ZVByb2dyYW0iLCJ2ZXJ0U2hhZGVyIiwiY29tcGlsZVNoYWRlclNvdXJjZSIsIlZFUlRFWF9TSEFERVIiLCJmcmFnU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJkZWxldGVTaGFkZXIiLCJzaGFkZXJUeXBlIiwic2hhZGVyU291cmNlIiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlckluZm9Mb2ciLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsIl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrIiwiX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXciLCJfY2xpcHBpbmdNYW5hZ2VyIiwiZmlyc3REcmF3IiwiX3RleHR1cmVzIiwiX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0IiwiX2J1ZmZlckRhdGEiLCJXZWJHTEJ1ZmZlciIsIm1vZGVsVGV4dHVyZU5vIiwiZ2xUZXh0dXJlIiwiZ2V0QmluZGVkVGV4dHVyZXMiLCJkZWxldGVCdWZmZXIiLCJyZW5kZXJPcmRlciIsIm9yZGVyIiwic2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyIsInRleHR1cmVObyIsImluZGV4Q291bnQiLCJDVUxMX0ZBQ0UiLCJkaXNhYmxlIiwiZnJvbnRGYWNlIiwiQ0NXIiwiZHJhd3RleHR1cmUiLCJtb2RlbENvbG9yUkdCQSIsImRyYXdFbGVtZW50cyIsIlRSSUFOR0xFUyIsIlVOU0lHTkVEX1NIT1JUIiwiZG9TdGF0aWNSZWxlYXNlIiwic2V0UmVuZGVyU3RhdGUiLCJmYm8iLCJTQ0lTU09SX1RFU1QiLCJTVEVOQ0lMX1RFU1QiLCJERVBUSF9URVNUIiwiQ1ciLCJCTEVORCIsImNvbG9yTWFzayIsIl9leHRlbnNpb24iLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJjbGlwIiwiZ2V0RXh0ZW5zaW9uIiwiY3NtUGFpciIsIl9rZXlWYWx1ZXMiLCJfZHVtbXlWYWx1ZSIsIl9zaXplIiwiQXJyYXkiLCJmb3VuZCIsIm5ld1NpemUiLCJmaXRUb1NpemUiLCJEZWZhdWx0U2l6ZSIsIml0ZXJhdG9yIiwiX2luZGV4Iiwic3BsaWNlIiwiZHVtcEFzSW50IiwiaWR4IiwiX21hcCIsInByZURlY3JlbWVudCIsImRlY3JlbWVudCIsIml0ZW9sZCIsImdldENlbnRlclgiLCJnZXRDZW50ZXJZIiwiYXBwZW5kIiwic3Vic3RyIiwiZXhwYW5zaW9uIiwiZ2V0Qnl0ZXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiaXNMZXNzIiwiaXNHcmVhdCIsImlzRW1wdHkiLCJpbml0aWFsQ2FwYWNpdHkiLCJfcHRyIiwiX2NhcGFjaXR5Iiwic19kZWZhdWx0U2l6ZSIsImFzc2lnbiIsImNhbGxQbGFjZW1lbnROZXciLCJzdWIiLCJpbnNlcnQiLCJkc3RTaSIsInNyY1NpIiwic3JjRWkiLCJhZGRDb3VudCIsImFkZFNpemUiLCJfdmVjdG9yIiwicmVtb3ZlIiwiZ2V0T2Zmc2V0IiwibmV3VmVjdG9yIiwic3Vic3RpdHV0aW9uIiwiQ3ViaXNtTG9nUHJpbnQiLCJsZXZlbCIsImZtdCIsImFyZ3MiLCJDdWJpc21EZWJ1ZyIsInByaW50IiwiQ3ViaXNtTG9nUHJpbnRJbiIsImV4cHIiLCJjb25zb2xlIiwiYXNzZXJ0IiwiQ3ViaXNtTG9nVmVyYm9zZSIsIkxvZ0xldmVsX1ZlcmJvc2UiLCJMb2dMZXZlbF9EZWJ1ZyIsIkxvZ0xldmVsX0luZm8iLCJMb2dMZXZlbF9XYXJuaW5nIiwiTG9nTGV2ZWxfRXJyb3IiLCJsb2dMZXZlbCIsImZvcm1hdCIsImxvZ1ByaW50IiwiZHVtcEJ5dGVzIiwiQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSCIsImRlZmF1bHRWYWx1ZSIsImluZGVudCIsImVycm9yVmFsdWUiLCJzZXRFcnJvck5vdEZvckNsaWVudENhbGwiLCJudWxsVmFsdWUiLCJzX2R1bW15S2V5cyIsImlzQm9vbCIsImlzRmxvYXQiLCJpc1N0cmluZyIsImlzQXJyYXkiLCJpc01hcCIsImVxdWFscyIsImlzU3RhdGljIiwiZXJyb3JTdHIiLCJKc29uRXJyb3IiLCJKc29uQm9vbGVhbiIsInRydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJKc29uTnVsbHZhbHVlIiwiX3BhcnNlQ2FsbGJhY2siLCJDdWJpc21Kc29uRXh0ZW5zaW9uIiwicGFyc2VKc29uT2JqZWN0IiwiX2Vycm9yIiwiX2xpbmVDb3VudCIsIl9yb290IiwicGFyc2VCeXRlcyIsImFycmF5QnVmZmVyVG9TdHJpbmciLCJ1aW50OEFycmF5IiwiVWludDhBcnJheSIsInN0ciIsImxlbiIsInBhZCIsInRvU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VDYWxsYmFjayIsInN0cmJ1ZiIsImVuZFBvcyIsImRlY29kZUJ1ZmZlciIsInBhcnNlVmFsdWUiLCJKc29uTWFwIiwiSnNvblN0cmluZyIsImdldFBhcnNlRXJyb3IiLCJjaGVja0VuZE9mRmlsZSIsIm91dEVuZFBvcyIsIm8iLCJhZnRlclN0cmluZyIsInN0cnRvZCIsImluZGV4T2YiLCJKc29uRmxvYXQiLCJwYXJzZVN0cmluZyIsInBhcnNlQXJyYXkiLCJwYXJzZU9iamVjdCIsInN0cmluZyIsImJ1ZlN0YXJ0IiwibG9jYWxSZXRFbmRQb3MyIiwib2siLCJGT1JfTE9PUCIsIkZPUl9MT09QMiIsInB1dCIsIkZPUl9MT09QMyIsIkpzb25BcnJheSIsImxvY2FsUmV0RW5kcG9zMiIsIl92YWx1ZSIsIl9zdHJpbmdCdWZmZXIiLCJwYXJzZUludCIsInJvdW5kIiwiX2Jvb2xWYWx1ZSIsIl9pc1N0YXRpYyIsIl9hcnJheSIsInN0cmluZ0J1ZmZlciIsIml0ZXIiLCJfa2V5cyIsIm9iaiIsImtleXMiLCJmb3JFYWNoIiwicGFyc2VKc29uQXJyYXkiLCJhcnIiLCJjb252S2V5IiwiX29wZW5haXVybCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJfb3BlbmFpcGlrZXkiLCJfdHRzcmVnaW9uIiwiX3R0c2FwaWtleSIsIl9pblByb2dyZXNzIiwiZ2V0T3BlbkFpQW5zd2VyIiwicHJvbXB0IiwiY29udmVyc2F0aW9ucyIsIkxBcHBQYWwiLCJwcmludE1lc3NhZ2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiYW5zd2VyIiwiY2hvaWNlcyIsInRleHQiLCJnZXRTcGVlY2hVcmwiLCJsYW5ndWFnZSIsInJlcXVlc3RIZWFkZXJzIiwiSGVhZGVycyIsInZvaWNlIiwiTEFOR1VBR0VfVE9fVk9JQ0VfTUFQUElOR19MSVNUIiwiZmluZCIsInN0YXJ0c1dpdGgiLCJJc01hbGUiLCJzc21sIiwiYmxvYiIsInVybCIsIndpbmRvdyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImdldFRleHRGcm9tU3BlZWNoIiwiZ2V0V2F2ZUJsb2IiLCJ3YXYiLCJEaXNwbGF5VGV4dCIsIkF6dXJlQWkiLCJDYW52YXNTaXplIiwiVmlld1NjYWxlIiwiVmlld01heFNjYWxlIiwiVmlld01pblNjYWxlIiwiVmlld0xvZ2ljYWxMZWZ0IiwiVmlld0xvZ2ljYWxSaWdodCIsIlZpZXdMb2dpY2FsQm90dG9tIiwiVmlld0xvZ2ljYWxUb3AiLCJWaWV3TG9naWNhbE1heExlZnQiLCJWaWV3TG9naWNhbE1heFJpZ2h0IiwiVmlld0xvZ2ljYWxNYXhCb3R0b20iLCJWaWV3TG9naWNhbE1heFRvcCIsIlJlc291cmNlc1BhdGgiLCJCYWNrSW1hZ2VOYW1lIiwiR2VhckltYWdlTmFtZSIsIlBvd2VySW1hZ2VOYW1lIiwiTW9kZWxEaXIiLCJNb2RlbERpclNpemUiLCJNb3Rpb25Hcm91cElkbGUiLCJNb3Rpb25Hcm91cFRhcEJvZHkiLCJIaXRBcmVhTmFtZUhlYWQiLCJIaXRBcmVhTmFtZUJvZHkiLCJQcmlvcml0eU5vbmUiLCJQcmlvcml0eUlkbGUiLCJQcmlvcml0eU5vcm1hbCIsIlByaW9yaXR5Rm9yY2UiLCJEZWJ1Z0xvZ0VuYWJsZSIsIkRlYnVnVG91Y2hMb2dFbmFibGUiLCJDdWJpc21Mb2dnaW5nTGV2ZWwiLCJSZW5kZXJUYXJnZXRXaWR0aCIsIlJlbmRlclRhcmdldEhlaWdodCIsImNhbnZhcyIsImZyYW1lQnVmZmVyIiwiX2NhcHR1cmVkIiwiX21vdXNlWCIsIl9tb3VzZVkiLCJfaXNFbmQiLCJfY3ViaXNtT3B0aW9uIiwiX3ZpZXciLCJMQXBwVmlldyIsIl90ZXh0dXJlTWFuYWdlciIsIkxBcHBUZXh0dXJlTWFuYWdlciIsIkxBcHBEZWxlZ2F0ZSIsInJlbGVhc2VJbnN0YW5jZSIsImNyZWF0ZUVsZW1lbnQiLCJMQXBwRGVmaW5lIiwiX3Jlc2l6ZUNhbnZhcyIsImdldENvbnRleHQiLCJhcHBlbmRDaGlsZCIsImdldFBhcmFtZXRlciIsIkZSQU1FQlVGRkVSX0JJTkRJTkciLCJibGVuZEZ1bmMiLCJvblRvdWNoQmVnYW4iLCJvblRvdWNoTW92ZWQiLCJvblRvdWNoRW5kZWQiLCJvblRvdWNoQ2FuY2VsIiwib25DbGlja0JlZ2FuIiwib25Nb3VzZU1vdmVkIiwib25DbGlja0VuZGVkIiwiaW5pdGlhbGl6ZUN1YmlzbSIsImFsZXJ0IiwiaW5uZXJIVE1MIiwib25SZXNpemUiLCJpbml0aWFsaXplU3ByaXRlIiwiTEFwcExpdmUyRE1hbmFnZXIiLCJydW4iLCJ1cGRhdGVUaW1lIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwiREVQVEhfQlVGRkVSX0JJVCIsImNsZWFyRGVwdGgiLCJyZW5kZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ2ZXJ0ZXhTaGFkZXJJZCIsImZyYWdtZW50U2hhZGVySWQiLCJwcm9ncmFtSWQiLCJnZXRWaWV3IiwiZ2V0VGV4dHVyZU1hbmFnZXIiLCJzdGFydFZvaWNlQ29udmVyc2F0aW9uIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZSIsInBvc1giLCJwYWdlWCIsInBvc1kiLCJwYWdlWSIsIm9uVG91Y2hlc0JlZ2FuIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJvblRvdWNoZXNNb3ZlZCIsIm9uVG91Y2hlc0VuZGVkIiwiY2hhbmdlZFRvdWNoZXMiLCJfZmluaXNoZWRNb3Rpb24iLCJzZWxmIiwiX3ZpZXdNYXRyaXgiLCJfbW9kZWxzIiwiX3NjZW5lSW5kZXgiLCJjaGFuZ2VTY2VuZSIsIm5vIiwicmVsZWFzZUFsbE1vZGVsIiwib25EcmFnIiwib25UYXAiLCJ0b0ZpeGVkIiwiaGl0VGVzdCIsInNldFJhbmRvbUV4cHJlc3Npb24iLCJ0aGVuIiwiYW5zIiwiX3dhdkZpbGVIYW5kbGVyIiwibG9hZFdhdkZpbGUiLCJzdGFydFJhbmRvbU1vdGlvbiIsIm9uVXBkYXRlIiwibW9kZWxDb3VudCIsInByb2plY3Rpb24iLCJkcmF3IiwibmV4dFNjZW5lIiwibW9kZWxQYXRoIiwibW9kZWxKc29uTmFtZSIsIkxBcHBNb2RlbCIsImxvYWRBc3NldHMiLCJzZXRWaWV3TWF0cml4IiwiTG9hZFN0ZXAiLCJfbW9kZWxTZXR0aW5nIiwiX21vZGVsSG9tZURpciIsIl9leWVCbGlua0lkcyIsIl9saXBTeW5jSWRzIiwiX2V4cHJlc3Npb25zIiwiX2hpdEFyZWEiLCJfdXNlckFyZWEiLCJfaWRQYXJhbUFuZ2xlWCIsIl9pZFBhcmFtQW5nbGVZIiwiX2lkUGFyYW1BbmdsZVoiLCJfaWRQYXJhbUV5ZUJhbGxYIiwiX2lkUGFyYW1FeWVCYWxsWSIsIl9pZFBhcmFtQm9keUFuZ2xlWCIsIl9zdGF0ZSIsIkxvYWRBc3NldHMiLCJfZXhwcmVzc2lvbkNvdW50IiwiX3RleHR1cmVDb3VudCIsIl9tb3Rpb25Db3VudCIsIl9hbGxNb3Rpb25Db3VudCIsIkxBcHBXYXZGaWxlSGFuZGxlciIsImRpciIsImZpbGVOYW1lIiwicmVzcG9uc2UiLCJhcnJheUJ1ZmZlciIsInNldHRpbmciLCJieXRlTGVuZ3RoIiwiTG9hZE1vZGVsIiwic2V0dXBNb2RlbCIsIm1vZGVsRmlsZU5hbWUiLCJMb2FkRXhwcmVzc2lvbiIsImxvYWRDdWJpc21FeHByZXNzaW9uIiwiV2FpdExvYWRNb2RlbCIsImV4cHJlc3Npb25OYW1lIiwiZXhwcmVzc2lvbkZpbGVOYW1lIiwiTG9hZFBoeXNpY3MiLCJsb2FkQ3ViaXNtUGh5c2ljcyIsIldhaXRMb2FkRXhwcmVzc2lvbiIsInBoeXNpY3NGaWxlTmFtZSIsIkxvYWRQb3NlIiwibG9hZEN1YmlzbVBvc2UiLCJXYWl0TG9hZFBoeXNpY3MiLCJwb3NlRmlsZU5hbWUiLCJTZXR1cEV5ZUJsaW5rIiwic2V0dXBFeWVCbGluayIsIldhaXRMb2FkUG9zZSIsIlNldHVwQnJlYXRoIiwic2V0dXBCcmVhdGgiLCJMb2FkVXNlckRhdGEiLCJ1c2VyRGF0YUZpbGUiLCJTZXR1cEV5ZUJsaW5rSWRzIiwic2V0dXBFeWVCbGlua0lkcyIsIldhaXRMb2FkVXNlckRhdGEiLCJleWVCbGlua0lkQ291bnQiLCJTZXR1cExpcFN5bmNJZHMiLCJzZXR1cExpcFN5bmNJZHMiLCJsaXBTeW5jSWRDb3VudCIsIlNldHVwTGF5b3V0Iiwic2V0dXBMYXlvdXQiLCJMb2FkTW90aW9uIiwibG9hZEN1YmlzbU1vdGlvbiIsIldhaXRMb2FkTW90aW9uIiwiZ3JvdXAiLCJtb3Rpb25Hcm91cENvdW50IiwicHJlTG9hZE1vdGlvbkdyb3VwIiwiTG9hZFRleHR1cmUiLCJzZXR1cFRleHR1cmVzIiwibW9kZWxUZXh0dXJlTnVtYmVyIiwidGV4dHVyZVBhdGgiLCJjcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUiLCJ0ZXh0dXJlSW5mbyIsIkNvbXBsZXRlU2V0dXAiLCJXYWl0TG9hZFRleHR1cmUiLCJyZWxvYWRSZW5kZXJlciIsImdldERlbHRhVGltZSIsIm1vdGlvblVwZGF0ZWQiLCJnZXRSbXMiLCJhdWRpbyIsIl9hdWRpb1NyYyIsInBsYXkiLCJtb3Rpb25GaWxlTmFtZSIsImZhZGVUaW1lIiwibG9jYWxlQ29tcGFyZSIsInBhdGgiLCJzdGFydCIsImZsb29yIiwic2V0RXhwcmVzc2lvbiIsImV4cHJlc3Npb25JZCIsImhpdEFyZW5hTmFtZSIsImRyYXdJZCIsInRtcE1vdGlvbiIsInJlbGVhc2VNb3Rpb25zIiwicmVsZWFzZUV4cHJlc3Npb25zIiwiZG9EcmF3IiwibWF0cml4IiwibG9hZEZpbGVBc0J5dGVzIiwiZmlsZVBhdGgiLCJzX2RlbHRhVGltZSIsInNfY3VycmVudEZyYW1lIiwiRGF0ZSIsIm5vdyIsInNfbGFzdEZyYW1lIiwibGFzdFVwZGF0ZSIsIl9yZWN0IiwiUmVjdCIsInVwIiwiZG93biIsIl90ZXh0dXJlIiwiX3ZlcnRleEJ1ZmZlciIsIl91dkJ1ZmZlciIsIl9pbmRleEJ1ZmZlciIsIl9wb3NpdGlvbkxvY2F0aW9uIiwiX3V2TG9jYXRpb24iLCJfdGV4dHVyZUxvY2F0aW9uIiwiX3Bvc2l0aW9uQXJyYXkiLCJfdXZBcnJheSIsIl9pbmRleEFycmF5IiwiX2ZpcnN0RHJhdyIsImdldFRleHR1cmUiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIlVpbnQxNkFycmF5IiwiU1RBVElDX0RSQVciLCJMQXBwU3ByaXRlIiwidXNlUHJlbXVsdGlwbHkiLCJ1c2VQcmVtdWx0cGx5IiwiaW1nIiwiSW1hZ2UiLCJvbmxvYWQiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiZ2VuZXJhdGVNaXBtYXAiLCJUZXh0dXJlSW5mbyIsInJlbGVhc2VUZXh0dXJlcyIsInJlbGVhc2VUZXh0dXJlQnlUZXh0dXJlIiwicmVsZWFzZVRleHR1cmVCeUZpbGVQYXRoIiwiX3Byb2dyYW1JZCIsIl9iYWNrIiwiX2dlYXIiLCJfdG91Y2hNYW5hZ2VyIiwiVG91Y2hNYW5hZ2VyIiwiX2RldmljZVRvU2NyZWVuIiwicmF0aW8iLCJzY3JlZW5XIiwic2NyZWVuSCIsImZsdXNoIiwibGl2ZTJETWFuYWdlciIsInRleHR1cmVNYW5hZ2VyIiwicmVzb3VyY2VzUGF0aCIsImltYWdlTmFtZSIsImZ3aWR0aCIsImZoZWlnaHQiLCJ0b3VjaGVzQmVnYW4iLCJ2aWV3WCIsInRyYW5zZm9ybVZpZXdYIiwidmlld1kiLCJ0cmFuc2Zvcm1WaWV3WSIsInRvdWNoZXNNb3ZlZCIsImRldmljZVgiLCJzY3JlZW5YIiwiZGV2aWNlWSIsInNjcmVlblkiLCJ0cmFuc2Zvcm1TY3JlZW5YIiwidHJhbnNmb3JtU2NyZWVuWSIsIl9sb2FkRmlsZXRvQnl0ZXMiLCJfYnl0ZVJlYWRlciIsIl9maWxlQnl0ZSIsIl9maWxlRGF0YVZpZXciLCJEYXRhVmlldyIsIl9maWxlU2l6ZSIsIl9wY21EYXRhIiwiX2xhc3RSbXMiLCJfc2FtcGxlT2Zmc2V0IiwiX3dhdkZpbGVJbmZvIiwiV2F2RmlsZUluZm8iLCJCeXRlUmVhZGVyIiwiZ29hbE9mZnNldCIsInJtcyIsIl9zYW1wbGVzUGVyQ2hhbm5lbCIsIl9zYW1wbGluZ1JhdGUiLCJjaGFubmVsQ291bnQiLCJfbnVtYmVyT2ZDaGFubmVscyIsInNhbXBsZUNvdW50IiwicGNtIiwicmVsZWFzZVBjbURhdGEiLCJyZXNwb25jZSIsIl9yZWFkT2Zmc2V0IiwiX2ZpbGVOYW1lIiwiZ2V0Q2hlY2tTaWduYXR1cmUiLCJFcnJvciIsImdldDMyTGl0dGxlRW5kaWFuIiwiZm10Q2h1bmtTaXplIiwiZ2V0MTZMaXR0bGVFbmRpYW4iLCJfYml0c1BlclNhbXBsZSIsImRhdGFDaHVua1NpemUiLCJnZXRQY21TYW1wbGUiLCJwY20zMiIsImdldDgiLCJnZXQyNExpdHRsZUVuZGlhbiIsImdldFVpbnQ4IiwicmVmZXJlbmNlIiwiZ2V0U2lnbmF0dXJlIiwicmVmZXJlbmNlU3RyaW5nIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJzaWduYXR1cmVPZmZzZXQiLCJvbmJlZm9yZXVubG9hZCIsIm9ucmVzaXplIiwiX3N0YXJ0WCIsIl9zdGFydFkiLCJfbGFzdFgiLCJfbGFzdFkiLCJfbGFzdFgxIiwiX2xhc3RZMSIsIl9sYXN0WDIiLCJfbGFzdFkyIiwiX2xhc3RUb3VjaERpc3RhbmNlIiwiX2RlbHRhWCIsIl9kZWx0YVkiLCJfc2NhbGUiLCJfdG91Y2hTaW5nbGUiLCJfZmxpcEF2YWlsYWJsZSIsImdldERlbHRhWCIsImdldERlbHRhWSIsImdldFN0YXJ0WCIsImdldFN0YXJ0WSIsImdldFgxIiwiZ2V0WTEiLCJnZXRYMiIsImdldFkyIiwiaXNTaW5nbGVUb3VjaCIsImlzRmxpY2tBdmFpbGFibGUiLCJkaXNhYmxlRmxpY2siLCJnZXRGbGlja0Rpc3RhbmNlIiwiY2FsY3VsYXRlRGlzdGFuY2UiLCJ5MSIsInkyIiwiY2FsY3VsYXRlTW92aW5nQW1vdW50IiwidjEiLCJ2MiIsImFic29sdXRlVmFsdWUxIiwiYWJzb2x1dGVWYWx1ZTIiLCJkb3dubG9hZFdhdiIsIm1vZHVsZSIsImV4cG9ydHMiLCJtZWRpYVJlY29yZGVyIiwic3RyZWFtIiwiX19kYXRhIiwiYXN5bmMiLCJjb25zdHJhaW50cyIsInZpZGVvIiwic3RhdGUiLCJtZWRpYVRyYWNrQ29uc3RyYWludHMiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJNZWRpYVJlY29yZGVyIiwib25kYXRhYXZhaWxhYmxlIiwiZXJyIiwiZXJyb3IiLCJzdG9wIiwib25zdG9wIiwiZ2V0VHJhY2tzIiwidHJhY2siLCJmaWxlbmFtZSIsImFzMzJCaXQiLCJjb250ZXh0T3B0aW9ucyIsImJsb2JEYXRhIiwiYXMzMkJpdEZsb2F0IiwiYW5jaG9yRWxlbWVudCIsImhyZWYiLCJkb3dubG9hZCIsInN0eWxlIiwiZGlzcGxheSIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJXYXZSZWNvcmRlciIsIl93cml0ZVN0cmluZ1RvQXJyYXkiLCJhU3RyaW5nIiwidGFyZ2V0QXJyYXkiLCJjaGFyQ29kZUF0IiwiX3dyaXRlSW50MTZUb0FycmF5IiwiYU51bWJlciIsIl93cml0ZUludDMyVG9BcnJheSIsIl9mbG9hdEJpdHMiLCJidWYiLCJBcnJheUJ1ZmZlciIsIlVpbnQzMkFycmF5IiwiYXVkaW9CdWZmZXIiLCJCbG9iIiwiYXVkaW9Db250ZXh0IiwiQXVkaW9Db250ZXh0IiwiZGVjb2RlQXVkaW9EYXRhIiwiX2dldEF1ZGlvQnVmZmVyIiwiZnJhbWVMZW5ndGgiLCJudW1iZXJPZkNoYW5uZWxzIiwic2FtcGxlUmF0ZSIsImJpdHNQZXJTYW1wbGUiLCJieXRlUmF0ZSIsImJsb2NrQWxpZ24iLCJ3YXZEYXRhQnl0ZUxlbmd0aCIsIndhdmVGaWxlRGF0YSIsInN1YkNodW5rMlNpemUiLCJjaHVua1NpemUiLCJiaXREZXB0aCIsImNoYW5uZWwiLCJjaGFubmVscyIsImNoYW5uZWxEYXRhIiwic2FtcGxlIiwiZ2V0Q2hhbm5lbERhdGEiLCJfd3JpdGVBdWRpb0J1ZmZlclRvQXJyYXkiLCJnbG9iYWwiLCJnbG9iYWxUaGlzIiwic3VwcG9ydCIsIlN5bWJvbCIsInZpZXdDbGFzc2VzIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc1ZpZXciLCJjYWxsIiwibm9ybWFsaXplTmFtZSIsIlN0cmluZyIsIlR5cGVFcnJvciIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwibmV4dCIsInNoaWZ0IiwiZG9uZSIsImhlYWRlciIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25zdW1lZCIsImJvZHlVc2VkIiwiUHJvbWlzZSIsInJlamVjdCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsInJlc29sdmUiLCJvbmVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiRmlsZVJlYWRlciIsInByb21pc2UiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImJ1ZmZlckNsb25lIiwidmlldyIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwiYnl0ZU9mZnNldCIsInJlYWRBc1RleHQiLCJjaGFycyIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJmb3JtRGF0YSIsImRlY29kZSIsIm9sZFZhbHVlIiwiaGFzIiwiaGFzT3duUHJvcGVydHkiLCJ0aGlzQXJnIiwiZW50cmllcyIsIm1ldGhvZHMiLCJSZXF1ZXN0IiwiaW5wdXQiLCJ1cGNhc2VkIiwiY3JlZGVudGlhbHMiLCJtb2RlIiwic2lnbmFsIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImNhY2hlIiwicmVQYXJhbVNlYXJjaCIsImdldFRpbWUiLCJmb3JtIiwidHJpbSIsImJ5dGVzIiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwibG9jYXRpb24iLCJET01FeGNlcHRpb24iLCJzdGFjayIsImNvbnN0cnVjdG9yIiwiaW5pdCIsInJlcXVlc3QiLCJhYm9ydGVkIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJhYm9ydFhociIsImFib3J0IiwicmF3SGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsImxpbmUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsInNldFRpbWVvdXQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsImZpeFVybCIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZW5kIiwicG9seWZpbGwiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInByb3AiLCJ0b1N0cmluZ1RhZyJdLCJzb3VyY2VSb290IjoiIn0=